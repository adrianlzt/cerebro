type Acknowledge implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  acknowledgeid: BigInt!
  userid: BigInt!
  eventid: BigInt!
  clock: Int!
  message: String!
  action: Int!

  """Reads a single `User` that is related to this `Acknowledge`."""
  userByUserid: User

  """Reads a single `Event` that is related to this `Acknowledge`."""
  eventByEventid: Event
}

"""
A condition to be used against `Acknowledge` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AcknowledgeCondition {
  """Checks for equality with the object’s `acknowledgeid` field."""
  acknowledgeid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `action` field."""
  action: Int
}

"""An input for mutations affecting `Acknowledge`"""
input AcknowledgeInput {
  acknowledgeid: BigInt!
  userid: BigInt!
  eventid: BigInt!
  clock: Int
  message: String
  action: Int
}

"""
Represents an update to a `Acknowledge`. Fields that are set will be updated.
"""
input AcknowledgePatch {
  acknowledgeid: BigInt
  userid: BigInt
  eventid: BigInt
  clock: Int
  message: String
  action: Int
}

"""A connection to a list of `Acknowledge` values."""
type AcknowledgesConnection {
  """A list of `Acknowledge` objects."""
  nodes: [Acknowledge]!

  """
  A list of edges which contains the `Acknowledge` and cursor to aid in pagination.
  """
  edges: [AcknowledgesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Acknowledge` you could get from the connection."""
  totalCount: Int
}

"""A `Acknowledge` edge in the connection."""
type AcknowledgesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Acknowledge` at the end of the edge."""
  node: Acknowledge
}

"""Methods to use when ordering `Acknowledge`."""
enum AcknowledgesOrderBy {
  NATURAL
  ACKNOWLEDGEID_ASC
  ACKNOWLEDGEID_DESC
  USERID_ASC
  USERID_DESC
  EVENTID_ASC
  EVENTID_DESC
  CLOCK_ASC
  CLOCK_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  ACTION_ASC
  ACTION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Action implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  actionid: BigInt!
  name: String!
  eventsource: Int!
  evaltype: Int!
  status: Int!
  escPeriod: Int!
  defShortdata: String!
  defLongdata: String!
  rShortdata: String!
  rLongdata: String!
  formula: String!
  maintenanceMode: Int!

  """Reads and enables pagination through a set of `Operation`."""
  operationsByActionid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperationCondition
  ): OperationsConnection!

  """Reads and enables pagination through a set of `Condition`."""
  conditionsByActionid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Condition`."""
    orderBy: [ConditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionCondition
  ): ConditionsConnection!

  """Reads and enables pagination through a set of `Alert`."""
  alertsByActionid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlertCondition
  ): AlertsConnection!
}

"""
A condition to be used against `Action` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ActionCondition {
  """Checks for equality with the object’s `actionid` field."""
  actionid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `eventsource` field."""
  eventsource: Int

  """Checks for equality with the object’s `evaltype` field."""
  evaltype: Int

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `escPeriod` field."""
  escPeriod: Int

  """Checks for equality with the object’s `defShortdata` field."""
  defShortdata: String

  """Checks for equality with the object’s `defLongdata` field."""
  defLongdata: String

  """Checks for equality with the object’s `rShortdata` field."""
  rShortdata: String

  """Checks for equality with the object’s `rLongdata` field."""
  rLongdata: String

  """Checks for equality with the object’s `formula` field."""
  formula: String

  """Checks for equality with the object’s `maintenanceMode` field."""
  maintenanceMode: Int
}

"""An input for mutations affecting `Action`"""
input ActionInput {
  actionid: BigInt!
  name: String
  eventsource: Int
  evaltype: Int
  status: Int
  escPeriod: Int
  defShortdata: String
  defLongdata: String
  rShortdata: String
  rLongdata: String
  formula: String
  maintenanceMode: Int
}

"""
Represents an update to a `Action`. Fields that are set will be updated.
"""
input ActionPatch {
  actionid: BigInt
  name: String
  eventsource: Int
  evaltype: Int
  status: Int
  escPeriod: Int
  defShortdata: String
  defLongdata: String
  rShortdata: String
  rLongdata: String
  formula: String
  maintenanceMode: Int
}

"""A connection to a list of `Action` values."""
type ActionsConnection {
  """A list of `Action` objects."""
  nodes: [Action]!

  """
  A list of edges which contains the `Action` and cursor to aid in pagination.
  """
  edges: [ActionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Action` you could get from the connection."""
  totalCount: Int
}

"""A `Action` edge in the connection."""
type ActionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Action` at the end of the edge."""
  node: Action
}

"""Methods to use when ordering `Action`."""
enum ActionsOrderBy {
  NATURAL
  ACTIONID_ASC
  ACTIONID_DESC
  NAME_ASC
  NAME_DESC
  EVENTSOURCE_ASC
  EVENTSOURCE_DESC
  EVALTYPE_ASC
  EVALTYPE_DESC
  STATUS_ASC
  STATUS_DESC
  ESC_PERIOD_ASC
  ESC_PERIOD_DESC
  DEF_SHORTDATA_ASC
  DEF_SHORTDATA_DESC
  DEF_LONGDATA_ASC
  DEF_LONGDATA_DESC
  R_SHORTDATA_ASC
  R_SHORTDATA_DESC
  R_LONGDATA_ASC
  R_LONGDATA_DESC
  FORMULA_ASC
  FORMULA_DESC
  MAINTENANCE_MODE_ASC
  MAINTENANCE_MODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Alert implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  alertid: BigInt!
  actionid: BigInt!
  eventid: BigInt!
  userid: BigInt
  clock: Int!
  mediatypeid: BigInt
  sendto: String!
  subject: String!
  message: String!
  status: Int!
  retries: Int!
  error: String!
  escStep: Int!
  alerttype: Int!

  """Reads a single `Action` that is related to this `Alert`."""
  actionByActionid: Action

  """Reads a single `Event` that is related to this `Alert`."""
  eventByEventid: Event

  """Reads a single `User` that is related to this `Alert`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Alert`."""
  mediaTypeByMediatypeid: MediaType
}

"""
A condition to be used against `Alert` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input AlertCondition {
  """Checks for equality with the object’s `alertid` field."""
  alertid: BigInt

  """Checks for equality with the object’s `actionid` field."""
  actionid: BigInt

  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `mediatypeid` field."""
  mediatypeid: BigInt

  """Checks for equality with the object’s `sendto` field."""
  sendto: String

  """Checks for equality with the object’s `subject` field."""
  subject: String

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `retries` field."""
  retries: Int

  """Checks for equality with the object’s `error` field."""
  error: String

  """Checks for equality with the object’s `escStep` field."""
  escStep: Int

  """Checks for equality with the object’s `alerttype` field."""
  alerttype: Int
}

"""An input for mutations affecting `Alert`"""
input AlertInput {
  alertid: BigInt!
  actionid: BigInt!
  eventid: BigInt!
  userid: BigInt
  clock: Int
  mediatypeid: BigInt
  sendto: String
  subject: String
  message: String
  status: Int
  retries: Int
  error: String
  escStep: Int
  alerttype: Int
}

"""
Represents an update to a `Alert`. Fields that are set will be updated.
"""
input AlertPatch {
  alertid: BigInt
  actionid: BigInt
  eventid: BigInt
  userid: BigInt
  clock: Int
  mediatypeid: BigInt
  sendto: String
  subject: String
  message: String
  status: Int
  retries: Int
  error: String
  escStep: Int
  alerttype: Int
}

"""A connection to a list of `Alert` values."""
type AlertsConnection {
  """A list of `Alert` objects."""
  nodes: [Alert]!

  """
  A list of edges which contains the `Alert` and cursor to aid in pagination.
  """
  edges: [AlertsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Alert` you could get from the connection."""
  totalCount: Int
}

"""A `Alert` edge in the connection."""
type AlertsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Alert` at the end of the edge."""
  node: Alert
}

"""Methods to use when ordering `Alert`."""
enum AlertsOrderBy {
  NATURAL
  ALERTID_ASC
  ALERTID_DESC
  ACTIONID_ASC
  ACTIONID_DESC
  EVENTID_ASC
  EVENTID_DESC
  USERID_ASC
  USERID_DESC
  CLOCK_ASC
  CLOCK_DESC
  MEDIATYPEID_ASC
  MEDIATYPEID_DESC
  SENDTO_ASC
  SENDTO_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  STATUS_ASC
  STATUS_DESC
  RETRIES_ASC
  RETRIES_DESC
  ERROR_ASC
  ERROR_DESC
  ESC_STEP_ASC
  ESC_STEP_DESC
  ALERTTYPE_ASC
  ALERTTYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Application implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  applicationid: BigInt!
  hostid: BigInt!
  name: String!
  flags: Int!

  """Reads a single `Host` that is related to this `Application`."""
  hostByHostid: Host

  """Reads and enables pagination through a set of `Httptest`."""
  httptestsByApplicationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httptest`."""
    orderBy: [HttptestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttptestCondition
  ): HttptestsConnection!

  """Reads and enables pagination through a set of `ItemsApplication`."""
  itemsApplicationsByApplicationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemsApplication`."""
    orderBy: [ItemsApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemsApplicationCondition
  ): ItemsApplicationsConnection!

  """Reads and enables pagination through a set of `ApplicationTemplate`."""
  applicationTemplatesByApplicationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationTemplate`."""
    orderBy: [ApplicationTemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationTemplateCondition
  ): ApplicationTemplatesConnection!

  """Reads and enables pagination through a set of `ApplicationTemplate`."""
  applicationTemplatesByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationTemplate`."""
    orderBy: [ApplicationTemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationTemplateCondition
  ): ApplicationTemplatesConnection!

  """Reads and enables pagination through a set of `ApplicationDiscovery`."""
  applicationDiscoveriesByApplicationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationDiscovery`."""
    orderBy: [ApplicationDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationDiscoveryCondition
  ): ApplicationDiscoveriesConnection!
}

"""
A condition to be used against `Application` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ApplicationCondition {
  """Checks for equality with the object’s `applicationid` field."""
  applicationid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `flags` field."""
  flags: Int
}

"""A connection to a list of `ApplicationDiscovery` values."""
type ApplicationDiscoveriesConnection {
  """A list of `ApplicationDiscovery` objects."""
  nodes: [ApplicationDiscovery]!

  """
  A list of edges which contains the `ApplicationDiscovery` and cursor to aid in pagination.
  """
  edges: [ApplicationDiscoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationDiscovery` you could get from the connection.
  """
  totalCount: Int
}

"""A `ApplicationDiscovery` edge in the connection."""
type ApplicationDiscoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationDiscovery` at the end of the edge."""
  node: ApplicationDiscovery
}

"""Methods to use when ordering `ApplicationDiscovery`."""
enum ApplicationDiscoveriesOrderBy {
  NATURAL
  APPLICATION_DISCOVERYID_ASC
  APPLICATION_DISCOVERYID_DESC
  APPLICATIONID_ASC
  APPLICATIONID_DESC
  APPLICATION_PROTOTYPEID_ASC
  APPLICATION_PROTOTYPEID_DESC
  NAME_ASC
  NAME_DESC
  LASTCHECK_ASC
  LASTCHECK_DESC
  TS_DELETE_ASC
  TS_DELETE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ApplicationDiscovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  applicationDiscoveryid: BigInt!
  applicationid: BigInt!
  applicationPrototypeid: BigInt!
  name: String!
  lastcheck: Int!
  tsDelete: Int!

  """
  Reads a single `Application` that is related to this `ApplicationDiscovery`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationDiscovery`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype
}

"""
A condition to be used against `ApplicationDiscovery` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationDiscoveryCondition {
  """Checks for equality with the object’s `applicationDiscoveryid` field."""
  applicationDiscoveryid: BigInt

  """Checks for equality with the object’s `applicationid` field."""
  applicationid: BigInt

  """Checks for equality with the object’s `applicationPrototypeid` field."""
  applicationPrototypeid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `lastcheck` field."""
  lastcheck: Int

  """Checks for equality with the object’s `tsDelete` field."""
  tsDelete: Int
}

"""An input for mutations affecting `ApplicationDiscovery`"""
input ApplicationDiscoveryInput {
  applicationDiscoveryid: BigInt!
  applicationid: BigInt!
  applicationPrototypeid: BigInt!
  name: String
  lastcheck: Int
  tsDelete: Int
}

"""
Represents an update to a `ApplicationDiscovery`. Fields that are set will be updated.
"""
input ApplicationDiscoveryPatch {
  applicationDiscoveryid: BigInt
  applicationid: BigInt
  applicationPrototypeid: BigInt
  name: String
  lastcheck: Int
  tsDelete: Int
}

"""An input for mutations affecting `Application`"""
input ApplicationInput {
  applicationid: BigInt!
  hostid: BigInt!
  name: String
  flags: Int
}

"""
Represents an update to a `Application`. Fields that are set will be updated.
"""
input ApplicationPatch {
  applicationid: BigInt
  hostid: BigInt
  name: String
  flags: Int
}

type ApplicationPrototype implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  applicationPrototypeid: BigInt!
  itemid: BigInt!
  templateid: BigInt
  name: String!

  """Reads a single `Item` that is related to this `ApplicationPrototype`."""
  itemByItemid: Item

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationPrototype`.
  """
  applicationPrototypeByTemplateid: ApplicationPrototype

  """Reads and enables pagination through a set of `ApplicationPrototype`."""
  applicationPrototypesByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPrototype`."""
    orderBy: [ApplicationPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPrototypeCondition
  ): ApplicationPrototypesConnection!

  """
  Reads and enables pagination through a set of `ItemApplicationPrototype`.
  """
  itemApplicationPrototypesByApplicationPrototypeid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemApplicationPrototype`."""
    orderBy: [ItemApplicationPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemApplicationPrototypeCondition
  ): ItemApplicationPrototypesConnection!

  """Reads and enables pagination through a set of `ApplicationDiscovery`."""
  applicationDiscoveriesByApplicationPrototypeid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationDiscovery`."""
    orderBy: [ApplicationDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationDiscoveryCondition
  ): ApplicationDiscoveriesConnection!
}

"""
A condition to be used against `ApplicationPrototype` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationPrototypeCondition {
  """Checks for equality with the object’s `applicationPrototypeid` field."""
  applicationPrototypeid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `ApplicationPrototype`"""
input ApplicationPrototypeInput {
  applicationPrototypeid: BigInt!
  itemid: BigInt!
  templateid: BigInt
  name: String
}

"""
Represents an update to a `ApplicationPrototype`. Fields that are set will be updated.
"""
input ApplicationPrototypePatch {
  applicationPrototypeid: BigInt
  itemid: BigInt
  templateid: BigInt
  name: String
}

"""A connection to a list of `ApplicationPrototype` values."""
type ApplicationPrototypesConnection {
  """A list of `ApplicationPrototype` objects."""
  nodes: [ApplicationPrototype]!

  """
  A list of edges which contains the `ApplicationPrototype` and cursor to aid in pagination.
  """
  edges: [ApplicationPrototypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationPrototype` you could get from the connection.
  """
  totalCount: Int
}

"""A `ApplicationPrototype` edge in the connection."""
type ApplicationPrototypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationPrototype` at the end of the edge."""
  node: ApplicationPrototype
}

"""Methods to use when ordering `ApplicationPrototype`."""
enum ApplicationPrototypesOrderBy {
  NATURAL
  APPLICATION_PROTOTYPEID_ASC
  APPLICATION_PROTOTYPEID_DESC
  ITEMID_ASC
  ITEMID_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Application` values."""
type ApplicationsConnection {
  """A list of `Application` objects."""
  nodes: [Application]!

  """
  A list of edges which contains the `Application` and cursor to aid in pagination.
  """
  edges: [ApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Application` you could get from the connection."""
  totalCount: Int
}

"""A `Application` edge in the connection."""
type ApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Application` at the end of the edge."""
  node: Application
}

"""Methods to use when ordering `Application`."""
enum ApplicationsOrderBy {
  NATURAL
  APPLICATIONID_ASC
  APPLICATIONID_DESC
  HOSTID_ASC
  HOSTID_DESC
  NAME_ASC
  NAME_DESC
  FLAGS_ASC
  FLAGS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ApplicationTemplate implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  applicationTemplateid: BigInt!
  applicationid: BigInt!
  templateid: BigInt!

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByTemplateid: Application
}

"""
A condition to be used against `ApplicationTemplate` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input ApplicationTemplateCondition {
  """Checks for equality with the object’s `applicationTemplateid` field."""
  applicationTemplateid: BigInt

  """Checks for equality with the object’s `applicationid` field."""
  applicationid: BigInt

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt
}

"""An input for mutations affecting `ApplicationTemplate`"""
input ApplicationTemplateInput {
  applicationTemplateid: BigInt!
  applicationid: BigInt!
  templateid: BigInt!
}

"""
Represents an update to a `ApplicationTemplate`. Fields that are set will be updated.
"""
input ApplicationTemplatePatch {
  applicationTemplateid: BigInt
  applicationid: BigInt
  templateid: BigInt
}

"""A connection to a list of `ApplicationTemplate` values."""
type ApplicationTemplatesConnection {
  """A list of `ApplicationTemplate` objects."""
  nodes: [ApplicationTemplate]!

  """
  A list of edges which contains the `ApplicationTemplate` and cursor to aid in pagination.
  """
  edges: [ApplicationTemplatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ApplicationTemplate` you could get from the connection.
  """
  totalCount: Int
}

"""A `ApplicationTemplate` edge in the connection."""
type ApplicationTemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ApplicationTemplate` at the end of the edge."""
  node: ApplicationTemplate
}

"""Methods to use when ordering `ApplicationTemplate`."""
enum ApplicationTemplatesOrderBy {
  NATURAL
  APPLICATION_TEMPLATEID_ASC
  APPLICATION_TEMPLATEID_DESC
  APPLICATIONID_ASC
  APPLICATIONID_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Auditlog implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  auditid: BigInt!
  userid: BigInt!
  clock: Int!
  action: Int!
  resourcetype: Int!
  details: String!
  ip: String!
  resourceid: BigInt!
  resourcename: String!

  """Reads a single `User` that is related to this `Auditlog`."""
  userByUserid: User

  """Reads and enables pagination through a set of `AuditlogDetail`."""
  auditlogDetailsByAuditid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AuditlogDetail`."""
    orderBy: [AuditlogDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuditlogDetailCondition
  ): AuditlogDetailsConnection!
}

"""
A condition to be used against `Auditlog` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AuditlogCondition {
  """Checks for equality with the object’s `auditid` field."""
  auditid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `action` field."""
  action: Int

  """Checks for equality with the object’s `resourcetype` field."""
  resourcetype: Int

  """Checks for equality with the object’s `details` field."""
  details: String

  """Checks for equality with the object’s `ip` field."""
  ip: String

  """Checks for equality with the object’s `resourceid` field."""
  resourceid: BigInt

  """Checks for equality with the object’s `resourcename` field."""
  resourcename: String
}

type AuditlogDetail implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  auditdetailid: BigInt!
  auditid: BigInt!
  tableName: String!
  fieldName: String!
  oldvalue: String!
  newvalue: String!

  """Reads a single `Auditlog` that is related to this `AuditlogDetail`."""
  auditlogByAuditid: Auditlog
}

"""
A condition to be used against `AuditlogDetail` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input AuditlogDetailCondition {
  """Checks for equality with the object’s `auditdetailid` field."""
  auditdetailid: BigInt

  """Checks for equality with the object’s `auditid` field."""
  auditid: BigInt

  """Checks for equality with the object’s `tableName` field."""
  tableName: String

  """Checks for equality with the object’s `fieldName` field."""
  fieldName: String

  """Checks for equality with the object’s `oldvalue` field."""
  oldvalue: String

  """Checks for equality with the object’s `newvalue` field."""
  newvalue: String
}

"""An input for mutations affecting `AuditlogDetail`"""
input AuditlogDetailInput {
  auditdetailid: BigInt!
  auditid: BigInt!
  tableName: String
  fieldName: String
  oldvalue: String
  newvalue: String
}

"""
Represents an update to a `AuditlogDetail`. Fields that are set will be updated.
"""
input AuditlogDetailPatch {
  auditdetailid: BigInt
  auditid: BigInt
  tableName: String
  fieldName: String
  oldvalue: String
  newvalue: String
}

"""A connection to a list of `AuditlogDetail` values."""
type AuditlogDetailsConnection {
  """A list of `AuditlogDetail` objects."""
  nodes: [AuditlogDetail]!

  """
  A list of edges which contains the `AuditlogDetail` and cursor to aid in pagination.
  """
  edges: [AuditlogDetailsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `AuditlogDetail` you could get from the connection.
  """
  totalCount: Int
}

"""A `AuditlogDetail` edge in the connection."""
type AuditlogDetailsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AuditlogDetail` at the end of the edge."""
  node: AuditlogDetail
}

"""Methods to use when ordering `AuditlogDetail`."""
enum AuditlogDetailsOrderBy {
  NATURAL
  AUDITDETAILID_ASC
  AUDITDETAILID_DESC
  AUDITID_ASC
  AUDITID_DESC
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  FIELD_NAME_ASC
  FIELD_NAME_DESC
  OLDVALUE_ASC
  OLDVALUE_DESC
  NEWVALUE_ASC
  NEWVALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Auditlog`"""
input AuditlogInput {
  auditid: BigInt!
  userid: BigInt!
  clock: Int
  action: Int
  resourcetype: Int
  details: String
  ip: String
  resourceid: BigInt
  resourcename: String
}

"""
Represents an update to a `Auditlog`. Fields that are set will be updated.
"""
input AuditlogPatch {
  auditid: BigInt
  userid: BigInt
  clock: Int
  action: Int
  resourcetype: Int
  details: String
  ip: String
  resourceid: BigInt
  resourcename: String
}

"""A connection to a list of `Auditlog` values."""
type AuditlogsConnection {
  """A list of `Auditlog` objects."""
  nodes: [Auditlog]!

  """
  A list of edges which contains the `Auditlog` and cursor to aid in pagination.
  """
  edges: [AuditlogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Auditlog` you could get from the connection."""
  totalCount: Int
}

"""A `Auditlog` edge in the connection."""
type AuditlogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Auditlog` at the end of the edge."""
  node: Auditlog
}

"""Methods to use when ordering `Auditlog`."""
enum AuditlogsOrderBy {
  NATURAL
  AUDITID_ASC
  AUDITID_DESC
  USERID_ASC
  USERID_DESC
  CLOCK_ASC
  CLOCK_DESC
  ACTION_ASC
  ACTION_DESC
  RESOURCETYPE_ASC
  RESOURCETYPE_DESC
  DETAILS_ASC
  DETAILS_DESC
  IP_ASC
  IP_DESC
  RESOURCEID_ASC
  RESOURCEID_DESC
  RESOURCENAME_ASC
  RESOURCENAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type AutoregHost implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  autoregHostid: BigInt!
  proxyHostid: BigInt
  host: String!
  listenIp: String!
  listenPort: Int!
  listenDns: String!
  hostMetadata: String!

  """Reads a single `Host` that is related to this `AutoregHost`."""
  hostByProxyHostid: Host
}

"""
A condition to be used against `AutoregHost` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input AutoregHostCondition {
  """Checks for equality with the object’s `autoregHostid` field."""
  autoregHostid: BigInt

  """Checks for equality with the object’s `proxyHostid` field."""
  proxyHostid: BigInt

  """Checks for equality with the object’s `host` field."""
  host: String

  """Checks for equality with the object’s `listenIp` field."""
  listenIp: String

  """Checks for equality with the object’s `listenPort` field."""
  listenPort: Int

  """Checks for equality with the object’s `listenDns` field."""
  listenDns: String

  """Checks for equality with the object’s `hostMetadata` field."""
  hostMetadata: String
}

"""An input for mutations affecting `AutoregHost`"""
input AutoregHostInput {
  autoregHostid: BigInt!
  proxyHostid: BigInt
  host: String
  listenIp: String
  listenPort: Int
  listenDns: String
  hostMetadata: String
}

"""
Represents an update to a `AutoregHost`. Fields that are set will be updated.
"""
input AutoregHostPatch {
  autoregHostid: BigInt
  proxyHostid: BigInt
  host: String
  listenIp: String
  listenPort: Int
  listenDns: String
  hostMetadata: String
}

"""A connection to a list of `AutoregHost` values."""
type AutoregHostsConnection {
  """A list of `AutoregHost` objects."""
  nodes: [AutoregHost]!

  """
  A list of edges which contains the `AutoregHost` and cursor to aid in pagination.
  """
  edges: [AutoregHostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `AutoregHost` you could get from the connection."""
  totalCount: Int
}

"""A `AutoregHost` edge in the connection."""
type AutoregHostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `AutoregHost` at the end of the edge."""
  node: AutoregHost
}

"""Methods to use when ordering `AutoregHost`."""
enum AutoregHostsOrderBy {
  NATURAL
  AUTOREG_HOSTID_ASC
  AUTOREG_HOSTID_DESC
  PROXY_HOSTID_ASC
  PROXY_HOSTID_DESC
  HOST_ASC
  HOST_DESC
  LISTEN_IP_ASC
  LISTEN_IP_DESC
  LISTEN_PORT_ASC
  LISTEN_PORT_DESC
  LISTEN_DNS_ASC
  LISTEN_DNS_DESC
  HOST_METADATA_ASC
  HOST_METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A floating point number that requires more precision than IEEE 754 binary 64
"""
scalar BigFloat

"""
A signed eight-byte integer. The upper big integer values are greater then the
max value for a JavaScript number. Therefore all big integers will be output as
strings and not numbers.
"""
scalar BigInt

type Condition implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  conditionid: BigInt!
  actionid: BigInt!
  conditiontype: Int!
  operator: Int!
  value: String!
  value2: String!

  """Reads a single `Action` that is related to this `Condition`."""
  actionByActionid: Action
}

"""
A condition to be used against `Condition` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ConditionCondition {
  """Checks for equality with the object’s `conditionid` field."""
  conditionid: BigInt

  """Checks for equality with the object’s `actionid` field."""
  actionid: BigInt

  """Checks for equality with the object’s `conditiontype` field."""
  conditiontype: Int

  """Checks for equality with the object’s `operator` field."""
  operator: Int

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `value2` field."""
  value2: String
}

"""An input for mutations affecting `Condition`"""
input ConditionInput {
  conditionid: BigInt!
  actionid: BigInt!
  conditiontype: Int
  operator: Int
  value: String
  value2: String
}

"""
Represents an update to a `Condition`. Fields that are set will be updated.
"""
input ConditionPatch {
  conditionid: BigInt
  actionid: BigInt
  conditiontype: Int
  operator: Int
  value: String
  value2: String
}

"""A connection to a list of `Condition` values."""
type ConditionsConnection {
  """A list of `Condition` objects."""
  nodes: [Condition]!

  """
  A list of edges which contains the `Condition` and cursor to aid in pagination.
  """
  edges: [ConditionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Condition` you could get from the connection."""
  totalCount: Int
}

"""A `Condition` edge in the connection."""
type ConditionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Condition` at the end of the edge."""
  node: Condition
}

"""Methods to use when ordering `Condition`."""
enum ConditionsOrderBy {
  NATURAL
  CONDITIONID_ASC
  CONDITIONID_DESC
  ACTIONID_ASC
  ACTIONID_DESC
  CONDITIONTYPE_ASC
  CONDITIONTYPE_DESC
  OPERATOR_ASC
  OPERATOR_DESC
  VALUE_ASC
  VALUE_DESC
  VALUE2_ASC
  VALUE2_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Config implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  configid: BigInt!
  refreshUnsupported: Int!
  workPeriod: String!
  alertUsrgrpid: BigInt
  eventAckEnable: Int!
  eventExpire: Int!
  eventShowMax: Int!
  defaultTheme: String!
  authenticationType: Int!
  ldapHost: String!
  ldapPort: Int!
  ldapBaseDn: String!
  ldapBindDn: String!
  ldapBindPassword: String!
  ldapSearchAttribute: String!
  dropdownFirstEntry: Int!
  dropdownFirstRemember: Int!
  discoveryGroupid: BigInt!
  maxInTable: Int!
  searchLimit: Int!
  severityColor0: String!
  severityColor1: String!
  severityColor2: String!
  severityColor3: String!
  severityColor4: String!
  severityColor5: String!
  severityName0: String!
  severityName1: String!
  severityName2: String!
  severityName3: String!
  severityName4: String!
  severityName5: String!
  okPeriod: Int!
  blinkPeriod: Int!
  problemUnackColor: String!
  problemAckColor: String!
  okUnackColor: String!
  okAckColor: String!
  problemUnackStyle: Int!
  problemAckStyle: Int!
  okUnackStyle: Int!
  okAckStyle: Int!
  snmptrapLogging: Int!
  serverCheckInterval: Int!
  hkEventsMode: Int!
  hkEventsTrigger: Int!
  hkEventsInternal: Int!
  hkEventsDiscovery: Int!
  hkEventsAutoreg: Int!
  hkServicesMode: Int!
  hkServices: Int!
  hkAuditMode: Int!
  hkAudit: Int!
  hkSessionsMode: Int!
  hkSessions: Int!
  hkHistoryMode: Int!
  hkHistoryGlobal: Int!
  hkHistory: Int!
  hkTrendsMode: Int!
  hkTrendsGlobal: Int!
  hkTrends: Int!
  defaultInventoryMode: Int!

  """Reads a single `Usrgrp` that is related to this `Config`."""
  usrgrpByAlertUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Config`."""
  groupByDiscoveryGroupid: Group
}

"""
A condition to be used against `Config` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ConfigCondition {
  """Checks for equality with the object’s `configid` field."""
  configid: BigInt

  """Checks for equality with the object’s `refreshUnsupported` field."""
  refreshUnsupported: Int

  """Checks for equality with the object’s `workPeriod` field."""
  workPeriod: String

  """Checks for equality with the object’s `alertUsrgrpid` field."""
  alertUsrgrpid: BigInt

  """Checks for equality with the object’s `eventAckEnable` field."""
  eventAckEnable: Int

  """Checks for equality with the object’s `eventExpire` field."""
  eventExpire: Int

  """Checks for equality with the object’s `eventShowMax` field."""
  eventShowMax: Int

  """Checks for equality with the object’s `defaultTheme` field."""
  defaultTheme: String

  """Checks for equality with the object’s `authenticationType` field."""
  authenticationType: Int

  """Checks for equality with the object’s `ldapHost` field."""
  ldapHost: String

  """Checks for equality with the object’s `ldapPort` field."""
  ldapPort: Int

  """Checks for equality with the object’s `ldapBaseDn` field."""
  ldapBaseDn: String

  """Checks for equality with the object’s `ldapBindDn` field."""
  ldapBindDn: String

  """Checks for equality with the object’s `ldapBindPassword` field."""
  ldapBindPassword: String

  """Checks for equality with the object’s `ldapSearchAttribute` field."""
  ldapSearchAttribute: String

  """Checks for equality with the object’s `dropdownFirstEntry` field."""
  dropdownFirstEntry: Int

  """Checks for equality with the object’s `dropdownFirstRemember` field."""
  dropdownFirstRemember: Int

  """Checks for equality with the object’s `discoveryGroupid` field."""
  discoveryGroupid: BigInt

  """Checks for equality with the object’s `maxInTable` field."""
  maxInTable: Int

  """Checks for equality with the object’s `searchLimit` field."""
  searchLimit: Int

  """Checks for equality with the object’s `severityColor0` field."""
  severityColor0: String

  """Checks for equality with the object’s `severityColor1` field."""
  severityColor1: String

  """Checks for equality with the object’s `severityColor2` field."""
  severityColor2: String

  """Checks for equality with the object’s `severityColor3` field."""
  severityColor3: String

  """Checks for equality with the object’s `severityColor4` field."""
  severityColor4: String

  """Checks for equality with the object’s `severityColor5` field."""
  severityColor5: String

  """Checks for equality with the object’s `severityName0` field."""
  severityName0: String

  """Checks for equality with the object’s `severityName1` field."""
  severityName1: String

  """Checks for equality with the object’s `severityName2` field."""
  severityName2: String

  """Checks for equality with the object’s `severityName3` field."""
  severityName3: String

  """Checks for equality with the object’s `severityName4` field."""
  severityName4: String

  """Checks for equality with the object’s `severityName5` field."""
  severityName5: String

  """Checks for equality with the object’s `okPeriod` field."""
  okPeriod: Int

  """Checks for equality with the object’s `blinkPeriod` field."""
  blinkPeriod: Int

  """Checks for equality with the object’s `problemUnackColor` field."""
  problemUnackColor: String

  """Checks for equality with the object’s `problemAckColor` field."""
  problemAckColor: String

  """Checks for equality with the object’s `okUnackColor` field."""
  okUnackColor: String

  """Checks for equality with the object’s `okAckColor` field."""
  okAckColor: String

  """Checks for equality with the object’s `problemUnackStyle` field."""
  problemUnackStyle: Int

  """Checks for equality with the object’s `problemAckStyle` field."""
  problemAckStyle: Int

  """Checks for equality with the object’s `okUnackStyle` field."""
  okUnackStyle: Int

  """Checks for equality with the object’s `okAckStyle` field."""
  okAckStyle: Int

  """Checks for equality with the object’s `snmptrapLogging` field."""
  snmptrapLogging: Int

  """Checks for equality with the object’s `serverCheckInterval` field."""
  serverCheckInterval: Int

  """Checks for equality with the object’s `hkEventsMode` field."""
  hkEventsMode: Int

  """Checks for equality with the object’s `hkEventsTrigger` field."""
  hkEventsTrigger: Int

  """Checks for equality with the object’s `hkEventsInternal` field."""
  hkEventsInternal: Int

  """Checks for equality with the object’s `hkEventsDiscovery` field."""
  hkEventsDiscovery: Int

  """Checks for equality with the object’s `hkEventsAutoreg` field."""
  hkEventsAutoreg: Int

  """Checks for equality with the object’s `hkServicesMode` field."""
  hkServicesMode: Int

  """Checks for equality with the object’s `hkServices` field."""
  hkServices: Int

  """Checks for equality with the object’s `hkAuditMode` field."""
  hkAuditMode: Int

  """Checks for equality with the object’s `hkAudit` field."""
  hkAudit: Int

  """Checks for equality with the object’s `hkSessionsMode` field."""
  hkSessionsMode: Int

  """Checks for equality with the object’s `hkSessions` field."""
  hkSessions: Int

  """Checks for equality with the object’s `hkHistoryMode` field."""
  hkHistoryMode: Int

  """Checks for equality with the object’s `hkHistoryGlobal` field."""
  hkHistoryGlobal: Int

  """Checks for equality with the object’s `hkHistory` field."""
  hkHistory: Int

  """Checks for equality with the object’s `hkTrendsMode` field."""
  hkTrendsMode: Int

  """Checks for equality with the object’s `hkTrendsGlobal` field."""
  hkTrendsGlobal: Int

  """Checks for equality with the object’s `hkTrends` field."""
  hkTrends: Int

  """Checks for equality with the object’s `defaultInventoryMode` field."""
  defaultInventoryMode: Int
}

"""An input for mutations affecting `Config`"""
input ConfigInput {
  configid: BigInt!
  refreshUnsupported: Int
  workPeriod: String
  alertUsrgrpid: BigInt
  eventAckEnable: Int
  eventExpire: Int
  eventShowMax: Int
  defaultTheme: String
  authenticationType: Int
  ldapHost: String
  ldapPort: Int
  ldapBaseDn: String
  ldapBindDn: String
  ldapBindPassword: String
  ldapSearchAttribute: String
  dropdownFirstEntry: Int
  dropdownFirstRemember: Int
  discoveryGroupid: BigInt!
  maxInTable: Int
  searchLimit: Int
  severityColor0: String
  severityColor1: String
  severityColor2: String
  severityColor3: String
  severityColor4: String
  severityColor5: String
  severityName0: String
  severityName1: String
  severityName2: String
  severityName3: String
  severityName4: String
  severityName5: String
  okPeriod: Int
  blinkPeriod: Int
  problemUnackColor: String
  problemAckColor: String
  okUnackColor: String
  okAckColor: String
  problemUnackStyle: Int
  problemAckStyle: Int
  okUnackStyle: Int
  okAckStyle: Int
  snmptrapLogging: Int
  serverCheckInterval: Int
  hkEventsMode: Int
  hkEventsTrigger: Int
  hkEventsInternal: Int
  hkEventsDiscovery: Int
  hkEventsAutoreg: Int
  hkServicesMode: Int
  hkServices: Int
  hkAuditMode: Int
  hkAudit: Int
  hkSessionsMode: Int
  hkSessions: Int
  hkHistoryMode: Int
  hkHistoryGlobal: Int
  hkHistory: Int
  hkTrendsMode: Int
  hkTrendsGlobal: Int
  hkTrends: Int
  defaultInventoryMode: Int
}

"""
Represents an update to a `Config`. Fields that are set will be updated.
"""
input ConfigPatch {
  configid: BigInt
  refreshUnsupported: Int
  workPeriod: String
  alertUsrgrpid: BigInt
  eventAckEnable: Int
  eventExpire: Int
  eventShowMax: Int
  defaultTheme: String
  authenticationType: Int
  ldapHost: String
  ldapPort: Int
  ldapBaseDn: String
  ldapBindDn: String
  ldapBindPassword: String
  ldapSearchAttribute: String
  dropdownFirstEntry: Int
  dropdownFirstRemember: Int
  discoveryGroupid: BigInt
  maxInTable: Int
  searchLimit: Int
  severityColor0: String
  severityColor1: String
  severityColor2: String
  severityColor3: String
  severityColor4: String
  severityColor5: String
  severityName0: String
  severityName1: String
  severityName2: String
  severityName3: String
  severityName4: String
  severityName5: String
  okPeriod: Int
  blinkPeriod: Int
  problemUnackColor: String
  problemAckColor: String
  okUnackColor: String
  okAckColor: String
  problemUnackStyle: Int
  problemAckStyle: Int
  okUnackStyle: Int
  okAckStyle: Int
  snmptrapLogging: Int
  serverCheckInterval: Int
  hkEventsMode: Int
  hkEventsTrigger: Int
  hkEventsInternal: Int
  hkEventsDiscovery: Int
  hkEventsAutoreg: Int
  hkServicesMode: Int
  hkServices: Int
  hkAuditMode: Int
  hkAudit: Int
  hkSessionsMode: Int
  hkSessions: Int
  hkHistoryMode: Int
  hkHistoryGlobal: Int
  hkHistory: Int
  hkTrendsMode: Int
  hkTrendsGlobal: Int
  hkTrends: Int
  defaultInventoryMode: Int
}

"""A connection to a list of `Config` values."""
type ConfigsConnection {
  """A list of `Config` objects."""
  nodes: [Config]!

  """
  A list of edges which contains the `Config` and cursor to aid in pagination.
  """
  edges: [ConfigsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Config` you could get from the connection."""
  totalCount: Int
}

"""A `Config` edge in the connection."""
type ConfigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Config` at the end of the edge."""
  node: Config
}

"""Methods to use when ordering `Config`."""
enum ConfigsOrderBy {
  NATURAL
  CONFIGID_ASC
  CONFIGID_DESC
  REFRESH_UNSUPPORTED_ASC
  REFRESH_UNSUPPORTED_DESC
  WORK_PERIOD_ASC
  WORK_PERIOD_DESC
  ALERT_USRGRPID_ASC
  ALERT_USRGRPID_DESC
  EVENT_ACK_ENABLE_ASC
  EVENT_ACK_ENABLE_DESC
  EVENT_EXPIRE_ASC
  EVENT_EXPIRE_DESC
  EVENT_SHOW_MAX_ASC
  EVENT_SHOW_MAX_DESC
  DEFAULT_THEME_ASC
  DEFAULT_THEME_DESC
  AUTHENTICATION_TYPE_ASC
  AUTHENTICATION_TYPE_DESC
  LDAP_HOST_ASC
  LDAP_HOST_DESC
  LDAP_PORT_ASC
  LDAP_PORT_DESC
  LDAP_BASE_DN_ASC
  LDAP_BASE_DN_DESC
  LDAP_BIND_DN_ASC
  LDAP_BIND_DN_DESC
  LDAP_BIND_PASSWORD_ASC
  LDAP_BIND_PASSWORD_DESC
  LDAP_SEARCH_ATTRIBUTE_ASC
  LDAP_SEARCH_ATTRIBUTE_DESC
  DROPDOWN_FIRST_ENTRY_ASC
  DROPDOWN_FIRST_ENTRY_DESC
  DROPDOWN_FIRST_REMEMBER_ASC
  DROPDOWN_FIRST_REMEMBER_DESC
  DISCOVERY_GROUPID_ASC
  DISCOVERY_GROUPID_DESC
  MAX_IN_TABLE_ASC
  MAX_IN_TABLE_DESC
  SEARCH_LIMIT_ASC
  SEARCH_LIMIT_DESC
  SEVERITY_COLOR_0_ASC
  SEVERITY_COLOR_0_DESC
  SEVERITY_COLOR_1_ASC
  SEVERITY_COLOR_1_DESC
  SEVERITY_COLOR_2_ASC
  SEVERITY_COLOR_2_DESC
  SEVERITY_COLOR_3_ASC
  SEVERITY_COLOR_3_DESC
  SEVERITY_COLOR_4_ASC
  SEVERITY_COLOR_4_DESC
  SEVERITY_COLOR_5_ASC
  SEVERITY_COLOR_5_DESC
  SEVERITY_NAME_0_ASC
  SEVERITY_NAME_0_DESC
  SEVERITY_NAME_1_ASC
  SEVERITY_NAME_1_DESC
  SEVERITY_NAME_2_ASC
  SEVERITY_NAME_2_DESC
  SEVERITY_NAME_3_ASC
  SEVERITY_NAME_3_DESC
  SEVERITY_NAME_4_ASC
  SEVERITY_NAME_4_DESC
  SEVERITY_NAME_5_ASC
  SEVERITY_NAME_5_DESC
  OK_PERIOD_ASC
  OK_PERIOD_DESC
  BLINK_PERIOD_ASC
  BLINK_PERIOD_DESC
  PROBLEM_UNACK_COLOR_ASC
  PROBLEM_UNACK_COLOR_DESC
  PROBLEM_ACK_COLOR_ASC
  PROBLEM_ACK_COLOR_DESC
  OK_UNACK_COLOR_ASC
  OK_UNACK_COLOR_DESC
  OK_ACK_COLOR_ASC
  OK_ACK_COLOR_DESC
  PROBLEM_UNACK_STYLE_ASC
  PROBLEM_UNACK_STYLE_DESC
  PROBLEM_ACK_STYLE_ASC
  PROBLEM_ACK_STYLE_DESC
  OK_UNACK_STYLE_ASC
  OK_UNACK_STYLE_DESC
  OK_ACK_STYLE_ASC
  OK_ACK_STYLE_DESC
  SNMPTRAP_LOGGING_ASC
  SNMPTRAP_LOGGING_DESC
  SERVER_CHECK_INTERVAL_ASC
  SERVER_CHECK_INTERVAL_DESC
  HK_EVENTS_MODE_ASC
  HK_EVENTS_MODE_DESC
  HK_EVENTS_TRIGGER_ASC
  HK_EVENTS_TRIGGER_DESC
  HK_EVENTS_INTERNAL_ASC
  HK_EVENTS_INTERNAL_DESC
  HK_EVENTS_DISCOVERY_ASC
  HK_EVENTS_DISCOVERY_DESC
  HK_EVENTS_AUTOREG_ASC
  HK_EVENTS_AUTOREG_DESC
  HK_SERVICES_MODE_ASC
  HK_SERVICES_MODE_DESC
  HK_SERVICES_ASC
  HK_SERVICES_DESC
  HK_AUDIT_MODE_ASC
  HK_AUDIT_MODE_DESC
  HK_AUDIT_ASC
  HK_AUDIT_DESC
  HK_SESSIONS_MODE_ASC
  HK_SESSIONS_MODE_DESC
  HK_SESSIONS_ASC
  HK_SESSIONS_DESC
  HK_HISTORY_MODE_ASC
  HK_HISTORY_MODE_DESC
  HK_HISTORY_GLOBAL_ASC
  HK_HISTORY_GLOBAL_DESC
  HK_HISTORY_ASC
  HK_HISTORY_DESC
  HK_TRENDS_MODE_ASC
  HK_TRENDS_MODE_DESC
  HK_TRENDS_GLOBAL_ASC
  HK_TRENDS_GLOBAL_DESC
  HK_TRENDS_ASC
  HK_TRENDS_DESC
  DEFAULT_INVENTORY_MODE_ASC
  DEFAULT_INVENTORY_MODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CorrCondition implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  corrConditionid: BigInt!
  correlationid: BigInt!
  type: Int!

  """Reads a single `Correlation` that is related to this `CorrCondition`."""
  correlationByCorrelationid: Correlation

  """
  Reads a single `CorrConditionTag` that is related to this `CorrCondition`.
  """
  corrConditionTagByCorrConditionid: CorrConditionTag

  """Reads and enables pagination through a set of `CorrConditionTag`."""
  corrConditionTagsByCorrConditionid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionTag`."""
    orderBy: [CorrConditionTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionTagCondition
  ): CorrConditionTagsConnection! @deprecated(reason: "Please use corrConditionTagByCorrConditionid instead")

  """
  Reads a single `CorrConditionGroup` that is related to this `CorrCondition`.
  """
  corrConditionGroupByCorrConditionid: CorrConditionGroup

  """Reads and enables pagination through a set of `CorrConditionGroup`."""
  corrConditionGroupsByCorrConditionid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionGroup`."""
    orderBy: [CorrConditionGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionGroupCondition
  ): CorrConditionGroupsConnection! @deprecated(reason: "Please use corrConditionGroupByCorrConditionid instead")

  """
  Reads a single `CorrConditionTagpair` that is related to this `CorrCondition`.
  """
  corrConditionTagpairByCorrConditionid: CorrConditionTagpair

  """Reads and enables pagination through a set of `CorrConditionTagpair`."""
  corrConditionTagpairsByCorrConditionid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionTagpair`."""
    orderBy: [CorrConditionTagpairsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionTagpairCondition
  ): CorrConditionTagpairsConnection! @deprecated(reason: "Please use corrConditionTagpairByCorrConditionid instead")

  """
  Reads a single `CorrConditionTagvalue` that is related to this `CorrCondition`.
  """
  corrConditionTagvalueByCorrConditionid: CorrConditionTagvalue

  """
  Reads and enables pagination through a set of `CorrConditionTagvalue`.
  """
  corrConditionTagvaluesByCorrConditionid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionTagvalue`."""
    orderBy: [CorrConditionTagvaluesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionTagvalueCondition
  ): CorrConditionTagvaluesConnection! @deprecated(reason: "Please use corrConditionTagvalueByCorrConditionid instead")
}

"""
A condition to be used against `CorrCondition` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CorrConditionCondition {
  """Checks for equality with the object’s `corrConditionid` field."""
  corrConditionid: BigInt

  """Checks for equality with the object’s `correlationid` field."""
  correlationid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int
}

type CorrConditionGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  corrConditionid: BigInt!
  operator: Int!
  groupid: BigInt!

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionGroup`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """Reads a single `Group` that is related to this `CorrConditionGroup`."""
  groupByGroupid: Group
}

"""
A condition to be used against `CorrConditionGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CorrConditionGroupCondition {
  """Checks for equality with the object’s `corrConditionid` field."""
  corrConditionid: BigInt

  """Checks for equality with the object’s `operator` field."""
  operator: Int

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt
}

"""An input for mutations affecting `CorrConditionGroup`"""
input CorrConditionGroupInput {
  corrConditionid: BigInt!
  operator: Int
  groupid: BigInt!
}

"""
Represents an update to a `CorrConditionGroup`. Fields that are set will be updated.
"""
input CorrConditionGroupPatch {
  corrConditionid: BigInt
  operator: Int
  groupid: BigInt
}

"""A connection to a list of `CorrConditionGroup` values."""
type CorrConditionGroupsConnection {
  """A list of `CorrConditionGroup` objects."""
  nodes: [CorrConditionGroup]!

  """
  A list of edges which contains the `CorrConditionGroup` and cursor to aid in pagination.
  """
  edges: [CorrConditionGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CorrConditionGroup` you could get from the connection.
  """
  totalCount: Int
}

"""A `CorrConditionGroup` edge in the connection."""
type CorrConditionGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CorrConditionGroup` at the end of the edge."""
  node: CorrConditionGroup
}

"""Methods to use when ordering `CorrConditionGroup`."""
enum CorrConditionGroupsOrderBy {
  NATURAL
  CORR_CONDITIONID_ASC
  CORR_CONDITIONID_DESC
  OPERATOR_ASC
  OPERATOR_DESC
  GROUPID_ASC
  GROUPID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `CorrCondition`"""
input CorrConditionInput {
  corrConditionid: BigInt!
  correlationid: BigInt!
  type: Int
}

"""
Represents an update to a `CorrCondition`. Fields that are set will be updated.
"""
input CorrConditionPatch {
  corrConditionid: BigInt
  correlationid: BigInt
  type: Int
}

"""A connection to a list of `CorrCondition` values."""
type CorrConditionsConnection {
  """A list of `CorrCondition` objects."""
  nodes: [CorrCondition]!

  """
  A list of edges which contains the `CorrCondition` and cursor to aid in pagination.
  """
  edges: [CorrConditionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CorrCondition` you could get from the connection."""
  totalCount: Int
}

"""A `CorrCondition` edge in the connection."""
type CorrConditionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CorrCondition` at the end of the edge."""
  node: CorrCondition
}

"""Methods to use when ordering `CorrCondition`."""
enum CorrConditionsOrderBy {
  NATURAL
  CORR_CONDITIONID_ASC
  CORR_CONDITIONID_DESC
  CORRELATIONID_ASC
  CORRELATIONID_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CorrConditionTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  corrConditionid: BigInt!
  tag: String!

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTag`.
  """
  corrConditionByCorrConditionid: CorrCondition
}

"""
A condition to be used against `CorrConditionTag` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CorrConditionTagCondition {
  """Checks for equality with the object’s `corrConditionid` field."""
  corrConditionid: BigInt

  """Checks for equality with the object’s `tag` field."""
  tag: String
}

"""An input for mutations affecting `CorrConditionTag`"""
input CorrConditionTagInput {
  corrConditionid: BigInt!
  tag: String
}

type CorrConditionTagpair implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  corrConditionid: BigInt!
  oldtag: String!
  newtag: String!

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagpair`.
  """
  corrConditionByCorrConditionid: CorrCondition
}

"""
A condition to be used against `CorrConditionTagpair` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CorrConditionTagpairCondition {
  """Checks for equality with the object’s `corrConditionid` field."""
  corrConditionid: BigInt

  """Checks for equality with the object’s `oldtag` field."""
  oldtag: String

  """Checks for equality with the object’s `newtag` field."""
  newtag: String
}

"""An input for mutations affecting `CorrConditionTagpair`"""
input CorrConditionTagpairInput {
  corrConditionid: BigInt!
  oldtag: String
  newtag: String
}

"""
Represents an update to a `CorrConditionTagpair`. Fields that are set will be updated.
"""
input CorrConditionTagpairPatch {
  corrConditionid: BigInt
  oldtag: String
  newtag: String
}

"""A connection to a list of `CorrConditionTagpair` values."""
type CorrConditionTagpairsConnection {
  """A list of `CorrConditionTagpair` objects."""
  nodes: [CorrConditionTagpair]!

  """
  A list of edges which contains the `CorrConditionTagpair` and cursor to aid in pagination.
  """
  edges: [CorrConditionTagpairsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CorrConditionTagpair` you could get from the connection.
  """
  totalCount: Int
}

"""A `CorrConditionTagpair` edge in the connection."""
type CorrConditionTagpairsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CorrConditionTagpair` at the end of the edge."""
  node: CorrConditionTagpair
}

"""Methods to use when ordering `CorrConditionTagpair`."""
enum CorrConditionTagpairsOrderBy {
  NATURAL
  CORR_CONDITIONID_ASC
  CORR_CONDITIONID_DESC
  OLDTAG_ASC
  OLDTAG_DESC
  NEWTAG_ASC
  NEWTAG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `CorrConditionTag`. Fields that are set will be updated.
"""
input CorrConditionTagPatch {
  corrConditionid: BigInt
  tag: String
}

"""A connection to a list of `CorrConditionTag` values."""
type CorrConditionTagsConnection {
  """A list of `CorrConditionTag` objects."""
  nodes: [CorrConditionTag]!

  """
  A list of edges which contains the `CorrConditionTag` and cursor to aid in pagination.
  """
  edges: [CorrConditionTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CorrConditionTag` you could get from the connection.
  """
  totalCount: Int
}

"""A `CorrConditionTag` edge in the connection."""
type CorrConditionTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CorrConditionTag` at the end of the edge."""
  node: CorrConditionTag
}

"""Methods to use when ordering `CorrConditionTag`."""
enum CorrConditionTagsOrderBy {
  NATURAL
  CORR_CONDITIONID_ASC
  CORR_CONDITIONID_DESC
  TAG_ASC
  TAG_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CorrConditionTagvalue implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  corrConditionid: BigInt!
  tag: String!
  operator: Int!
  value: String!

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagvalue`.
  """
  corrConditionByCorrConditionid: CorrCondition
}

"""
A condition to be used against `CorrConditionTagvalue` object types. All fields
are tested for equality and combined with a logical ‘and.’
"""
input CorrConditionTagvalueCondition {
  """Checks for equality with the object’s `corrConditionid` field."""
  corrConditionid: BigInt

  """Checks for equality with the object’s `tag` field."""
  tag: String

  """Checks for equality with the object’s `operator` field."""
  operator: Int

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `CorrConditionTagvalue`"""
input CorrConditionTagvalueInput {
  corrConditionid: BigInt!
  tag: String
  operator: Int
  value: String
}

"""
Represents an update to a `CorrConditionTagvalue`. Fields that are set will be updated.
"""
input CorrConditionTagvaluePatch {
  corrConditionid: BigInt
  tag: String
  operator: Int
  value: String
}

"""A connection to a list of `CorrConditionTagvalue` values."""
type CorrConditionTagvaluesConnection {
  """A list of `CorrConditionTagvalue` objects."""
  nodes: [CorrConditionTagvalue]!

  """
  A list of edges which contains the `CorrConditionTagvalue` and cursor to aid in pagination.
  """
  edges: [CorrConditionTagvaluesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `CorrConditionTagvalue` you could get from the connection.
  """
  totalCount: Int
}

"""A `CorrConditionTagvalue` edge in the connection."""
type CorrConditionTagvaluesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CorrConditionTagvalue` at the end of the edge."""
  node: CorrConditionTagvalue
}

"""Methods to use when ordering `CorrConditionTagvalue`."""
enum CorrConditionTagvaluesOrderBy {
  NATURAL
  CORR_CONDITIONID_ASC
  CORR_CONDITIONID_DESC
  TAG_ASC
  TAG_DESC
  OPERATOR_ASC
  OPERATOR_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Correlation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  correlationid: BigInt!
  name: String!
  description: String!
  evaltype: Int!
  status: Int!
  formula: String!

  """Reads and enables pagination through a set of `CorrCondition`."""
  corrConditionsByCorrelationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrCondition`."""
    orderBy: [CorrConditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionCondition
  ): CorrConditionsConnection!

  """Reads and enables pagination through a set of `CorrOperation`."""
  corrOperationsByCorrelationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrOperation`."""
    orderBy: [CorrOperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrOperationCondition
  ): CorrOperationsConnection!
}

"""
A condition to be used against `Correlation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input CorrelationCondition {
  """Checks for equality with the object’s `correlationid` field."""
  correlationid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `evaltype` field."""
  evaltype: Int

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `formula` field."""
  formula: String
}

"""An input for mutations affecting `Correlation`"""
input CorrelationInput {
  correlationid: BigInt!
  name: String
  description: String
  evaltype: Int
  status: Int
  formula: String
}

"""
Represents an update to a `Correlation`. Fields that are set will be updated.
"""
input CorrelationPatch {
  correlationid: BigInt
  name: String
  description: String
  evaltype: Int
  status: Int
  formula: String
}

"""A connection to a list of `Correlation` values."""
type CorrelationsConnection {
  """A list of `Correlation` objects."""
  nodes: [Correlation]!

  """
  A list of edges which contains the `Correlation` and cursor to aid in pagination.
  """
  edges: [CorrelationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Correlation` you could get from the connection."""
  totalCount: Int
}

"""A `Correlation` edge in the connection."""
type CorrelationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Correlation` at the end of the edge."""
  node: Correlation
}

"""Methods to use when ordering `Correlation`."""
enum CorrelationsOrderBy {
  NATURAL
  CORRELATIONID_ASC
  CORRELATIONID_DESC
  NAME_ASC
  NAME_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  EVALTYPE_ASC
  EVALTYPE_DESC
  STATUS_ASC
  STATUS_DESC
  FORMULA_ASC
  FORMULA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type CorrOperation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  corrOperationid: BigInt!
  correlationid: BigInt!
  type: Int!

  """Reads a single `Correlation` that is related to this `CorrOperation`."""
  correlationByCorrelationid: Correlation
}

"""
A condition to be used against `CorrOperation` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input CorrOperationCondition {
  """Checks for equality with the object’s `corrOperationid` field."""
  corrOperationid: BigInt

  """Checks for equality with the object’s `correlationid` field."""
  correlationid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int
}

"""An input for mutations affecting `CorrOperation`"""
input CorrOperationInput {
  corrOperationid: BigInt!
  correlationid: BigInt!
  type: Int
}

"""
Represents an update to a `CorrOperation`. Fields that are set will be updated.
"""
input CorrOperationPatch {
  corrOperationid: BigInt
  correlationid: BigInt
  type: Int
}

"""A connection to a list of `CorrOperation` values."""
type CorrOperationsConnection {
  """A list of `CorrOperation` objects."""
  nodes: [CorrOperation]!

  """
  A list of edges which contains the `CorrOperation` and cursor to aid in pagination.
  """
  edges: [CorrOperationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `CorrOperation` you could get from the connection."""
  totalCount: Int
}

"""A `CorrOperation` edge in the connection."""
type CorrOperationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `CorrOperation` at the end of the edge."""
  node: CorrOperation
}

"""Methods to use when ordering `CorrOperation`."""
enum CorrOperationsOrderBy {
  NATURAL
  CORR_OPERATIONID_ASC
  CORR_OPERATIONID_DESC
  CORRELATIONID_ASC
  CORRELATIONID_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Acknowledge` mutation."""
input CreateAcknowledgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Acknowledge` to be created by this mutation."""
  acknowledge: AcknowledgeInput!
}

"""The output of our create `Acknowledge` mutation."""
type CreateAcknowledgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Acknowledge` that was created by this mutation."""
  acknowledge: Acknowledge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Acknowledge`."""
  userByUserid: User

  """Reads a single `Event` that is related to this `Acknowledge`."""
  eventByEventid: Event

  """An edge for our `Acknowledge`. May be used by Relay 1."""
  acknowledgeEdge(
    """The method to use when ordering `Acknowledge`."""
    orderBy: [AcknowledgesOrderBy!] = PRIMARY_KEY_ASC
  ): AcknowledgesEdge
}

"""All input for the create `Action` mutation."""
input CreateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Action` to be created by this mutation."""
  action: ActionInput!
}

"""The output of our create `Action` mutation."""
type CreateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was created by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = PRIMARY_KEY_ASC
  ): ActionsEdge
}

"""All input for the create `Alert` mutation."""
input CreateAlertInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Alert` to be created by this mutation."""
  alert: AlertInput!
}

"""The output of our create `Alert` mutation."""
type CreateAlertPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Alert` that was created by this mutation."""
  alert: Alert

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Alert`."""
  actionByActionid: Action

  """Reads a single `Event` that is related to this `Alert`."""
  eventByEventid: Event

  """Reads a single `User` that is related to this `Alert`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Alert`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Alert`. May be used by Relay 1."""
  alertEdge(
    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = PRIMARY_KEY_ASC
  ): AlertsEdge
}

"""All input for the create `ApplicationDiscovery` mutation."""
input CreateApplicationDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationDiscovery` to be created by this mutation."""
  applicationDiscovery: ApplicationDiscoveryInput!
}

"""The output of our create `ApplicationDiscovery` mutation."""
type CreateApplicationDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationDiscovery` that was created by this mutation."""
  applicationDiscovery: ApplicationDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationDiscovery`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationDiscovery`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype

  """An edge for our `ApplicationDiscovery`. May be used by Relay 1."""
  applicationDiscoveryEdge(
    """The method to use when ordering `ApplicationDiscovery`."""
    orderBy: [ApplicationDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationDiscoveriesEdge
}

"""All input for the create `Application` mutation."""
input CreateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Application` to be created by this mutation."""
  application: ApplicationInput!
}

"""The output of our create `Application` mutation."""
type CreateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was created by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Application`."""
  hostByHostid: Host

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationsEdge
}

"""All input for the create `ApplicationPrototype` mutation."""
input CreateApplicationPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationPrototype` to be created by this mutation."""
  applicationPrototype: ApplicationPrototypeInput!
}

"""The output of our create `ApplicationPrototype` mutation."""
type CreateApplicationPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationPrototype` that was created by this mutation."""
  applicationPrototype: ApplicationPrototype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ApplicationPrototype`."""
  itemByItemid: Item

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationPrototype`.
  """
  applicationPrototypeByTemplateid: ApplicationPrototype

  """An edge for our `ApplicationPrototype`. May be used by Relay 1."""
  applicationPrototypeEdge(
    """The method to use when ordering `ApplicationPrototype`."""
    orderBy: [ApplicationPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationPrototypesEdge
}

"""All input for the create `ApplicationTemplate` mutation."""
input CreateApplicationTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ApplicationTemplate` to be created by this mutation."""
  applicationTemplate: ApplicationTemplateInput!
}

"""The output of our create `ApplicationTemplate` mutation."""
type CreateApplicationTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationTemplate` that was created by this mutation."""
  applicationTemplate: ApplicationTemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByTemplateid: Application

  """An edge for our `ApplicationTemplate`. May be used by Relay 1."""
  applicationTemplateEdge(
    """The method to use when ordering `ApplicationTemplate`."""
    orderBy: [ApplicationTemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationTemplatesEdge
}

"""All input for the create `AuditlogDetail` mutation."""
input CreateAuditlogDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AuditlogDetail` to be created by this mutation."""
  auditlogDetail: AuditlogDetailInput!
}

"""The output of our create `AuditlogDetail` mutation."""
type CreateAuditlogDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AuditlogDetail` that was created by this mutation."""
  auditlogDetail: AuditlogDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Auditlog` that is related to this `AuditlogDetail`."""
  auditlogByAuditid: Auditlog

  """An edge for our `AuditlogDetail`. May be used by Relay 1."""
  auditlogDetailEdge(
    """The method to use when ordering `AuditlogDetail`."""
    orderBy: [AuditlogDetailsOrderBy!] = PRIMARY_KEY_ASC
  ): AuditlogDetailsEdge
}

"""All input for the create `Auditlog` mutation."""
input CreateAuditlogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Auditlog` to be created by this mutation."""
  auditlog: AuditlogInput!
}

"""The output of our create `Auditlog` mutation."""
type CreateAuditlogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Auditlog` that was created by this mutation."""
  auditlog: Auditlog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Auditlog`."""
  userByUserid: User

  """An edge for our `Auditlog`. May be used by Relay 1."""
  auditlogEdge(
    """The method to use when ordering `Auditlog`."""
    orderBy: [AuditlogsOrderBy!] = PRIMARY_KEY_ASC
  ): AuditlogsEdge
}

"""All input for the create `AutoregHost` mutation."""
input CreateAutoregHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `AutoregHost` to be created by this mutation."""
  autoregHost: AutoregHostInput!
}

"""The output of our create `AutoregHost` mutation."""
type CreateAutoregHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AutoregHost` that was created by this mutation."""
  autoregHost: AutoregHost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `AutoregHost`."""
  hostByProxyHostid: Host

  """An edge for our `AutoregHost`. May be used by Relay 1."""
  autoregHostEdge(
    """The method to use when ordering `AutoregHost`."""
    orderBy: [AutoregHostsOrderBy!] = PRIMARY_KEY_ASC
  ): AutoregHostsEdge
}

"""All input for the create `Condition` mutation."""
input CreateConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Condition` to be created by this mutation."""
  condition: ConditionInput!
}

"""The output of our create `Condition` mutation."""
type CreateConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Condition` that was created by this mutation."""
  condition: Condition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Condition`."""
  actionByActionid: Action

  """An edge for our `Condition`. May be used by Relay 1."""
  conditionEdge(
    """The method to use when ordering `Condition`."""
    orderBy: [ConditionsOrderBy!] = PRIMARY_KEY_ASC
  ): ConditionsEdge
}

"""All input for the create `Config` mutation."""
input CreateConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Config` to be created by this mutation."""
  config: ConfigInput!
}

"""The output of our create `Config` mutation."""
type CreateConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Config` that was created by this mutation."""
  config: Config

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Config`."""
  usrgrpByAlertUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Config`."""
  groupByDiscoveryGroupid: Group

  """An edge for our `Config`. May be used by Relay 1."""
  configEdge(
    """The method to use when ordering `Config`."""
    orderBy: [ConfigsOrderBy!] = PRIMARY_KEY_ASC
  ): ConfigsEdge
}

"""All input for the create `CorrConditionGroup` mutation."""
input CreateCorrConditionGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CorrConditionGroup` to be created by this mutation."""
  corrConditionGroup: CorrConditionGroupInput!
}

"""The output of our create `CorrConditionGroup` mutation."""
type CreateCorrConditionGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionGroup` that was created by this mutation."""
  corrConditionGroup: CorrConditionGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionGroup`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """Reads a single `Group` that is related to this `CorrConditionGroup`."""
  groupByGroupid: Group

  """An edge for our `CorrConditionGroup`. May be used by Relay 1."""
  corrConditionGroupEdge(
    """The method to use when ordering `CorrConditionGroup`."""
    orderBy: [CorrConditionGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionGroupsEdge
}

"""All input for the create `CorrCondition` mutation."""
input CreateCorrConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CorrCondition` to be created by this mutation."""
  corrCondition: CorrConditionInput!
}

"""The output of our create `CorrCondition` mutation."""
type CreateCorrConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrCondition` that was created by this mutation."""
  corrCondition: CorrCondition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Correlation` that is related to this `CorrCondition`."""
  correlationByCorrelationid: Correlation

  """An edge for our `CorrCondition`. May be used by Relay 1."""
  corrConditionEdge(
    """The method to use when ordering `CorrCondition`."""
    orderBy: [CorrConditionsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionsEdge
}

"""All input for the create `CorrConditionTag` mutation."""
input CreateCorrConditionTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CorrConditionTag` to be created by this mutation."""
  corrConditionTag: CorrConditionTagInput!
}

"""All input for the create `CorrConditionTagpair` mutation."""
input CreateCorrConditionTagpairInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CorrConditionTagpair` to be created by this mutation."""
  corrConditionTagpair: CorrConditionTagpairInput!
}

"""The output of our create `CorrConditionTagpair` mutation."""
type CreateCorrConditionTagpairPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTagpair` that was created by this mutation."""
  corrConditionTagpair: CorrConditionTagpair

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagpair`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTagpair`. May be used by Relay 1."""
  corrConditionTagpairEdge(
    """The method to use when ordering `CorrConditionTagpair`."""
    orderBy: [CorrConditionTagpairsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagpairsEdge
}

"""The output of our create `CorrConditionTag` mutation."""
type CreateCorrConditionTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTag` that was created by this mutation."""
  corrConditionTag: CorrConditionTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTag`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTag`. May be used by Relay 1."""
  corrConditionTagEdge(
    """The method to use when ordering `CorrConditionTag`."""
    orderBy: [CorrConditionTagsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagsEdge
}

"""All input for the create `CorrConditionTagvalue` mutation."""
input CreateCorrConditionTagvalueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CorrConditionTagvalue` to be created by this mutation."""
  corrConditionTagvalue: CorrConditionTagvalueInput!
}

"""The output of our create `CorrConditionTagvalue` mutation."""
type CreateCorrConditionTagvaluePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTagvalue` that was created by this mutation."""
  corrConditionTagvalue: CorrConditionTagvalue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagvalue`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTagvalue`. May be used by Relay 1."""
  corrConditionTagvalueEdge(
    """The method to use when ordering `CorrConditionTagvalue`."""
    orderBy: [CorrConditionTagvaluesOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagvaluesEdge
}

"""All input for the create `Correlation` mutation."""
input CreateCorrelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Correlation` to be created by this mutation."""
  correlation: CorrelationInput!
}

"""The output of our create `Correlation` mutation."""
type CreateCorrelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Correlation` that was created by this mutation."""
  correlation: Correlation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Correlation`. May be used by Relay 1."""
  correlationEdge(
    """The method to use when ordering `Correlation`."""
    orderBy: [CorrelationsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrelationsEdge
}

"""All input for the create `CorrOperation` mutation."""
input CreateCorrOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `CorrOperation` to be created by this mutation."""
  corrOperation: CorrOperationInput!
}

"""The output of our create `CorrOperation` mutation."""
type CreateCorrOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrOperation` that was created by this mutation."""
  corrOperation: CorrOperation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Correlation` that is related to this `CorrOperation`."""
  correlationByCorrelationid: Correlation

  """An edge for our `CorrOperation`. May be used by Relay 1."""
  corrOperationEdge(
    """The method to use when ordering `CorrOperation`."""
    orderBy: [CorrOperationsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrOperationsEdge
}

"""All input for the create `Dbversion` mutation."""
input CreateDbversionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dbversion` to be created by this mutation."""
  dbversion: DbversionInput!
}

"""The output of our create `Dbversion` mutation."""
type CreateDbversionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dbversion` that was created by this mutation."""
  dbversion: Dbversion

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Dbversion`. May be used by Relay 1."""
  dbversionEdge(
    """The method to use when ordering `Dbversion`."""
    orderBy: [DbversionsOrderBy!] = NATURAL
  ): DbversionsEdge
}

"""All input for the create `Dcheck` mutation."""
input CreateDcheckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dcheck` to be created by this mutation."""
  dcheck: DcheckInput!
}

"""The output of our create `Dcheck` mutation."""
type CreateDcheckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dcheck` that was created by this mutation."""
  dcheck: Dcheck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Drule` that is related to this `Dcheck`."""
  druleByDruleid: Drule

  """An edge for our `Dcheck`. May be used by Relay 1."""
  dcheckEdge(
    """The method to use when ordering `Dcheck`."""
    orderBy: [DchecksOrderBy!] = PRIMARY_KEY_ASC
  ): DchecksEdge
}

"""All input for the create `Dhost` mutation."""
input CreateDhostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dhost` to be created by this mutation."""
  dhost: DhostInput!
}

"""The output of our create `Dhost` mutation."""
type CreateDhostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dhost` that was created by this mutation."""
  dhost: Dhost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Drule` that is related to this `Dhost`."""
  druleByDruleid: Drule

  """An edge for our `Dhost`. May be used by Relay 1."""
  dhostEdge(
    """The method to use when ordering `Dhost`."""
    orderBy: [DhostsOrderBy!] = PRIMARY_KEY_ASC
  ): DhostsEdge
}

"""All input for the create `Drule` mutation."""
input CreateDruleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Drule` to be created by this mutation."""
  drule: DruleInput!
}

"""The output of our create `Drule` mutation."""
type CreateDrulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Drule` that was created by this mutation."""
  drule: Drule

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Drule`."""
  hostByProxyHostid: Host

  """An edge for our `Drule`. May be used by Relay 1."""
  druleEdge(
    """The method to use when ordering `Drule`."""
    orderBy: [DrulesOrderBy!] = PRIMARY_KEY_ASC
  ): DrulesEdge
}

"""All input for the create `Dservice` mutation."""
input CreateDserviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Dservice` to be created by this mutation."""
  dservice: DserviceInput!
}

"""The output of our create `Dservice` mutation."""
type CreateDservicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dservice` that was created by this mutation."""
  dservice: Dservice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Dhost` that is related to this `Dservice`."""
  dhostByDhostid: Dhost

  """Reads a single `Dcheck` that is related to this `Dservice`."""
  dcheckByDcheckid: Dcheck

  """An edge for our `Dservice`. May be used by Relay 1."""
  dserviceEdge(
    """The method to use when ordering `Dservice`."""
    orderBy: [DservicesOrderBy!] = PRIMARY_KEY_ASC
  ): DservicesEdge
}

"""All input for the create `Escalation` mutation."""
input CreateEscalationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Escalation` to be created by this mutation."""
  escalation: EscalationInput!
}

"""The output of our create `Escalation` mutation."""
type CreateEscalationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Escalation` that was created by this mutation."""
  escalation: Escalation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Escalation`. May be used by Relay 1."""
  escalationEdge(
    """The method to use when ordering `Escalation`."""
    orderBy: [EscalationsOrderBy!] = PRIMARY_KEY_ASC
  ): EscalationsEdge
}

"""All input for the create `Event` mutation."""
input CreateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Event` to be created by this mutation."""
  event: EventInput!
}

"""The output of our create `Event` mutation."""
type CreateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was created by this mutation."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = PRIMARY_KEY_ASC
  ): EventsEdge
}

"""All input for the create `EventRecovery` mutation."""
input CreateEventRecoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventRecovery` to be created by this mutation."""
  eventRecovery: EventRecoveryInput!
}

"""The output of our create `EventRecovery` mutation."""
type CreateEventRecoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventRecovery` that was created by this mutation."""
  eventRecovery: EventRecovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByREventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByCEventid: Event

  """An edge for our `EventRecovery`. May be used by Relay 1."""
  eventRecoveryEdge(
    """The method to use when ordering `EventRecovery`."""
    orderBy: [EventRecoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): EventRecoveriesEdge
}

"""All input for the create `EventTag` mutation."""
input CreateEventTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `EventTag` to be created by this mutation."""
  eventTag: EventTagInput!
}

"""The output of our create `EventTag` mutation."""
type CreateEventTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventTag` that was created by this mutation."""
  eventTag: EventTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventTag`."""
  eventByEventid: Event

  """An edge for our `EventTag`. May be used by Relay 1."""
  eventTagEdge(
    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = PRIMARY_KEY_ASC
  ): EventTagsEdge
}

"""All input for the create `Expression` mutation."""
input CreateExpressionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Expression` to be created by this mutation."""
  expression: ExpressionInput!
}

"""The output of our create `Expression` mutation."""
type CreateExpressionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Expression` that was created by this mutation."""
  expression: Expression

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Regexp` that is related to this `Expression`."""
  regexpByRegexpid: Regexp

  """An edge for our `Expression`. May be used by Relay 1."""
  expressionEdge(
    """The method to use when ordering `Expression`."""
    orderBy: [ExpressionsOrderBy!] = PRIMARY_KEY_ASC
  ): ExpressionsEdge
}

"""All input for the create `Fact` mutation."""
input CreateFactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Fact` to be created by this mutation."""
  fact: FactInput!
}

"""The output of our create `Fact` mutation."""
type CreateFactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fact` that was created by this mutation."""
  fact: Fact

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Fact`. May be used by Relay 1."""
  factEdge(
    """The method to use when ordering `Fact`."""
    orderBy: [FactsOrderBy!] = PRIMARY_KEY_ASC
  ): FactsEdge
}

"""All input for the create `Function` mutation."""
input CreateFunctionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Function` to be created by this mutation."""
  function: FunctionInput!
}

"""The output of our create `Function` mutation."""
type CreateFunctionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Function` that was created by this mutation."""
  function: Function

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `Function`."""
  itemByItemid: Item

  """Reads a single `Trigger` that is related to this `Function`."""
  triggerByTriggerid: Trigger

  """An edge for our `Function`. May be used by Relay 1."""
  functionEdge(
    """The method to use when ordering `Function`."""
    orderBy: [FunctionsOrderBy!] = PRIMARY_KEY_ASC
  ): FunctionsEdge
}

"""All input for the create `Globalmacro` mutation."""
input CreateGlobalmacroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Globalmacro` to be created by this mutation."""
  globalmacro: GlobalmacroInput!
}

"""The output of our create `Globalmacro` mutation."""
type CreateGlobalmacroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Globalmacro` that was created by this mutation."""
  globalmacro: Globalmacro

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Globalmacro`. May be used by Relay 1."""
  globalmacroEdge(
    """The method to use when ordering `Globalmacro`."""
    orderBy: [GlobalmacrosOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalmacrosEdge
}

"""All input for the create `Globalvar` mutation."""
input CreateGlobalvarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Globalvar` to be created by this mutation."""
  globalvar: GlobalvarInput!
}

"""The output of our create `Globalvar` mutation."""
type CreateGlobalvarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Globalvar` that was created by this mutation."""
  globalvar: Globalvar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Globalvar`. May be used by Relay 1."""
  globalvarEdge(
    """The method to use when ordering `Globalvar`."""
    orderBy: [GlobalvarsOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalvarsEdge
}

"""All input for the create `GraphDiscovery` mutation."""
input CreateGraphDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GraphDiscovery` to be created by this mutation."""
  graphDiscovery: GraphDiscoveryInput!
}

"""The output of our create `GraphDiscovery` mutation."""
type CreateGraphDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphDiscovery` that was created by this mutation."""
  graphDiscovery: GraphDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByGraphid: Graph

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByParentGraphid: Graph

  """An edge for our `GraphDiscovery`. May be used by Relay 1."""
  graphDiscoveryEdge(
    """The method to use when ordering `GraphDiscovery`."""
    orderBy: [GraphDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): GraphDiscoveriesEdge
}

"""All input for the create `Graph` mutation."""
input CreateGraphInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Graph` to be created by this mutation."""
  graph: GraphInput!
}

"""The output of our create `Graph` mutation."""
type CreateGraphPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Graph` that was created by this mutation."""
  graph: Graph

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `Graph`."""
  graphByTemplateid: Graph

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYminItemid: Item

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYmaxItemid: Item

  """An edge for our `Graph`. May be used by Relay 1."""
  graphEdge(
    """The method to use when ordering `Graph`."""
    orderBy: [GraphsOrderBy!] = PRIMARY_KEY_ASC
  ): GraphsEdge
}

"""All input for the create `GraphsItem` mutation."""
input CreateGraphsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GraphsItem` to be created by this mutation."""
  graphsItem: GraphsItemInput!
}

"""The output of our create `GraphsItem` mutation."""
type CreateGraphsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphsItem` that was created by this mutation."""
  graphsItem: GraphsItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `GraphsItem`."""
  graphByGraphid: Graph

  """Reads a single `Item` that is related to this `GraphsItem`."""
  itemByItemid: Item

  """An edge for our `GraphsItem`. May be used by Relay 1."""
  graphsItemEdge(
    """The method to use when ordering `GraphsItem`."""
    orderBy: [GraphsItemsOrderBy!] = PRIMARY_KEY_ASC
  ): GraphsItemsEdge
}

"""All input for the create `GraphTheme` mutation."""
input CreateGraphThemeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GraphTheme` to be created by this mutation."""
  graphTheme: GraphThemeInput!
}

"""The output of our create `GraphTheme` mutation."""
type CreateGraphThemePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphTheme` that was created by this mutation."""
  graphTheme: GraphTheme

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GraphTheme`. May be used by Relay 1."""
  graphThemeEdge(
    """The method to use when ordering `GraphTheme`."""
    orderBy: [GraphThemesOrderBy!] = PRIMARY_KEY_ASC
  ): GraphThemesEdge
}

"""All input for the create `GroupDiscovery` mutation."""
input CreateGroupDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupDiscovery` to be created by this mutation."""
  groupDiscovery: GroupDiscoveryInput!
}

"""The output of our create `GroupDiscovery` mutation."""
type CreateGroupDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupDiscovery` that was created by this mutation."""
  groupDiscovery: GroupDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupDiscovery`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupDiscovery`.
  """
  groupPrototypeByParentGroupPrototypeid: GroupPrototype

  """An edge for our `GroupDiscovery`. May be used by Relay 1."""
  groupDiscoveryEdge(
    """The method to use when ordering `GroupDiscovery`."""
    orderBy: [GroupDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): GroupDiscoveriesEdge
}

"""All input for the create `Group` mutation."""
input CreateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Group` to be created by this mutation."""
  group: GroupInput!
}

"""The output of our create `Group` mutation."""
type CreateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was created by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = PRIMARY_KEY_ASC
  ): GroupsEdge
}

"""All input for the create `GroupPrototype` mutation."""
input CreateGroupPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `GroupPrototype` to be created by this mutation."""
  groupPrototype: GroupPrototypeInput!
}

"""The output of our create `GroupPrototype` mutation."""
type CreateGroupPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupPrototype` that was created by this mutation."""
  groupPrototype: GroupPrototype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `GroupPrototype`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `GroupPrototype`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupPrototype`.
  """
  groupPrototypeByTemplateid: GroupPrototype

  """An edge for our `GroupPrototype`. May be used by Relay 1."""
  groupPrototypeEdge(
    """The method to use when ordering `GroupPrototype`."""
    orderBy: [GroupPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): GroupPrototypesEdge
}

"""All input for the create `History` mutation."""
input CreateHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `History` to be created by this mutation."""
  history: HistoryInput!
}

"""All input for the create `HistoryLog` mutation."""
input CreateHistoryLogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HistoryLog` to be created by this mutation."""
  historyLog: HistoryLogInput!
}

"""The output of our create `HistoryLog` mutation."""
type CreateHistoryLogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HistoryLog` that was created by this mutation."""
  historyLog: HistoryLog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HistoryLog`. May be used by Relay 1."""
  historyLogEdge(
    """The method to use when ordering `HistoryLog`."""
    orderBy: [HistoryLogsOrderBy!] = NATURAL
  ): HistoryLogsEdge
}

"""The output of our create `History` mutation."""
type CreateHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `History` that was created by this mutation."""
  history: History

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `History`. May be used by Relay 1."""
  historyEdge(
    """The method to use when ordering `History`."""
    orderBy: [HistoriesOrderBy!] = NATURAL
  ): HistoriesEdge
}

"""All input for the create `HistoryStr` mutation."""
input CreateHistoryStrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HistoryStr` to be created by this mutation."""
  historyStr: HistoryStrInput!
}

"""The output of our create `HistoryStr` mutation."""
type CreateHistoryStrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HistoryStr` that was created by this mutation."""
  historyStr: HistoryStr

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HistoryStr`. May be used by Relay 1."""
  historyStrEdge(
    """The method to use when ordering `HistoryStr`."""
    orderBy: [HistoryStrsOrderBy!] = NATURAL
  ): HistoryStrsEdge
}

"""All input for the create `HistoryText` mutation."""
input CreateHistoryTextInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HistoryText` to be created by this mutation."""
  historyText: HistoryTextInput!
}

"""The output of our create `HistoryText` mutation."""
type CreateHistoryTextPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HistoryText` that was created by this mutation."""
  historyText: HistoryText

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HistoryText`. May be used by Relay 1."""
  historyTextEdge(
    """The method to use when ordering `HistoryText`."""
    orderBy: [HistoryTextsOrderBy!] = NATURAL
  ): HistoryTextsEdge
}

"""All input for the create `HistoryUint` mutation."""
input CreateHistoryUintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HistoryUint` to be created by this mutation."""
  historyUint: HistoryUintInput!
}

"""The output of our create `HistoryUint` mutation."""
type CreateHistoryUintPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HistoryUint` that was created by this mutation."""
  historyUint: HistoryUint

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `HistoryUint`. May be used by Relay 1."""
  historyUintEdge(
    """The method to use when ordering `HistoryUint`."""
    orderBy: [HistoryUintsOrderBy!] = NATURAL
  ): HistoryUintsEdge
}

"""All input for the create `HostDiscovery` mutation."""
input CreateHostDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HostDiscovery` to be created by this mutation."""
  hostDiscovery: HostDiscoveryInput!
}

"""The output of our create `HostDiscovery` mutation."""
type CreateHostDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostDiscovery` that was created by this mutation."""
  hostDiscovery: HostDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByParentHostid: Host

  """Reads a single `Item` that is related to this `HostDiscovery`."""
  itemByParentItemid: Item

  """An edge for our `HostDiscovery`. May be used by Relay 1."""
  hostDiscoveryEdge(
    """The method to use when ordering `HostDiscovery`."""
    orderBy: [HostDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): HostDiscoveriesEdge
}

"""All input for the create `Host` mutation."""
input CreateHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Host` to be created by this mutation."""
  host: HostInput!
}

"""All input for the create `HostInventory` mutation."""
input CreateHostInventoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HostInventory` to be created by this mutation."""
  hostInventory: HostInventoryInput!
}

"""The output of our create `HostInventory` mutation."""
type CreateHostInventoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostInventory` that was created by this mutation."""
  hostInventory: HostInventory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostInventory`."""
  hostByHostid: Host

  """An edge for our `HostInventory`. May be used by Relay 1."""
  hostInventoryEdge(
    """The method to use when ordering `HostInventory`."""
    orderBy: [HostInventoriesOrderBy!] = PRIMARY_KEY_ASC
  ): HostInventoriesEdge
}

"""All input for the create `Hostmacro` mutation."""
input CreateHostmacroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Hostmacro` to be created by this mutation."""
  hostmacro: HostmacroInput!
}

"""The output of our create `Hostmacro` mutation."""
type CreateHostmacroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hostmacro` that was created by this mutation."""
  hostmacro: Hostmacro

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Hostmacro`."""
  hostByHostid: Host

  """An edge for our `Hostmacro`. May be used by Relay 1."""
  hostmacroEdge(
    """The method to use when ordering `Hostmacro`."""
    orderBy: [HostmacrosOrderBy!] = PRIMARY_KEY_ASC
  ): HostmacrosEdge
}

"""The output of our create `Host` mutation."""
type CreateHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Host` that was created by this mutation."""
  host: Host

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Host`."""
  hostByProxyHostid: Host

  """Reads a single `Maintenance` that is related to this `Host`."""
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `Host`."""
  hostByTemplateid: Host

  """An edge for our `Host`. May be used by Relay 1."""
  hostEdge(
    """The method to use when ordering `Host`."""
    orderBy: [HostsOrderBy!] = PRIMARY_KEY_ASC
  ): HostsEdge
}

"""All input for the create `HostsGroup` mutation."""
input CreateHostsGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HostsGroup` to be created by this mutation."""
  hostsGroup: HostsGroupInput!
}

"""The output of our create `HostsGroup` mutation."""
type CreateHostsGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostsGroup` that was created by this mutation."""
  hostsGroup: HostsGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostsGroup`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `HostsGroup`."""
  groupByGroupid: Group

  """An edge for our `HostsGroup`. May be used by Relay 1."""
  hostsGroupEdge(
    """The method to use when ordering `HostsGroup`."""
    orderBy: [HostsGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): HostsGroupsEdge
}

"""All input for the create `HostsTemplate` mutation."""
input CreateHostsTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `HostsTemplate` to be created by this mutation."""
  hostsTemplate: HostsTemplateInput!
}

"""The output of our create `HostsTemplate` mutation."""
type CreateHostsTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostsTemplate` that was created by this mutation."""
  hostsTemplate: HostsTemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByTemplateid: Host

  """An edge for our `HostsTemplate`. May be used by Relay 1."""
  hostsTemplateEdge(
    """The method to use when ordering `HostsTemplate`."""
    orderBy: [HostsTemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): HostsTemplatesEdge
}

"""All input for the create `Housekeeper` mutation."""
input CreateHousekeeperInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Housekeeper` to be created by this mutation."""
  housekeeper: HousekeeperInput!
}

"""The output of our create `Housekeeper` mutation."""
type CreateHousekeeperPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Housekeeper` that was created by this mutation."""
  housekeeper: Housekeeper

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Housekeeper`. May be used by Relay 1."""
  housekeeperEdge(
    """The method to use when ordering `Housekeeper`."""
    orderBy: [HousekeepersOrderBy!] = PRIMARY_KEY_ASC
  ): HousekeepersEdge
}

"""All input for the create `Httpstep` mutation."""
input CreateHttpstepInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Httpstep` to be created by this mutation."""
  httpstep: HttpstepInput!
}

"""All input for the create `Httpstepitem` mutation."""
input CreateHttpstepitemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Httpstepitem` to be created by this mutation."""
  httpstepitem: HttpstepitemInput!
}

"""The output of our create `Httpstepitem` mutation."""
type CreateHttpstepitemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httpstepitem` that was created by this mutation."""
  httpstepitem: Httpstepitem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httpstep` that is related to this `Httpstepitem`."""
  httpstepByHttpstepid: Httpstep

  """Reads a single `Item` that is related to this `Httpstepitem`."""
  itemByItemid: Item

  """An edge for our `Httpstepitem`. May be used by Relay 1."""
  httpstepitemEdge(
    """The method to use when ordering `Httpstepitem`."""
    orderBy: [HttpstepitemsOrderBy!] = PRIMARY_KEY_ASC
  ): HttpstepitemsEdge
}

"""The output of our create `Httpstep` mutation."""
type CreateHttpstepPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httpstep` that was created by this mutation."""
  httpstep: Httpstep

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httptest` that is related to this `Httpstep`."""
  httptestByHttptestid: Httptest

  """An edge for our `Httpstep`. May be used by Relay 1."""
  httpstepEdge(
    """The method to use when ordering `Httpstep`."""
    orderBy: [HttpstepsOrderBy!] = PRIMARY_KEY_ASC
  ): HttpstepsEdge
}

"""All input for the create `Httptest` mutation."""
input CreateHttptestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Httptest` to be created by this mutation."""
  httptest: HttptestInput!
}

"""All input for the create `Httptestitem` mutation."""
input CreateHttptestitemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Httptestitem` to be created by this mutation."""
  httptestitem: HttptestitemInput!
}

"""The output of our create `Httptestitem` mutation."""
type CreateHttptestitemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httptestitem` that was created by this mutation."""
  httptestitem: Httptestitem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httptest` that is related to this `Httptestitem`."""
  httptestByHttptestid: Httptest

  """Reads a single `Item` that is related to this `Httptestitem`."""
  itemByItemid: Item

  """An edge for our `Httptestitem`. May be used by Relay 1."""
  httptestitemEdge(
    """The method to use when ordering `Httptestitem`."""
    orderBy: [HttptestitemsOrderBy!] = PRIMARY_KEY_ASC
  ): HttptestitemsEdge
}

"""The output of our create `Httptest` mutation."""
type CreateHttptestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httptest` that was created by this mutation."""
  httptest: Httptest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Httptest`."""
  applicationByApplicationid: Application

  """Reads a single `Host` that is related to this `Httptest`."""
  hostByHostid: Host

  """Reads a single `Httptest` that is related to this `Httptest`."""
  httptestByTemplateid: Httptest

  """An edge for our `Httptest`. May be used by Relay 1."""
  httptestEdge(
    """The method to use when ordering `Httptest`."""
    orderBy: [HttptestsOrderBy!] = PRIMARY_KEY_ASC
  ): HttptestsEdge
}

"""All input for the create `IconMap` mutation."""
input CreateIconMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `IconMap` to be created by this mutation."""
  iconMap: IconMapInput!
}

"""The output of our create `IconMap` mutation."""
type CreateIconMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IconMap` that was created by this mutation."""
  iconMap: IconMap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `IconMap`."""
  imageByDefaultIconid: Image

  """An edge for our `IconMap`. May be used by Relay 1."""
  iconMapEdge(
    """The method to use when ordering `IconMap`."""
    orderBy: [IconMapsOrderBy!] = PRIMARY_KEY_ASC
  ): IconMapsEdge
}

"""All input for the create `IconMapping` mutation."""
input CreateIconMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `IconMapping` to be created by this mutation."""
  iconMapping: IconMappingInput!
}

"""The output of our create `IconMapping` mutation."""
type CreateIconMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IconMapping` that was created by this mutation."""
  iconMapping: IconMapping

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `IconMap` that is related to this `IconMapping`."""
  iconMapByIconmapid: IconMap

  """Reads a single `Image` that is related to this `IconMapping`."""
  imageByIconid: Image

  """An edge for our `IconMapping`. May be used by Relay 1."""
  iconMappingEdge(
    """The method to use when ordering `IconMapping`."""
    orderBy: [IconMappingsOrderBy!] = PRIMARY_KEY_ASC
  ): IconMappingsEdge
}

"""All input for the create `Id` mutation."""
input CreateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Id` to be created by this mutation."""
  id: IdInput!
}

"""The output of our create `Id` mutation."""
type CreateIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Id` that was created by this mutation."""
  id: Id

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Id`. May be used by Relay 1."""
  idEdge(
    """The method to use when ordering `Id`."""
    orderBy: [IdsOrderBy!] = PRIMARY_KEY_ASC
  ): IdsEdge
}

"""All input for the create `Image` mutation."""
input CreateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Image` to be created by this mutation."""
  image: ImageInput!
}

"""The output of our create `Image` mutation."""
type CreateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was created by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = PRIMARY_KEY_ASC
  ): ImagesEdge
}

"""All input for the create `InterfaceDiscovery` mutation."""
input CreateInterfaceDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `InterfaceDiscovery` to be created by this mutation."""
  interfaceDiscovery: InterfaceDiscoveryInput!
}

"""The output of our create `InterfaceDiscovery` mutation."""
type CreateInterfaceDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InterfaceDiscovery` that was created by this mutation."""
  interfaceDiscovery: InterfaceDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByInterfaceid: Interface

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByParentInterfaceid: Interface

  """An edge for our `InterfaceDiscovery`. May be used by Relay 1."""
  interfaceDiscoveryEdge(
    """The method to use when ordering `InterfaceDiscovery`."""
    orderBy: [InterfaceDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): InterfaceDiscoveriesEdge
}

"""All input for the create `Interface` mutation."""
input CreateInterfaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Interface` to be created by this mutation."""
  interface: InterfaceInput!
}

"""The output of our create `Interface` mutation."""
type CreateInterfacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Interface` that was created by this mutation."""
  interface: Interface

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Interface`."""
  hostByHostid: Host

  """An edge for our `Interface`. May be used by Relay 1."""
  interfaceEdge(
    """The method to use when ordering `Interface`."""
    orderBy: [InterfacesOrderBy!] = PRIMARY_KEY_ASC
  ): InterfacesEdge
}

"""All input for the create `ItemApplicationPrototype` mutation."""
input CreateItemApplicationPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItemApplicationPrototype` to be created by this mutation."""
  itemApplicationPrototype: ItemApplicationPrototypeInput!
}

"""The output of our create `ItemApplicationPrototype` mutation."""
type CreateItemApplicationPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemApplicationPrototype` that was created by this mutation."""
  itemApplicationPrototype: ItemApplicationPrototype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationPrototype` that is related to this `ItemApplicationPrototype`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype

  """
  Reads a single `Item` that is related to this `ItemApplicationPrototype`.
  """
  itemByItemid: Item

  """An edge for our `ItemApplicationPrototype`. May be used by Relay 1."""
  itemApplicationPrototypeEdge(
    """The method to use when ordering `ItemApplicationPrototype`."""
    orderBy: [ItemApplicationPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): ItemApplicationPrototypesEdge
}

"""All input for the create `ItemConditionOrig` mutation."""
input CreateItemConditionOrigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItemConditionOrig` to be created by this mutation."""
  itemConditionOrig: ItemConditionOrigInput!
}

"""The output of our create `ItemConditionOrig` mutation."""
type CreateItemConditionOrigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemConditionOrig` that was created by this mutation."""
  itemConditionOrig: ItemConditionOrig

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ItemConditionOrig`."""
  itemByItemid: Item

  """An edge for our `ItemConditionOrig`. May be used by Relay 1."""
  itemConditionOrigEdge(
    """The method to use when ordering `ItemConditionOrig`."""
    orderBy: [ItemConditionOrigsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemConditionOrigsEdge
}

"""All input for the create `ItemDiscovery` mutation."""
input CreateItemDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItemDiscovery` to be created by this mutation."""
  itemDiscovery: ItemDiscoveryInput!
}

"""The output of our create `ItemDiscovery` mutation."""
type CreateItemDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemDiscovery` that was created by this mutation."""
  itemDiscovery: ItemDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByItemid: Item

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByParentItemid: Item

  """An edge for our `ItemDiscovery`. May be used by Relay 1."""
  itemDiscoveryEdge(
    """The method to use when ordering `ItemDiscovery`."""
    orderBy: [ItemDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): ItemDiscoveriesEdge
}

"""All input for the create `Item` mutation."""
input CreateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Item` to be created by this mutation."""
  item: ItemInput!
}

"""The output of our create `Item` mutation."""
type CreateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was created by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Item`."""
  hostByHostid: Host

  """Reads a single `Item` that is related to this `Item`."""
  itemByTemplateid: Item

  """Reads a single `Valuemap` that is related to this `Item`."""
  valuemapByValuemapid: Valuemap

  """Reads a single `Interface` that is related to this `Item`."""
  interfaceByInterfaceid: Interface

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemsEdge
}

"""All input for the create `ItemsApplication` mutation."""
input CreateItemsApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ItemsApplication` to be created by this mutation."""
  itemsApplication: ItemsApplicationInput!
}

"""The output of our create `ItemsApplication` mutation."""
type CreateItemsApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemsApplication` that was created by this mutation."""
  itemsApplication: ItemsApplication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ItemsApplication`.
  """
  applicationByApplicationid: Application

  """Reads a single `Item` that is related to this `ItemsApplication`."""
  itemByItemid: Item

  """An edge for our `ItemsApplication`. May be used by Relay 1."""
  itemsApplicationEdge(
    """The method to use when ordering `ItemsApplication`."""
    orderBy: [ItemsApplicationsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemsApplicationsEdge
}

"""All input for the create `Maintenance` mutation."""
input CreateMaintenanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Maintenance` to be created by this mutation."""
  maintenance: MaintenanceInput!
}

"""The output of our create `Maintenance` mutation."""
type CreateMaintenancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Maintenance` that was created by this mutation."""
  maintenance: Maintenance

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Maintenance`. May be used by Relay 1."""
  maintenanceEdge(
    """The method to use when ordering `Maintenance`."""
    orderBy: [MaintenancesOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesEdge
}

"""All input for the create `MaintenancesGroup` mutation."""
input CreateMaintenancesGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MaintenancesGroup` to be created by this mutation."""
  maintenancesGroup: MaintenancesGroupInput!
}

"""The output of our create `MaintenancesGroup` mutation."""
type CreateMaintenancesGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesGroup` that was created by this mutation."""
  maintenancesGroup: MaintenancesGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesGroup`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Group` that is related to this `MaintenancesGroup`."""
  groupByGroupid: Group

  """An edge for our `MaintenancesGroup`. May be used by Relay 1."""
  maintenancesGroupEdge(
    """The method to use when ordering `MaintenancesGroup`."""
    orderBy: [MaintenancesGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesGroupsEdge
}

"""All input for the create `MaintenancesHost` mutation."""
input CreateMaintenancesHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MaintenancesHost` to be created by this mutation."""
  maintenancesHost: MaintenancesHostInput!
}

"""The output of our create `MaintenancesHost` mutation."""
type CreateMaintenancesHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesHost` that was created by this mutation."""
  maintenancesHost: MaintenancesHost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesHost`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `MaintenancesHost`."""
  hostByHostid: Host

  """An edge for our `MaintenancesHost`. May be used by Relay 1."""
  maintenancesHostEdge(
    """The method to use when ordering `MaintenancesHost`."""
    orderBy: [MaintenancesHostsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesHostsEdge
}

"""All input for the create `MaintenancesWindow` mutation."""
input CreateMaintenancesWindowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MaintenancesWindow` to be created by this mutation."""
  maintenancesWindow: MaintenancesWindowInput!
}

"""The output of our create `MaintenancesWindow` mutation."""
type CreateMaintenancesWindowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesWindow` that was created by this mutation."""
  maintenancesWindow: MaintenancesWindow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesWindow`.
  """
  maintenanceByMaintenanceid: Maintenance

  """
  Reads a single `Timeperiod` that is related to this `MaintenancesWindow`.
  """
  timeperiodByTimeperiodid: Timeperiod

  """An edge for our `MaintenancesWindow`. May be used by Relay 1."""
  maintenancesWindowEdge(
    """The method to use when ordering `MaintenancesWindow`."""
    orderBy: [MaintenancesWindowsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesWindowsEdge
}

"""All input for the create `Mapping` mutation."""
input CreateMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Mapping` to be created by this mutation."""
  mapping: MappingInput!
}

"""The output of our create `Mapping` mutation."""
type CreateMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mapping` that was created by this mutation."""
  mapping: Mapping

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Valuemap` that is related to this `Mapping`."""
  valuemapByValuemapid: Valuemap

  """An edge for our `Mapping`. May be used by Relay 1."""
  mappingEdge(
    """The method to use when ordering `Mapping`."""
    orderBy: [MappingsOrderBy!] = PRIMARY_KEY_ASC
  ): MappingsEdge
}

"""All input for the create `Media` mutation."""
input CreateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Media` to be created by this mutation."""
  media: MediaInput!
}

"""The output of our create `Media` mutation."""
type CreateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was created by this mutation."""
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Media`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Media`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = PRIMARY_KEY_ASC
  ): MediaEdge
}

"""All input for the create `MediaType` mutation."""
input CreateMediaTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MediaType` to be created by this mutation."""
  mediaType: MediaTypeInput!
}

"""The output of our create `MediaType` mutation."""
type CreateMediaTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MediaType` that was created by this mutation."""
  mediaType: MediaType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MediaType`. May be used by Relay 1."""
  mediaTypeEdge(
    """The method to use when ordering `MediaType`."""
    orderBy: [MediaTypesOrderBy!] = PRIMARY_KEY_ASC
  ): MediaTypesEdge
}

"""All input for the create `NetstatsFact` mutation."""
input CreateNetstatsFactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NetstatsFact` to be created by this mutation."""
  netstatsFact: NetstatsFactInput!
}

"""The output of our create `NetstatsFact` mutation."""
type CreateNetstatsFactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NetstatsFact` that was created by this mutation."""
  netstatsFact: NetstatsFact

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NetstatsFact`. May be used by Relay 1."""
  netstatsFactEdge(
    """The method to use when ordering `NetstatsFact`."""
    orderBy: [NetstatsFactsOrderBy!] = NATURAL
  ): NetstatsFactsEdge
}

"""All input for the create `NetstatsFactsBck` mutation."""
input CreateNetstatsFactsBckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `NetstatsFactsBck` to be created by this mutation."""
  netstatsFactsBck: NetstatsFactsBckInput!
}

"""The output of our create `NetstatsFactsBck` mutation."""
type CreateNetstatsFactsBckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `NetstatsFactsBck` that was created by this mutation."""
  netstatsFactsBck: NetstatsFactsBck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `NetstatsFactsBck`. May be used by Relay 1."""
  netstatsFactsBckEdge(
    """The method to use when ordering `NetstatsFactsBck`."""
    orderBy: [NetstatsFactsBcksOrderBy!] = NATURAL
  ): NetstatsFactsBcksEdge
}

"""All input for the create `OpcommandGrp` mutation."""
input CreateOpcommandGrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OpcommandGrp` to be created by this mutation."""
  opcommandGrp: OpcommandGrpInput!
}

"""The output of our create `OpcommandGrp` mutation."""
type CreateOpcommandGrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpcommandGrp` that was created by this mutation."""
  opcommandGrp: OpcommandGrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpcommandGrp`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `OpcommandGrp`."""
  groupByGroupid: Group

  """An edge for our `OpcommandGrp`. May be used by Relay 1."""
  opcommandGrpEdge(
    """The method to use when ordering `OpcommandGrp`."""
    orderBy: [OpcommandGrpsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandGrpsEdge
}

"""All input for the create `OpcommandHst` mutation."""
input CreateOpcommandHstInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OpcommandHst` to be created by this mutation."""
  opcommandHst: OpcommandHstInput!
}

"""The output of our create `OpcommandHst` mutation."""
type CreateOpcommandHstPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpcommandHst` that was created by this mutation."""
  opcommandHst: OpcommandHst

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpcommandHst`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `OpcommandHst`."""
  hostByHostid: Host

  """An edge for our `OpcommandHst`. May be used by Relay 1."""
  opcommandHstEdge(
    """The method to use when ordering `OpcommandHst`."""
    orderBy: [OpcommandHstsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandHstsEdge
}

"""All input for the create `Opcommand` mutation."""
input CreateOpcommandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Opcommand` to be created by this mutation."""
  opcommand: OpcommandInput!
}

"""The output of our create `Opcommand` mutation."""
type CreateOpcommandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opcommand` that was created by this mutation."""
  opcommand: Opcommand

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opcommand`."""
  operationByOperationid: Operation

  """Reads a single `Script` that is related to this `Opcommand`."""
  scriptByScriptid: Script

  """An edge for our `Opcommand`. May be used by Relay 1."""
  opcommandEdge(
    """The method to use when ordering `Opcommand`."""
    orderBy: [OpcommandsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandsEdge
}

"""All input for the create `Opcondition` mutation."""
input CreateOpconditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Opcondition` to be created by this mutation."""
  opcondition: OpconditionInput!
}

"""The output of our create `Opcondition` mutation."""
type CreateOpconditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opcondition` that was created by this mutation."""
  opcondition: Opcondition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opcondition`."""
  operationByOperationid: Operation

  """An edge for our `Opcondition`. May be used by Relay 1."""
  opconditionEdge(
    """The method to use when ordering `Opcondition`."""
    orderBy: [OpconditionsOrderBy!] = PRIMARY_KEY_ASC
  ): OpconditionsEdge
}

"""All input for the create `Operation` mutation."""
input CreateOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Operation` to be created by this mutation."""
  operation: OperationInput!
}

"""The output of our create `Operation` mutation."""
type CreateOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Operation` that was created by this mutation."""
  operation: Operation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Operation`."""
  actionByActionid: Action

  """An edge for our `Operation`. May be used by Relay 1."""
  operationEdge(
    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = PRIMARY_KEY_ASC
  ): OperationsEdge
}

"""All input for the create `Opgroup` mutation."""
input CreateOpgroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Opgroup` to be created by this mutation."""
  opgroup: OpgroupInput!
}

"""The output of our create `Opgroup` mutation."""
type CreateOpgroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opgroup` that was created by this mutation."""
  opgroup: Opgroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opgroup`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `Opgroup`."""
  groupByGroupid: Group

  """An edge for our `Opgroup`. May be used by Relay 1."""
  opgroupEdge(
    """The method to use when ordering `Opgroup`."""
    orderBy: [OpgroupsOrderBy!] = PRIMARY_KEY_ASC
  ): OpgroupsEdge
}

"""All input for the create `Opinventory` mutation."""
input CreateOpinventoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Opinventory` to be created by this mutation."""
  opinventory: OpinventoryInput!
}

"""The output of our create `Opinventory` mutation."""
type CreateOpinventoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opinventory` that was created by this mutation."""
  opinventory: Opinventory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opinventory`."""
  operationByOperationid: Operation

  """An edge for our `Opinventory`. May be used by Relay 1."""
  opinventoryEdge(
    """The method to use when ordering `Opinventory`."""
    orderBy: [OpinventoriesOrderBy!] = PRIMARY_KEY_ASC
  ): OpinventoriesEdge
}

"""All input for the create `OpmessageGrp` mutation."""
input CreateOpmessageGrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OpmessageGrp` to be created by this mutation."""
  opmessageGrp: OpmessageGrpInput!
}

"""The output of our create `OpmessageGrp` mutation."""
type CreateOpmessageGrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpmessageGrp` that was created by this mutation."""
  opmessageGrp: OpmessageGrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpmessageGrp`."""
  operationByOperationid: Operation

  """Reads a single `Usrgrp` that is related to this `OpmessageGrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `OpmessageGrp`. May be used by Relay 1."""
  opmessageGrpEdge(
    """The method to use when ordering `OpmessageGrp`."""
    orderBy: [OpmessageGrpsOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessageGrpsEdge
}

"""All input for the create `Opmessage` mutation."""
input CreateOpmessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Opmessage` to be created by this mutation."""
  opmessage: OpmessageInput!
}

"""The output of our create `Opmessage` mutation."""
type CreateOpmessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opmessage` that was created by this mutation."""
  opmessage: Opmessage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opmessage`."""
  operationByOperationid: Operation

  """Reads a single `MediaType` that is related to this `Opmessage`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Opmessage`. May be used by Relay 1."""
  opmessageEdge(
    """The method to use when ordering `Opmessage`."""
    orderBy: [OpmessagesOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessagesEdge
}

"""All input for the create `OpmessageUsr` mutation."""
input CreateOpmessageUsrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `OpmessageUsr` to be created by this mutation."""
  opmessageUsr: OpmessageUsrInput!
}

"""The output of our create `OpmessageUsr` mutation."""
type CreateOpmessageUsrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpmessageUsr` that was created by this mutation."""
  opmessageUsr: OpmessageUsr

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpmessageUsr`."""
  operationByOperationid: Operation

  """Reads a single `User` that is related to this `OpmessageUsr`."""
  userByUserid: User

  """An edge for our `OpmessageUsr`. May be used by Relay 1."""
  opmessageUsrEdge(
    """The method to use when ordering `OpmessageUsr`."""
    orderBy: [OpmessageUsrsOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessageUsrsEdge
}

"""All input for the create `Optemplate` mutation."""
input CreateOptemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Optemplate` to be created by this mutation."""
  optemplate: OptemplateInput!
}

"""The output of our create `Optemplate` mutation."""
type CreateOptemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Optemplate` that was created by this mutation."""
  optemplate: Optemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Optemplate`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `Optemplate`."""
  hostByTemplateid: Host

  """An edge for our `Optemplate`. May be used by Relay 1."""
  optemplateEdge(
    """The method to use when ordering `Optemplate`."""
    orderBy: [OptemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): OptemplatesEdge
}

"""All input for the create `Problem` mutation."""
input CreateProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Problem` to be created by this mutation."""
  problem: ProblemInput!
}

"""The output of our create `Problem` mutation."""
type CreateProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Problem` that was created by this mutation."""
  problem: Problem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Problem`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `Problem`."""
  eventByREventid: Event

  """An edge for our `Problem`. May be used by Relay 1."""
  problemEdge(
    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsEdge
}

"""All input for the create `ProblemTag` mutation."""
input CreateProblemTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProblemTag` to be created by this mutation."""
  problemTag: ProblemTagInput!
}

"""The output of our create `ProblemTag` mutation."""
type CreateProblemTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProblemTag` that was created by this mutation."""
  problemTag: ProblemTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `ProblemTag`."""
  problemByEventid: Problem

  """An edge for our `ProblemTag`. May be used by Relay 1."""
  problemTagEdge(
    """The method to use when ordering `ProblemTag`."""
    orderBy: [ProblemTagsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemTagsEdge
}

"""All input for the create `Profile` mutation."""
input CreateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Profile` to be created by this mutation."""
  profile: ProfileInput!
}

"""The output of our create `Profile` mutation."""
type CreateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was created by this mutation."""
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  userByUserid: User

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesEdge
}

"""All input for the create `ProxyAutoregHost` mutation."""
input CreateProxyAutoregHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProxyAutoregHost` to be created by this mutation."""
  proxyAutoregHost: ProxyAutoregHostInput!
}

"""The output of our create `ProxyAutoregHost` mutation."""
type CreateProxyAutoregHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyAutoregHost` that was created by this mutation."""
  proxyAutoregHost: ProxyAutoregHost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyAutoregHost`. May be used by Relay 1."""
  proxyAutoregHostEdge(
    """The method to use when ordering `ProxyAutoregHost`."""
    orderBy: [ProxyAutoregHostsOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyAutoregHostsEdge
}

"""All input for the create `ProxyDhistory` mutation."""
input CreateProxyDhistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProxyDhistory` to be created by this mutation."""
  proxyDhistory: ProxyDhistoryInput!
}

"""The output of our create `ProxyDhistory` mutation."""
type CreateProxyDhistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyDhistory` that was created by this mutation."""
  proxyDhistory: ProxyDhistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyDhistory`. May be used by Relay 1."""
  proxyDhistoryEdge(
    """The method to use when ordering `ProxyDhistory`."""
    orderBy: [ProxyDhistoriesOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyDhistoriesEdge
}

"""All input for the create `ProxyHistory` mutation."""
input CreateProxyHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ProxyHistory` to be created by this mutation."""
  proxyHistory: ProxyHistoryInput!
}

"""The output of our create `ProxyHistory` mutation."""
type CreateProxyHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyHistory` that was created by this mutation."""
  proxyHistory: ProxyHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyHistory`. May be used by Relay 1."""
  proxyHistoryEdge(
    """The method to use when ordering `ProxyHistory`."""
    orderBy: [ProxyHistoriesOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyHistoriesEdge
}

"""All input for the create `Regexp` mutation."""
input CreateRegexpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Regexp` to be created by this mutation."""
  regexp: RegexpInput!
}

"""The output of our create `Regexp` mutation."""
type CreateRegexpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Regexp` that was created by this mutation."""
  regexp: Regexp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Regexp`. May be used by Relay 1."""
  regexpEdge(
    """The method to use when ordering `Regexp`."""
    orderBy: [RegexpsOrderBy!] = PRIMARY_KEY_ASC
  ): RegexpsEdge
}

"""All input for the create `Right` mutation."""
input CreateRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Right` to be created by this mutation."""
  right: RightInput!
}

"""The output of our create `Right` mutation."""
type CreateRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Right` that was created by this mutation."""
  right: Right

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Right`."""
  usrgrpByGroupid: Usrgrp

  """Reads a single `Group` that is related to this `Right`."""
  groupById: Group

  """An edge for our `Right`. May be used by Relay 1."""
  rightEdge(
    """The method to use when ordering `Right`."""
    orderBy: [RightsOrderBy!] = PRIMARY_KEY_ASC
  ): RightsEdge
}

"""All input for the create `Screen` mutation."""
input CreateScreenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Screen` to be created by this mutation."""
  screen: ScreenInput!
}

"""The output of our create `Screen` mutation."""
type CreateScreenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Screen` that was created by this mutation."""
  screen: Screen

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Screen`."""
  hostByTemplateid: Host

  """Reads a single `User` that is related to this `Screen`."""
  userByUserid: User

  """An edge for our `Screen`. May be used by Relay 1."""
  screenEdge(
    """The method to use when ordering `Screen`."""
    orderBy: [ScreensOrderBy!] = PRIMARY_KEY_ASC
  ): ScreensEdge
}

"""All input for the create `ScreensItem` mutation."""
input CreateScreensItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ScreensItem` to be created by this mutation."""
  screensItem: ScreensItemInput!
}

"""The output of our create `ScreensItem` mutation."""
type CreateScreensItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreensItem` that was created by this mutation."""
  screensItem: ScreensItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreensItem`."""
  screenByScreenid: Screen

  """An edge for our `ScreensItem`. May be used by Relay 1."""
  screensItemEdge(
    """The method to use when ordering `ScreensItem`."""
    orderBy: [ScreensItemsOrderBy!] = PRIMARY_KEY_ASC
  ): ScreensItemsEdge
}

"""All input for the create `ScreenUser` mutation."""
input CreateScreenUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ScreenUser` to be created by this mutation."""
  screenUser: ScreenUserInput!
}

"""The output of our create `ScreenUser` mutation."""
type CreateScreenUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreenUser` that was created by this mutation."""
  screenUser: ScreenUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreenUser`."""
  screenByScreenid: Screen

  """Reads a single `User` that is related to this `ScreenUser`."""
  userByUserid: User

  """An edge for our `ScreenUser`. May be used by Relay 1."""
  screenUserEdge(
    """The method to use when ordering `ScreenUser`."""
    orderBy: [ScreenUsersOrderBy!] = PRIMARY_KEY_ASC
  ): ScreenUsersEdge
}

"""All input for the create `ScreenUsrgrp` mutation."""
input CreateScreenUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ScreenUsrgrp` to be created by this mutation."""
  screenUsrgrp: ScreenUsrgrpInput!
}

"""The output of our create `ScreenUsrgrp` mutation."""
type CreateScreenUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreenUsrgrp` that was created by this mutation."""
  screenUsrgrp: ScreenUsrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreenUsrgrp`."""
  screenByScreenid: Screen

  """Reads a single `Usrgrp` that is related to this `ScreenUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `ScreenUsrgrp`. May be used by Relay 1."""
  screenUsrgrpEdge(
    """The method to use when ordering `ScreenUsrgrp`."""
    orderBy: [ScreenUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): ScreenUsrgrpsEdge
}

"""All input for the create `Script` mutation."""
input CreateScriptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Script` to be created by this mutation."""
  script: ScriptInput!
}

"""The output of our create `Script` mutation."""
type CreateScriptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Script` that was created by this mutation."""
  script: Script

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Script`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Script`."""
  groupByGroupid: Group

  """An edge for our `Script`. May be used by Relay 1."""
  scriptEdge(
    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!] = PRIMARY_KEY_ASC
  ): ScriptsEdge
}

"""All input for the create `ServiceAlarm` mutation."""
input CreateServiceAlarmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ServiceAlarm` to be created by this mutation."""
  serviceAlarm: ServiceAlarmInput!
}

"""The output of our create `ServiceAlarm` mutation."""
type CreateServiceAlarmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServiceAlarm` that was created by this mutation."""
  serviceAlarm: ServiceAlarm

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServiceAlarm`."""
  serviceByServiceid: Service

  """An edge for our `ServiceAlarm`. May be used by Relay 1."""
  serviceAlarmEdge(
    """The method to use when ordering `ServiceAlarm`."""
    orderBy: [ServiceAlarmsOrderBy!] = PRIMARY_KEY_ASC
  ): ServiceAlarmsEdge
}

"""All input for the create `Service` mutation."""
input CreateServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Service` to be created by this mutation."""
  service: ServiceInput!
}

"""The output of our create `Service` mutation."""
type CreateServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Service` that was created by this mutation."""
  service: Service

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `Service`."""
  triggerByTriggerid: Trigger

  """An edge for our `Service`. May be used by Relay 1."""
  serviceEdge(
    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesEdge
}

"""All input for the create `ServicesLink` mutation."""
input CreateServicesLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ServicesLink` to be created by this mutation."""
  servicesLink: ServicesLinkInput!
}

"""The output of our create `ServicesLink` mutation."""
type CreateServicesLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServicesLink` that was created by this mutation."""
  servicesLink: ServicesLink

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServiceupid: Service

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServicedownid: Service

  """An edge for our `ServicesLink`. May be used by Relay 1."""
  servicesLinkEdge(
    """The method to use when ordering `ServicesLink`."""
    orderBy: [ServicesLinksOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesLinksEdge
}

"""All input for the create `ServicesTime` mutation."""
input CreateServicesTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `ServicesTime` to be created by this mutation."""
  servicesTime: ServicesTimeInput!
}

"""The output of our create `ServicesTime` mutation."""
type CreateServicesTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServicesTime` that was created by this mutation."""
  servicesTime: ServicesTime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServicesTime`."""
  serviceByServiceid: Service

  """An edge for our `ServicesTime`. May be used by Relay 1."""
  servicesTimeEdge(
    """The method to use when ordering `ServicesTime`."""
    orderBy: [ServicesTimesOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesTimesEdge
}

"""All input for the create `Session` mutation."""
input CreateSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Session` to be created by this mutation."""
  session: SessionInput!
}

"""The output of our create `Session` mutation."""
type CreateSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Session` that was created by this mutation."""
  session: Session

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Session`."""
  userByUserid: User

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = PRIMARY_KEY_ASC
  ): SessionsEdge
}

"""All input for the create `Slide` mutation."""
input CreateSlideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Slide` to be created by this mutation."""
  slide: SlideInput!
}

"""The output of our create `Slide` mutation."""
type CreateSlidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Slide` that was created by this mutation."""
  slide: Slide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `Slide`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Screen` that is related to this `Slide`."""
  screenByScreenid: Screen

  """An edge for our `Slide`. May be used by Relay 1."""
  slideEdge(
    """The method to use when ordering `Slide`."""
    orderBy: [SlidesOrderBy!] = PRIMARY_KEY_ASC
  ): SlidesEdge
}

"""All input for the create `Slideshow` mutation."""
input CreateSlideshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Slideshow` to be created by this mutation."""
  slideshow: SlideshowInput!
}

"""The output of our create `Slideshow` mutation."""
type CreateSlideshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Slideshow` that was created by this mutation."""
  slideshow: Slideshow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Slideshow`."""
  userByUserid: User

  """An edge for our `Slideshow`. May be used by Relay 1."""
  slideshowEdge(
    """The method to use when ordering `Slideshow`."""
    orderBy: [SlideshowsOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowsEdge
}

"""All input for the create `SlideshowUser` mutation."""
input CreateSlideshowUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SlideshowUser` to be created by this mutation."""
  slideshowUser: SlideshowUserInput!
}

"""The output of our create `SlideshowUser` mutation."""
type CreateSlideshowUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SlideshowUser` that was created by this mutation."""
  slideshowUser: SlideshowUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `SlideshowUser`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `User` that is related to this `SlideshowUser`."""
  userByUserid: User

  """An edge for our `SlideshowUser`. May be used by Relay 1."""
  slideshowUserEdge(
    """The method to use when ordering `SlideshowUser`."""
    orderBy: [SlideshowUsersOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowUsersEdge
}

"""All input for the create `SlideshowUsrgrp` mutation."""
input CreateSlideshowUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SlideshowUsrgrp` to be created by this mutation."""
  slideshowUsrgrp: SlideshowUsrgrpInput!
}

"""The output of our create `SlideshowUsrgrp` mutation."""
type CreateSlideshowUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SlideshowUsrgrp` that was created by this mutation."""
  slideshowUsrgrp: SlideshowUsrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `SlideshowUsrgrp`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Usrgrp` that is related to this `SlideshowUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `SlideshowUsrgrp`. May be used by Relay 1."""
  slideshowUsrgrpEdge(
    """The method to use when ordering `SlideshowUsrgrp`."""
    orderBy: [SlideshowUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowUsrgrpsEdge
}

"""All input for the create `SysmapElementUrl` mutation."""
input CreateSysmapElementUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SysmapElementUrl` to be created by this mutation."""
  sysmapElementUrl: SysmapElementUrlInput!
}

"""The output of our create `SysmapElementUrl` mutation."""
type CreateSysmapElementUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapElementUrl` that was created by this mutation."""
  sysmapElementUrl: SysmapElementUrl

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SysmapsElement` that is related to this `SysmapElementUrl`.
  """
  sysmapsElementBySelementid: SysmapsElement

  """An edge for our `SysmapElementUrl`. May be used by Relay 1."""
  sysmapElementUrlEdge(
    """The method to use when ordering `SysmapElementUrl`."""
    orderBy: [SysmapElementUrlsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapElementUrlsEdge
}

"""All input for the create `Sysmap` mutation."""
input CreateSysmapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Sysmap` to be created by this mutation."""
  sysmap: SysmapInput!
}

"""The output of our create `Sysmap` mutation."""
type CreateSysmapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sysmap` that was created by this mutation."""
  sysmap: Sysmap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `Sysmap`."""
  imageByBackgroundid: Image

  """Reads a single `IconMap` that is related to this `Sysmap`."""
  iconMapByIconmapid: IconMap

  """Reads a single `User` that is related to this `Sysmap`."""
  userByUserid: User

  """An edge for our `Sysmap`. May be used by Relay 1."""
  sysmapEdge(
    """The method to use when ordering `Sysmap`."""
    orderBy: [SysmapsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsEdge
}

"""All input for the create `SysmapsElement` mutation."""
input CreateSysmapsElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SysmapsElement` to be created by this mutation."""
  sysmapsElement: SysmapsElementInput!
}

"""The output of our create `SysmapsElement` mutation."""
type CreateSysmapsElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsElement` that was created by this mutation."""
  sysmapsElement: SysmapsElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapsElement`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOff: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOn: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidDisabled: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidMaintenance: Image

  """An edge for our `SysmapsElement`. May be used by Relay 1."""
  sysmapsElementEdge(
    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsElementsEdge
}

"""All input for the create `SysmapsLink` mutation."""
input CreateSysmapsLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SysmapsLink` to be created by this mutation."""
  sysmapsLink: SysmapsLinkInput!
}

"""The output of our create `SysmapsLink` mutation."""
type CreateSysmapsLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsLink` that was created by this mutation."""
  sysmapsLink: SysmapsLink

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapsLink`."""
  sysmapBySysmapid: Sysmap

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid1: SysmapsElement

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid2: SysmapsElement

  """An edge for our `SysmapsLink`. May be used by Relay 1."""
  sysmapsLinkEdge(
    """The method to use when ordering `SysmapsLink`."""
    orderBy: [SysmapsLinksOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsLinksEdge
}

"""All input for the create `SysmapsLinkTrigger` mutation."""
input CreateSysmapsLinkTriggerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SysmapsLinkTrigger` to be created by this mutation."""
  sysmapsLinkTrigger: SysmapsLinkTriggerInput!
}

"""The output of our create `SysmapsLinkTrigger` mutation."""
type CreateSysmapsLinkTriggerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsLinkTrigger` that was created by this mutation."""
  sysmapsLinkTrigger: SysmapsLinkTrigger

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SysmapsLink` that is related to this `SysmapsLinkTrigger`.
  """
  sysmapsLinkByLinkid: SysmapsLink

  """
  Reads a single `Trigger` that is related to this `SysmapsLinkTrigger`.
  """
  triggerByTriggerid: Trigger

  """An edge for our `SysmapsLinkTrigger`. May be used by Relay 1."""
  sysmapsLinkTriggerEdge(
    """The method to use when ordering `SysmapsLinkTrigger`."""
    orderBy: [SysmapsLinkTriggersOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsLinkTriggersEdge
}

"""All input for the create `SysmapUrl` mutation."""
input CreateSysmapUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SysmapUrl` to be created by this mutation."""
  sysmapUrl: SysmapUrlInput!
}

"""The output of our create `SysmapUrl` mutation."""
type CreateSysmapUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUrl` that was created by this mutation."""
  sysmapUrl: SysmapUrl

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUrl`."""
  sysmapBySysmapid: Sysmap

  """An edge for our `SysmapUrl`. May be used by Relay 1."""
  sysmapUrlEdge(
    """The method to use when ordering `SysmapUrl`."""
    orderBy: [SysmapUrlsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUrlsEdge
}

"""All input for the create `SysmapUser` mutation."""
input CreateSysmapUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SysmapUser` to be created by this mutation."""
  sysmapUser: SysmapUserInput!
}

"""The output of our create `SysmapUser` mutation."""
type CreateSysmapUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUser` that was created by this mutation."""
  sysmapUser: SysmapUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUser`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `User` that is related to this `SysmapUser`."""
  userByUserid: User

  """An edge for our `SysmapUser`. May be used by Relay 1."""
  sysmapUserEdge(
    """The method to use when ordering `SysmapUser`."""
    orderBy: [SysmapUsersOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUsersEdge
}

"""All input for the create `SysmapUsrgrp` mutation."""
input CreateSysmapUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `SysmapUsrgrp` to be created by this mutation."""
  sysmapUsrgrp: SysmapUsrgrpInput!
}

"""The output of our create `SysmapUsrgrp` mutation."""
type CreateSysmapUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUsrgrp` that was created by this mutation."""
  sysmapUsrgrp: SysmapUsrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUsrgrp`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Usrgrp` that is related to this `SysmapUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `SysmapUsrgrp`. May be used by Relay 1."""
  sysmapUsrgrpEdge(
    """The method to use when ordering `SysmapUsrgrp`."""
    orderBy: [SysmapUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUsrgrpsEdge
}

"""All input for the create `TaskCloseProblem` mutation."""
input CreateTaskCloseProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TaskCloseProblem` to be created by this mutation."""
  taskCloseProblem: TaskCloseProblemInput!
}

"""The output of our create `TaskCloseProblem` mutation."""
type CreateTaskCloseProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TaskCloseProblem` that was created by this mutation."""
  taskCloseProblem: TaskCloseProblem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `TaskCloseProblem`."""
  taskByTaskid: Task

  """An edge for our `TaskCloseProblem`. May be used by Relay 1."""
  taskCloseProblemEdge(
    """The method to use when ordering `TaskCloseProblem`."""
    orderBy: [TaskCloseProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): TaskCloseProblemsEdge
}

"""All input for the create `Task` mutation."""
input CreateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Task` to be created by this mutation."""
  task: TaskInput!
}

"""The output of our create `Task` mutation."""
type CreateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was created by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = PRIMARY_KEY_ASC
  ): TasksEdge
}

"""All input for the create `Timeperiod` mutation."""
input CreateTimeperiodInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Timeperiod` to be created by this mutation."""
  timeperiod: TimeperiodInput!
}

"""The output of our create `Timeperiod` mutation."""
type CreateTimeperiodPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Timeperiod` that was created by this mutation."""
  timeperiod: Timeperiod

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Timeperiod`. May be used by Relay 1."""
  timeperiodEdge(
    """The method to use when ordering `Timeperiod`."""
    orderBy: [TimeperiodsOrderBy!] = PRIMARY_KEY_ASC
  ): TimeperiodsEdge
}

"""All input for the create `Trend` mutation."""
input CreateTrendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Trend` to be created by this mutation."""
  trend: TrendInput!
}

"""The output of our create `Trend` mutation."""
type CreateTrendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Trend` that was created by this mutation."""
  trend: Trend

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Trend`. May be used by Relay 1."""
  trendEdge(
    """The method to use when ordering `Trend`."""
    orderBy: [TrendsOrderBy!] = PRIMARY_KEY_ASC
  ): TrendsEdge
}

"""All input for the create `TrendsUint` mutation."""
input CreateTrendsUintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TrendsUint` to be created by this mutation."""
  trendsUint: TrendsUintInput!
}

"""The output of our create `TrendsUint` mutation."""
type CreateTrendsUintPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TrendsUint` that was created by this mutation."""
  trendsUint: TrendsUint

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TrendsUint`. May be used by Relay 1."""
  trendsUintEdge(
    """The method to use when ordering `TrendsUint`."""
    orderBy: [TrendsUintsOrderBy!] = PRIMARY_KEY_ASC
  ): TrendsUintsEdge
}

"""All input for the create `TriggerDepend` mutation."""
input CreateTriggerDependInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TriggerDepend` to be created by this mutation."""
  triggerDepend: TriggerDependInput!
}

"""The output of our create `TriggerDepend` mutation."""
type CreateTriggerDependPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerDepend` that was created by this mutation."""
  triggerDepend: TriggerDepend

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridDown: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridUp: Trigger

  """An edge for our `TriggerDepend`. May be used by Relay 1."""
  triggerDependEdge(
    """The method to use when ordering `TriggerDepend`."""
    orderBy: [TriggerDependsOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerDependsEdge
}

"""All input for the create `TriggerDiscovery` mutation."""
input CreateTriggerDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TriggerDiscovery` to be created by this mutation."""
  triggerDiscovery: TriggerDiscoveryInput!
}

"""The output of our create `TriggerDiscovery` mutation."""
type CreateTriggerDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerDiscovery` that was created by this mutation."""
  triggerDiscovery: TriggerDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByTriggerid: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByParentTriggerid: Trigger

  """An edge for our `TriggerDiscovery`. May be used by Relay 1."""
  triggerDiscoveryEdge(
    """The method to use when ordering `TriggerDiscovery`."""
    orderBy: [TriggerDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerDiscoveriesEdge
}

"""All input for the create `Trigger` mutation."""
input CreateTriggerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Trigger` to be created by this mutation."""
  trigger: TriggerInput!
}

"""The output of our create `Trigger` mutation."""
type CreateTriggerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Trigger` that was created by this mutation."""
  trigger: Trigger

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `Trigger`."""
  triggerByTemplateid: Trigger

  """An edge for our `Trigger`. May be used by Relay 1."""
  triggerEdge(
    """The method to use when ordering `Trigger`."""
    orderBy: [TriggersOrderBy!] = PRIMARY_KEY_ASC
  ): TriggersEdge
}

"""All input for the create `TriggerTag` mutation."""
input CreateTriggerTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `TriggerTag` to be created by this mutation."""
  triggerTag: TriggerTagInput!
}

"""The output of our create `TriggerTag` mutation."""
type CreateTriggerTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerTag` that was created by this mutation."""
  triggerTag: TriggerTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerTag`."""
  triggerByTriggerid: Trigger

  """An edge for our `TriggerTag`. May be used by Relay 1."""
  triggerTagEdge(
    """The method to use when ordering `TriggerTag`."""
    orderBy: [TriggerTagsOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerTagsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the create `UsersGroup` mutation."""
input CreateUsersGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `UsersGroup` to be created by this mutation."""
  usersGroup: UsersGroupInput!
}

"""The output of our create `UsersGroup` mutation."""
type CreateUsersGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UsersGroup` that was created by this mutation."""
  usersGroup: UsersGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `UsersGroup`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `User` that is related to this `UsersGroup`."""
  userByUserid: User

  """An edge for our `UsersGroup`. May be used by Relay 1."""
  usersGroupEdge(
    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): UsersGroupsEdge
}

"""All input for the create `Usrgrp` mutation."""
input CreateUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Usrgrp` to be created by this mutation."""
  usrgrp: UsrgrpInput!
}

"""The output of our create `Usrgrp` mutation."""
type CreateUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Usrgrp` that was created by this mutation."""
  usrgrp: Usrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Usrgrp`. May be used by Relay 1."""
  usrgrpEdge(
    """The method to use when ordering `Usrgrp`."""
    orderBy: [UsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): UsrgrpsEdge
}

"""All input for the create `Valuemap` mutation."""
input CreateValuemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Valuemap` to be created by this mutation."""
  valuemap: ValuemapInput!
}

"""The output of our create `Valuemap` mutation."""
type CreateValuemapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Valuemap` that was created by this mutation."""
  valuemap: Valuemap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Valuemap`. May be used by Relay 1."""
  valuemapEdge(
    """The method to use when ordering `Valuemap`."""
    orderBy: [ValuemapsOrderBy!] = PRIMARY_KEY_ASC
  ): ValuemapsEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

type Dbversion {
  mandatory: Int!
  optional: Int!
}

"""
A condition to be used against `Dbversion` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DbversionCondition {
  """Checks for equality with the object’s `mandatory` field."""
  mandatory: Int

  """Checks for equality with the object’s `optional` field."""
  optional: Int
}

"""An input for mutations affecting `Dbversion`"""
input DbversionInput {
  mandatory: Int
  optional: Int
}

"""A connection to a list of `Dbversion` values."""
type DbversionsConnection {
  """A list of `Dbversion` objects."""
  nodes: [Dbversion]!

  """
  A list of edges which contains the `Dbversion` and cursor to aid in pagination.
  """
  edges: [DbversionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dbversion` you could get from the connection."""
  totalCount: Int
}

"""A `Dbversion` edge in the connection."""
type DbversionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dbversion` at the end of the edge."""
  node: Dbversion
}

"""Methods to use when ordering `Dbversion`."""
enum DbversionsOrderBy {
  NATURAL
  MANDATORY_ASC
  MANDATORY_DESC
  OPTIONAL_ASC
  OPTIONAL_DESC
}

type Dcheck implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  dcheckid: BigInt!
  druleid: BigInt!
  type: Int!
  key_: String!
  snmpCommunity: String!
  ports: String!
  snmpv3Securityname: String!
  snmpv3Securitylevel: Int!
  snmpv3Authpassphrase: String!
  snmpv3Privpassphrase: String!
  uniq: Int!
  snmpv3Authprotocol: Int!
  snmpv3Privprotocol: Int!
  snmpv3Contextname: String!

  """Reads a single `Drule` that is related to this `Dcheck`."""
  druleByDruleid: Drule

  """Reads and enables pagination through a set of `Dservice`."""
  dservicesByDcheckid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dservice`."""
    orderBy: [DservicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DserviceCondition
  ): DservicesConnection!
}

"""
A condition to be used against `Dcheck` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DcheckCondition {
  """Checks for equality with the object’s `dcheckid` field."""
  dcheckid: BigInt

  """Checks for equality with the object’s `druleid` field."""
  druleid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `key_` field."""
  key_: String

  """Checks for equality with the object’s `snmpCommunity` field."""
  snmpCommunity: String

  """Checks for equality with the object’s `ports` field."""
  ports: String

  """Checks for equality with the object’s `snmpv3Securityname` field."""
  snmpv3Securityname: String

  """Checks for equality with the object’s `snmpv3Securitylevel` field."""
  snmpv3Securitylevel: Int

  """Checks for equality with the object’s `snmpv3Authpassphrase` field."""
  snmpv3Authpassphrase: String

  """Checks for equality with the object’s `snmpv3Privpassphrase` field."""
  snmpv3Privpassphrase: String

  """Checks for equality with the object’s `uniq` field."""
  uniq: Int

  """Checks for equality with the object’s `snmpv3Authprotocol` field."""
  snmpv3Authprotocol: Int

  """Checks for equality with the object’s `snmpv3Privprotocol` field."""
  snmpv3Privprotocol: Int

  """Checks for equality with the object’s `snmpv3Contextname` field."""
  snmpv3Contextname: String
}

"""An input for mutations affecting `Dcheck`"""
input DcheckInput {
  dcheckid: BigInt!
  druleid: BigInt!
  type: Int
  key_: String
  snmpCommunity: String
  ports: String
  snmpv3Securityname: String
  snmpv3Securitylevel: Int
  snmpv3Authpassphrase: String
  snmpv3Privpassphrase: String
  uniq: Int
  snmpv3Authprotocol: Int
  snmpv3Privprotocol: Int
  snmpv3Contextname: String
}

"""
Represents an update to a `Dcheck`. Fields that are set will be updated.
"""
input DcheckPatch {
  dcheckid: BigInt
  druleid: BigInt
  type: Int
  key_: String
  snmpCommunity: String
  ports: String
  snmpv3Securityname: String
  snmpv3Securitylevel: Int
  snmpv3Authpassphrase: String
  snmpv3Privpassphrase: String
  uniq: Int
  snmpv3Authprotocol: Int
  snmpv3Privprotocol: Int
  snmpv3Contextname: String
}

"""A connection to a list of `Dcheck` values."""
type DchecksConnection {
  """A list of `Dcheck` objects."""
  nodes: [Dcheck]!

  """
  A list of edges which contains the `Dcheck` and cursor to aid in pagination.
  """
  edges: [DchecksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dcheck` you could get from the connection."""
  totalCount: Int
}

"""A `Dcheck` edge in the connection."""
type DchecksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dcheck` at the end of the edge."""
  node: Dcheck
}

"""Methods to use when ordering `Dcheck`."""
enum DchecksOrderBy {
  NATURAL
  DCHECKID_ASC
  DCHECKID_DESC
  DRULEID_ASC
  DRULEID_DESC
  TYPE_ASC
  TYPE_DESC
  KEY_ASC
  KEY_DESC
  SNMP_COMMUNITY_ASC
  SNMP_COMMUNITY_DESC
  PORTS_ASC
  PORTS_DESC
  SNMPV3_SECURITYNAME_ASC
  SNMPV3_SECURITYNAME_DESC
  SNMPV3_SECURITYLEVEL_ASC
  SNMPV3_SECURITYLEVEL_DESC
  SNMPV3_AUTHPASSPHRASE_ASC
  SNMPV3_AUTHPASSPHRASE_DESC
  SNMPV3_PRIVPASSPHRASE_ASC
  SNMPV3_PRIVPASSPHRASE_DESC
  UNIQ_ASC
  UNIQ_DESC
  SNMPV3_AUTHPROTOCOL_ASC
  SNMPV3_AUTHPROTOCOL_DESC
  SNMPV3_PRIVPROTOCOL_ASC
  SNMPV3_PRIVPROTOCOL_DESC
  SNMPV3_CONTEXTNAME_ASC
  SNMPV3_CONTEXTNAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `deleteAcknowledgeByAcknowledgeid` mutation."""
input DeleteAcknowledgeByAcknowledgeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  acknowledgeid: BigInt!
}

"""All input for the `deleteAcknowledge` mutation."""
input DeleteAcknowledgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Acknowledge` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Acknowledge` mutation."""
type DeleteAcknowledgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Acknowledge` that was deleted by this mutation."""
  acknowledge: Acknowledge
  deletedAcknowledgeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Acknowledge`."""
  userByUserid: User

  """Reads a single `Event` that is related to this `Acknowledge`."""
  eventByEventid: Event

  """An edge for our `Acknowledge`. May be used by Relay 1."""
  acknowledgeEdge(
    """The method to use when ordering `Acknowledge`."""
    orderBy: [AcknowledgesOrderBy!] = PRIMARY_KEY_ASC
  ): AcknowledgesEdge
}

"""All input for the `deleteActionByActionid` mutation."""
input DeleteActionByActionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  actionid: BigInt!
}

"""All input for the `deleteAction` mutation."""
input DeleteActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Action` mutation."""
type DeleteActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was deleted by this mutation."""
  action: Action
  deletedActionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = PRIMARY_KEY_ASC
  ): ActionsEdge
}

"""All input for the `deleteAlertByAlertid` mutation."""
input DeleteAlertByAlertidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  alertid: BigInt!
}

"""All input for the `deleteAlert` mutation."""
input DeleteAlertInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Alert` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Alert` mutation."""
type DeleteAlertPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Alert` that was deleted by this mutation."""
  alert: Alert
  deletedAlertId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Alert`."""
  actionByActionid: Action

  """Reads a single `Event` that is related to this `Alert`."""
  eventByEventid: Event

  """Reads a single `User` that is related to this `Alert`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Alert`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Alert`. May be used by Relay 1."""
  alertEdge(
    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = PRIMARY_KEY_ASC
  ): AlertsEdge
}

"""All input for the `deleteApplicationByApplicationid` mutation."""
input DeleteApplicationByApplicationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationid: BigInt!
}

"""
All input for the `deleteApplicationDiscoveryByApplicationDiscoveryid` mutation.
"""
input DeleteApplicationDiscoveryByApplicationDiscoveryidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationDiscoveryid: BigInt!
}

"""All input for the `deleteApplicationDiscovery` mutation."""
input DeleteApplicationDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationDiscovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ApplicationDiscovery` mutation."""
type DeleteApplicationDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationDiscovery` that was deleted by this mutation."""
  applicationDiscovery: ApplicationDiscovery
  deletedApplicationDiscoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationDiscovery`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationDiscovery`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype

  """An edge for our `ApplicationDiscovery`. May be used by Relay 1."""
  applicationDiscoveryEdge(
    """The method to use when ordering `ApplicationDiscovery`."""
    orderBy: [ApplicationDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationDiscoveriesEdge
}

"""All input for the `deleteApplication` mutation."""
input DeleteApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Application` mutation."""
type DeleteApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was deleted by this mutation."""
  application: Application
  deletedApplicationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Application`."""
  hostByHostid: Host

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationsEdge
}

"""
All input for the `deleteApplicationPrototypeByApplicationPrototypeid` mutation.
"""
input DeleteApplicationPrototypeByApplicationPrototypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationPrototypeid: BigInt!
}

"""All input for the `deleteApplicationPrototype` mutation."""
input DeleteApplicationPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationPrototype` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ApplicationPrototype` mutation."""
type DeleteApplicationPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationPrototype` that was deleted by this mutation."""
  applicationPrototype: ApplicationPrototype
  deletedApplicationPrototypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ApplicationPrototype`."""
  itemByItemid: Item

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationPrototype`.
  """
  applicationPrototypeByTemplateid: ApplicationPrototype

  """An edge for our `ApplicationPrototype`. May be used by Relay 1."""
  applicationPrototypeEdge(
    """The method to use when ordering `ApplicationPrototype`."""
    orderBy: [ApplicationPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationPrototypesEdge
}

"""
All input for the `deleteApplicationTemplateByApplicationTemplateid` mutation.
"""
input DeleteApplicationTemplateByApplicationTemplateidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  applicationTemplateid: BigInt!
}

"""All input for the `deleteApplicationTemplate` mutation."""
input DeleteApplicationTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationTemplate` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ApplicationTemplate` mutation."""
type DeleteApplicationTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationTemplate` that was deleted by this mutation."""
  applicationTemplate: ApplicationTemplate
  deletedApplicationTemplateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByTemplateid: Application

  """An edge for our `ApplicationTemplate`. May be used by Relay 1."""
  applicationTemplateEdge(
    """The method to use when ordering `ApplicationTemplate`."""
    orderBy: [ApplicationTemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationTemplatesEdge
}

"""All input for the `deleteAuditlogByAuditid` mutation."""
input DeleteAuditlogByAuditidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  auditid: BigInt!
}

"""All input for the `deleteAuditlogDetailByAuditdetailid` mutation."""
input DeleteAuditlogDetailByAuditdetailidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  auditdetailid: BigInt!
}

"""All input for the `deleteAuditlogDetail` mutation."""
input DeleteAuditlogDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AuditlogDetail` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `AuditlogDetail` mutation."""
type DeleteAuditlogDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AuditlogDetail` that was deleted by this mutation."""
  auditlogDetail: AuditlogDetail
  deletedAuditlogDetailId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Auditlog` that is related to this `AuditlogDetail`."""
  auditlogByAuditid: Auditlog

  """An edge for our `AuditlogDetail`. May be used by Relay 1."""
  auditlogDetailEdge(
    """The method to use when ordering `AuditlogDetail`."""
    orderBy: [AuditlogDetailsOrderBy!] = PRIMARY_KEY_ASC
  ): AuditlogDetailsEdge
}

"""All input for the `deleteAuditlog` mutation."""
input DeleteAuditlogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Auditlog` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Auditlog` mutation."""
type DeleteAuditlogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Auditlog` that was deleted by this mutation."""
  auditlog: Auditlog
  deletedAuditlogId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Auditlog`."""
  userByUserid: User

  """An edge for our `Auditlog`. May be used by Relay 1."""
  auditlogEdge(
    """The method to use when ordering `Auditlog`."""
    orderBy: [AuditlogsOrderBy!] = PRIMARY_KEY_ASC
  ): AuditlogsEdge
}

"""All input for the `deleteAutoregHostByAutoregHostid` mutation."""
input DeleteAutoregHostByAutoregHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  autoregHostid: BigInt!
}

"""All input for the `deleteAutoregHost` mutation."""
input DeleteAutoregHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AutoregHost` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `AutoregHost` mutation."""
type DeleteAutoregHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AutoregHost` that was deleted by this mutation."""
  autoregHost: AutoregHost
  deletedAutoregHostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `AutoregHost`."""
  hostByProxyHostid: Host

  """An edge for our `AutoregHost`. May be used by Relay 1."""
  autoregHostEdge(
    """The method to use when ordering `AutoregHost`."""
    orderBy: [AutoregHostsOrderBy!] = PRIMARY_KEY_ASC
  ): AutoregHostsEdge
}

"""All input for the `deleteConditionByConditionid` mutation."""
input DeleteConditionByConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  conditionid: BigInt!
}

"""All input for the `deleteCondition` mutation."""
input DeleteConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Condition` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Condition` mutation."""
type DeleteConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Condition` that was deleted by this mutation."""
  condition: Condition
  deletedConditionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Condition`."""
  actionByActionid: Action

  """An edge for our `Condition`. May be used by Relay 1."""
  conditionEdge(
    """The method to use when ordering `Condition`."""
    orderBy: [ConditionsOrderBy!] = PRIMARY_KEY_ASC
  ): ConditionsEdge
}

"""All input for the `deleteConfigByConfigid` mutation."""
input DeleteConfigByConfigidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  configid: BigInt!
}

"""All input for the `deleteConfig` mutation."""
input DeleteConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Config` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Config` mutation."""
type DeleteConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Config` that was deleted by this mutation."""
  config: Config
  deletedConfigId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Config`."""
  usrgrpByAlertUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Config`."""
  groupByDiscoveryGroupid: Group

  """An edge for our `Config`. May be used by Relay 1."""
  configEdge(
    """The method to use when ordering `Config`."""
    orderBy: [ConfigsOrderBy!] = PRIMARY_KEY_ASC
  ): ConfigsEdge
}

"""All input for the `deleteCorrConditionByCorrConditionid` mutation."""
input DeleteCorrConditionByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  corrConditionid: BigInt!
}

"""
All input for the `deleteCorrConditionGroupByCorrConditionid` mutation.
"""
input DeleteCorrConditionGroupByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  corrConditionid: BigInt!
}

"""All input for the `deleteCorrConditionGroup` mutation."""
input DeleteCorrConditionGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionGroup` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CorrConditionGroup` mutation."""
type DeleteCorrConditionGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionGroup` that was deleted by this mutation."""
  corrConditionGroup: CorrConditionGroup
  deletedCorrConditionGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionGroup`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """Reads a single `Group` that is related to this `CorrConditionGroup`."""
  groupByGroupid: Group

  """An edge for our `CorrConditionGroup`. May be used by Relay 1."""
  corrConditionGroupEdge(
    """The method to use when ordering `CorrConditionGroup`."""
    orderBy: [CorrConditionGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionGroupsEdge
}

"""All input for the `deleteCorrCondition` mutation."""
input DeleteCorrConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrCondition` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CorrCondition` mutation."""
type DeleteCorrConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrCondition` that was deleted by this mutation."""
  corrCondition: CorrCondition
  deletedCorrConditionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Correlation` that is related to this `CorrCondition`."""
  correlationByCorrelationid: Correlation

  """An edge for our `CorrCondition`. May be used by Relay 1."""
  corrConditionEdge(
    """The method to use when ordering `CorrCondition`."""
    orderBy: [CorrConditionsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionsEdge
}

"""All input for the `deleteCorrConditionTagByCorrConditionid` mutation."""
input DeleteCorrConditionTagByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  corrConditionid: BigInt!
}

"""All input for the `deleteCorrConditionTag` mutation."""
input DeleteCorrConditionTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionTag` to be deleted.
  """
  nodeId: ID!
}

"""
All input for the `deleteCorrConditionTagpairByCorrConditionid` mutation.
"""
input DeleteCorrConditionTagpairByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  corrConditionid: BigInt!
}

"""All input for the `deleteCorrConditionTagpair` mutation."""
input DeleteCorrConditionTagpairInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionTagpair` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CorrConditionTagpair` mutation."""
type DeleteCorrConditionTagpairPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTagpair` that was deleted by this mutation."""
  corrConditionTagpair: CorrConditionTagpair
  deletedCorrConditionTagpairId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagpair`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTagpair`. May be used by Relay 1."""
  corrConditionTagpairEdge(
    """The method to use when ordering `CorrConditionTagpair`."""
    orderBy: [CorrConditionTagpairsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagpairsEdge
}

"""The output of our delete `CorrConditionTag` mutation."""
type DeleteCorrConditionTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTag` that was deleted by this mutation."""
  corrConditionTag: CorrConditionTag
  deletedCorrConditionTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTag`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTag`. May be used by Relay 1."""
  corrConditionTagEdge(
    """The method to use when ordering `CorrConditionTag`."""
    orderBy: [CorrConditionTagsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagsEdge
}

"""
All input for the `deleteCorrConditionTagvalueByCorrConditionid` mutation.
"""
input DeleteCorrConditionTagvalueByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  corrConditionid: BigInt!
}

"""All input for the `deleteCorrConditionTagvalue` mutation."""
input DeleteCorrConditionTagvalueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionTagvalue` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CorrConditionTagvalue` mutation."""
type DeleteCorrConditionTagvaluePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTagvalue` that was deleted by this mutation."""
  corrConditionTagvalue: CorrConditionTagvalue
  deletedCorrConditionTagvalueId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagvalue`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTagvalue`. May be used by Relay 1."""
  corrConditionTagvalueEdge(
    """The method to use when ordering `CorrConditionTagvalue`."""
    orderBy: [CorrConditionTagvaluesOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagvaluesEdge
}

"""All input for the `deleteCorrelationByCorrelationid` mutation."""
input DeleteCorrelationByCorrelationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  correlationid: BigInt!
}

"""All input for the `deleteCorrelation` mutation."""
input DeleteCorrelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Correlation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Correlation` mutation."""
type DeleteCorrelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Correlation` that was deleted by this mutation."""
  correlation: Correlation
  deletedCorrelationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Correlation`. May be used by Relay 1."""
  correlationEdge(
    """The method to use when ordering `Correlation`."""
    orderBy: [CorrelationsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrelationsEdge
}

"""All input for the `deleteCorrOperationByCorrOperationid` mutation."""
input DeleteCorrOperationByCorrOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  corrOperationid: BigInt!
}

"""All input for the `deleteCorrOperation` mutation."""
input DeleteCorrOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrOperation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `CorrOperation` mutation."""
type DeleteCorrOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrOperation` that was deleted by this mutation."""
  corrOperation: CorrOperation
  deletedCorrOperationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Correlation` that is related to this `CorrOperation`."""
  correlationByCorrelationid: Correlation

  """An edge for our `CorrOperation`. May be used by Relay 1."""
  corrOperationEdge(
    """The method to use when ordering `CorrOperation`."""
    orderBy: [CorrOperationsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrOperationsEdge
}

"""All input for the `deleteDcheckByDcheckid` mutation."""
input DeleteDcheckByDcheckidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dcheckid: BigInt!
}

"""All input for the `deleteDcheck` mutation."""
input DeleteDcheckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dcheck` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Dcheck` mutation."""
type DeleteDcheckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dcheck` that was deleted by this mutation."""
  dcheck: Dcheck
  deletedDcheckId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Drule` that is related to this `Dcheck`."""
  druleByDruleid: Drule

  """An edge for our `Dcheck`. May be used by Relay 1."""
  dcheckEdge(
    """The method to use when ordering `Dcheck`."""
    orderBy: [DchecksOrderBy!] = PRIMARY_KEY_ASC
  ): DchecksEdge
}

"""All input for the `deleteDhostByDhostid` mutation."""
input DeleteDhostByDhostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dhostid: BigInt!
}

"""All input for the `deleteDhost` mutation."""
input DeleteDhostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dhost` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Dhost` mutation."""
type DeleteDhostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dhost` that was deleted by this mutation."""
  dhost: Dhost
  deletedDhostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Drule` that is related to this `Dhost`."""
  druleByDruleid: Drule

  """An edge for our `Dhost`. May be used by Relay 1."""
  dhostEdge(
    """The method to use when ordering `Dhost`."""
    orderBy: [DhostsOrderBy!] = PRIMARY_KEY_ASC
  ): DhostsEdge
}

"""All input for the `deleteDruleByDruleid` mutation."""
input DeleteDruleByDruleidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  druleid: BigInt!
}

"""All input for the `deleteDrule` mutation."""
input DeleteDruleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Drule` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Drule` mutation."""
type DeleteDrulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Drule` that was deleted by this mutation."""
  drule: Drule
  deletedDruleId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Drule`."""
  hostByProxyHostid: Host

  """An edge for our `Drule`. May be used by Relay 1."""
  druleEdge(
    """The method to use when ordering `Drule`."""
    orderBy: [DrulesOrderBy!] = PRIMARY_KEY_ASC
  ): DrulesEdge
}

"""All input for the `deleteDserviceByDserviceid` mutation."""
input DeleteDserviceByDserviceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  dserviceid: BigInt!
}

"""All input for the `deleteDservice` mutation."""
input DeleteDserviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dservice` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Dservice` mutation."""
type DeleteDservicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dservice` that was deleted by this mutation."""
  dservice: Dservice
  deletedDserviceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Dhost` that is related to this `Dservice`."""
  dhostByDhostid: Dhost

  """Reads a single `Dcheck` that is related to this `Dservice`."""
  dcheckByDcheckid: Dcheck

  """An edge for our `Dservice`. May be used by Relay 1."""
  dserviceEdge(
    """The method to use when ordering `Dservice`."""
    orderBy: [DservicesOrderBy!] = PRIMARY_KEY_ASC
  ): DservicesEdge
}

"""All input for the `deleteEscalationByEscalationid` mutation."""
input DeleteEscalationByEscalationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  escalationid: BigInt!
}

"""All input for the `deleteEscalation` mutation."""
input DeleteEscalationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Escalation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Escalation` mutation."""
type DeleteEscalationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Escalation` that was deleted by this mutation."""
  escalation: Escalation
  deletedEscalationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Escalation`. May be used by Relay 1."""
  escalationEdge(
    """The method to use when ordering `Escalation`."""
    orderBy: [EscalationsOrderBy!] = PRIMARY_KEY_ASC
  ): EscalationsEdge
}

"""All input for the `deleteEventByEventid` mutation."""
input DeleteEventByEventidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventid: BigInt!
}

"""All input for the `deleteEvent` mutation."""
input DeleteEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Event` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Event` mutation."""
type DeleteEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was deleted by this mutation."""
  event: Event
  deletedEventId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = PRIMARY_KEY_ASC
  ): EventsEdge
}

"""All input for the `deleteEventRecoveryByEventid` mutation."""
input DeleteEventRecoveryByEventidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventid: BigInt!
}

"""All input for the `deleteEventRecovery` mutation."""
input DeleteEventRecoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventRecovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `EventRecovery` mutation."""
type DeleteEventRecoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventRecovery` that was deleted by this mutation."""
  eventRecovery: EventRecovery
  deletedEventRecoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByREventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByCEventid: Event

  """An edge for our `EventRecovery`. May be used by Relay 1."""
  eventRecoveryEdge(
    """The method to use when ordering `EventRecovery`."""
    orderBy: [EventRecoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): EventRecoveriesEdge
}

"""All input for the `deleteEventTagByEventtagid` mutation."""
input DeleteEventTagByEventtagidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventtagid: BigInt!
}

"""All input for the `deleteEventTag` mutation."""
input DeleteEventTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventTag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `EventTag` mutation."""
type DeleteEventTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventTag` that was deleted by this mutation."""
  eventTag: EventTag
  deletedEventTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventTag`."""
  eventByEventid: Event

  """An edge for our `EventTag`. May be used by Relay 1."""
  eventTagEdge(
    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = PRIMARY_KEY_ASC
  ): EventTagsEdge
}

"""All input for the `deleteExpressionByExpressionid` mutation."""
input DeleteExpressionByExpressionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  expressionid: BigInt!
}

"""All input for the `deleteExpression` mutation."""
input DeleteExpressionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Expression` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Expression` mutation."""
type DeleteExpressionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Expression` that was deleted by this mutation."""
  expression: Expression
  deletedExpressionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Regexp` that is related to this `Expression`."""
  regexpByRegexpid: Regexp

  """An edge for our `Expression`. May be used by Relay 1."""
  expressionEdge(
    """The method to use when ordering `Expression`."""
    orderBy: [ExpressionsOrderBy!] = PRIMARY_KEY_ASC
  ): ExpressionsEdge
}

"""All input for the `deleteFactById` mutation."""
input DeleteFactByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: Int!
}

"""All input for the `deleteFact` mutation."""
input DeleteFactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fact` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Fact` mutation."""
type DeleteFactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fact` that was deleted by this mutation."""
  fact: Fact
  deletedFactId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Fact`. May be used by Relay 1."""
  factEdge(
    """The method to use when ordering `Fact`."""
    orderBy: [FactsOrderBy!] = PRIMARY_KEY_ASC
  ): FactsEdge
}

"""All input for the `deleteFunctionByFunctionid` mutation."""
input DeleteFunctionByFunctionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  functionid: BigInt!
}

"""All input for the `deleteFunction` mutation."""
input DeleteFunctionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Function` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Function` mutation."""
type DeleteFunctionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Function` that was deleted by this mutation."""
  function: Function
  deletedFunctionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `Function`."""
  itemByItemid: Item

  """Reads a single `Trigger` that is related to this `Function`."""
  triggerByTriggerid: Trigger

  """An edge for our `Function`. May be used by Relay 1."""
  functionEdge(
    """The method to use when ordering `Function`."""
    orderBy: [FunctionsOrderBy!] = PRIMARY_KEY_ASC
  ): FunctionsEdge
}

"""All input for the `deleteGlobalmacroByGlobalmacroid` mutation."""
input DeleteGlobalmacroByGlobalmacroidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  globalmacroid: BigInt!
}

"""All input for the `deleteGlobalmacro` mutation."""
input DeleteGlobalmacroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Globalmacro` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Globalmacro` mutation."""
type DeleteGlobalmacroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Globalmacro` that was deleted by this mutation."""
  globalmacro: Globalmacro
  deletedGlobalmacroId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Globalmacro`. May be used by Relay 1."""
  globalmacroEdge(
    """The method to use when ordering `Globalmacro`."""
    orderBy: [GlobalmacrosOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalmacrosEdge
}

"""All input for the `deleteGlobalvarByGlobalvarid` mutation."""
input DeleteGlobalvarByGlobalvaridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  globalvarid: BigInt!
}

"""All input for the `deleteGlobalvar` mutation."""
input DeleteGlobalvarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Globalvar` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Globalvar` mutation."""
type DeleteGlobalvarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Globalvar` that was deleted by this mutation."""
  globalvar: Globalvar
  deletedGlobalvarId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Globalvar`. May be used by Relay 1."""
  globalvarEdge(
    """The method to use when ordering `Globalvar`."""
    orderBy: [GlobalvarsOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalvarsEdge
}

"""All input for the `deleteGraphByGraphid` mutation."""
input DeleteGraphByGraphidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  graphid: BigInt!
}

"""All input for the `deleteGraphDiscoveryByGraphid` mutation."""
input DeleteGraphDiscoveryByGraphidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  graphid: BigInt!
}

"""All input for the `deleteGraphDiscovery` mutation."""
input DeleteGraphDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GraphDiscovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GraphDiscovery` mutation."""
type DeleteGraphDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphDiscovery` that was deleted by this mutation."""
  graphDiscovery: GraphDiscovery
  deletedGraphDiscoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByGraphid: Graph

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByParentGraphid: Graph

  """An edge for our `GraphDiscovery`. May be used by Relay 1."""
  graphDiscoveryEdge(
    """The method to use when ordering `GraphDiscovery`."""
    orderBy: [GraphDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): GraphDiscoveriesEdge
}

"""All input for the `deleteGraph` mutation."""
input DeleteGraphInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Graph` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Graph` mutation."""
type DeleteGraphPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Graph` that was deleted by this mutation."""
  graph: Graph
  deletedGraphId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `Graph`."""
  graphByTemplateid: Graph

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYminItemid: Item

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYmaxItemid: Item

  """An edge for our `Graph`. May be used by Relay 1."""
  graphEdge(
    """The method to use when ordering `Graph`."""
    orderBy: [GraphsOrderBy!] = PRIMARY_KEY_ASC
  ): GraphsEdge
}

"""All input for the `deleteGraphsItemByGitemid` mutation."""
input DeleteGraphsItemByGitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  gitemid: BigInt!
}

"""All input for the `deleteGraphsItem` mutation."""
input DeleteGraphsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GraphsItem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GraphsItem` mutation."""
type DeleteGraphsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphsItem` that was deleted by this mutation."""
  graphsItem: GraphsItem
  deletedGraphsItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `GraphsItem`."""
  graphByGraphid: Graph

  """Reads a single `Item` that is related to this `GraphsItem`."""
  itemByItemid: Item

  """An edge for our `GraphsItem`. May be used by Relay 1."""
  graphsItemEdge(
    """The method to use when ordering `GraphsItem`."""
    orderBy: [GraphsItemsOrderBy!] = PRIMARY_KEY_ASC
  ): GraphsItemsEdge
}

"""All input for the `deleteGraphThemeByGraphthemeid` mutation."""
input DeleteGraphThemeByGraphthemeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  graphthemeid: BigInt!
}

"""All input for the `deleteGraphTheme` mutation."""
input DeleteGraphThemeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GraphTheme` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GraphTheme` mutation."""
type DeleteGraphThemePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphTheme` that was deleted by this mutation."""
  graphTheme: GraphTheme
  deletedGraphThemeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GraphTheme`. May be used by Relay 1."""
  graphThemeEdge(
    """The method to use when ordering `GraphTheme`."""
    orderBy: [GraphThemesOrderBy!] = PRIMARY_KEY_ASC
  ): GraphThemesEdge
}

"""All input for the `deleteGroupByGroupid` mutation."""
input DeleteGroupByGroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupid: BigInt!
}

"""All input for the `deleteGroupDiscoveryByGroupid` mutation."""
input DeleteGroupDiscoveryByGroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupid: BigInt!
}

"""All input for the `deleteGroupDiscovery` mutation."""
input DeleteGroupDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupDiscovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GroupDiscovery` mutation."""
type DeleteGroupDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupDiscovery` that was deleted by this mutation."""
  groupDiscovery: GroupDiscovery
  deletedGroupDiscoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupDiscovery`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupDiscovery`.
  """
  groupPrototypeByParentGroupPrototypeid: GroupPrototype

  """An edge for our `GroupDiscovery`. May be used by Relay 1."""
  groupDiscoveryEdge(
    """The method to use when ordering `GroupDiscovery`."""
    orderBy: [GroupDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): GroupDiscoveriesEdge
}

"""All input for the `deleteGroup` mutation."""
input DeleteGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Group` mutation."""
type DeleteGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was deleted by this mutation."""
  group: Group
  deletedGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = PRIMARY_KEY_ASC
  ): GroupsEdge
}

"""All input for the `deleteGroupPrototypeByGroupPrototypeid` mutation."""
input DeleteGroupPrototypeByGroupPrototypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  groupPrototypeid: BigInt!
}

"""All input for the `deleteGroupPrototype` mutation."""
input DeleteGroupPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupPrototype` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `GroupPrototype` mutation."""
type DeleteGroupPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupPrototype` that was deleted by this mutation."""
  groupPrototype: GroupPrototype
  deletedGroupPrototypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `GroupPrototype`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `GroupPrototype`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupPrototype`.
  """
  groupPrototypeByTemplateid: GroupPrototype

  """An edge for our `GroupPrototype`. May be used by Relay 1."""
  groupPrototypeEdge(
    """The method to use when ordering `GroupPrototype`."""
    orderBy: [GroupPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): GroupPrototypesEdge
}

"""All input for the `deleteHostByHostid` mutation."""
input DeleteHostByHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  hostid: BigInt!
}

"""All input for the `deleteHostDiscoveryByHostid` mutation."""
input DeleteHostDiscoveryByHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  hostid: BigInt!
}

"""All input for the `deleteHostDiscovery` mutation."""
input DeleteHostDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostDiscovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HostDiscovery` mutation."""
type DeleteHostDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostDiscovery` that was deleted by this mutation."""
  hostDiscovery: HostDiscovery
  deletedHostDiscoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByParentHostid: Host

  """Reads a single `Item` that is related to this `HostDiscovery`."""
  itemByParentItemid: Item

  """An edge for our `HostDiscovery`. May be used by Relay 1."""
  hostDiscoveryEdge(
    """The method to use when ordering `HostDiscovery`."""
    orderBy: [HostDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): HostDiscoveriesEdge
}

"""All input for the `deleteHost` mutation."""
input DeleteHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Host` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteHostInventoryByHostid` mutation."""
input DeleteHostInventoryByHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  hostid: BigInt!
}

"""All input for the `deleteHostInventory` mutation."""
input DeleteHostInventoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostInventory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HostInventory` mutation."""
type DeleteHostInventoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostInventory` that was deleted by this mutation."""
  hostInventory: HostInventory
  deletedHostInventoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostInventory`."""
  hostByHostid: Host

  """An edge for our `HostInventory`. May be used by Relay 1."""
  hostInventoryEdge(
    """The method to use when ordering `HostInventory`."""
    orderBy: [HostInventoriesOrderBy!] = PRIMARY_KEY_ASC
  ): HostInventoriesEdge
}

"""All input for the `deleteHostmacroByHostmacroid` mutation."""
input DeleteHostmacroByHostmacroidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  hostmacroid: BigInt!
}

"""All input for the `deleteHostmacro` mutation."""
input DeleteHostmacroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Hostmacro` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Hostmacro` mutation."""
type DeleteHostmacroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hostmacro` that was deleted by this mutation."""
  hostmacro: Hostmacro
  deletedHostmacroId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Hostmacro`."""
  hostByHostid: Host

  """An edge for our `Hostmacro`. May be used by Relay 1."""
  hostmacroEdge(
    """The method to use when ordering `Hostmacro`."""
    orderBy: [HostmacrosOrderBy!] = PRIMARY_KEY_ASC
  ): HostmacrosEdge
}

"""The output of our delete `Host` mutation."""
type DeleteHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Host` that was deleted by this mutation."""
  host: Host
  deletedHostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Host`."""
  hostByProxyHostid: Host

  """Reads a single `Maintenance` that is related to this `Host`."""
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `Host`."""
  hostByTemplateid: Host

  """An edge for our `Host`. May be used by Relay 1."""
  hostEdge(
    """The method to use when ordering `Host`."""
    orderBy: [HostsOrderBy!] = PRIMARY_KEY_ASC
  ): HostsEdge
}

"""All input for the `deleteHostsGroupByHostgroupid` mutation."""
input DeleteHostsGroupByHostgroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  hostgroupid: BigInt!
}

"""All input for the `deleteHostsGroup` mutation."""
input DeleteHostsGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostsGroup` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HostsGroup` mutation."""
type DeleteHostsGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostsGroup` that was deleted by this mutation."""
  hostsGroup: HostsGroup
  deletedHostsGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostsGroup`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `HostsGroup`."""
  groupByGroupid: Group

  """An edge for our `HostsGroup`. May be used by Relay 1."""
  hostsGroupEdge(
    """The method to use when ordering `HostsGroup`."""
    orderBy: [HostsGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): HostsGroupsEdge
}

"""All input for the `deleteHostsTemplateByHosttemplateid` mutation."""
input DeleteHostsTemplateByHosttemplateidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  hosttemplateid: BigInt!
}

"""All input for the `deleteHostsTemplate` mutation."""
input DeleteHostsTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostsTemplate` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `HostsTemplate` mutation."""
type DeleteHostsTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostsTemplate` that was deleted by this mutation."""
  hostsTemplate: HostsTemplate
  deletedHostsTemplateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByTemplateid: Host

  """An edge for our `HostsTemplate`. May be used by Relay 1."""
  hostsTemplateEdge(
    """The method to use when ordering `HostsTemplate`."""
    orderBy: [HostsTemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): HostsTemplatesEdge
}

"""All input for the `deleteHousekeeperByHousekeeperid` mutation."""
input DeleteHousekeeperByHousekeeperidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  housekeeperid: BigInt!
}

"""All input for the `deleteHousekeeper` mutation."""
input DeleteHousekeeperInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Housekeeper` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Housekeeper` mutation."""
type DeleteHousekeeperPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Housekeeper` that was deleted by this mutation."""
  housekeeper: Housekeeper
  deletedHousekeeperId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Housekeeper`. May be used by Relay 1."""
  housekeeperEdge(
    """The method to use when ordering `Housekeeper`."""
    orderBy: [HousekeepersOrderBy!] = PRIMARY_KEY_ASC
  ): HousekeepersEdge
}

"""All input for the `deleteHttpstepByHttpstepid` mutation."""
input DeleteHttpstepByHttpstepidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  httpstepid: BigInt!
}

"""All input for the `deleteHttpstep` mutation."""
input DeleteHttpstepInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httpstep` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteHttpstepitemByHttpstepitemid` mutation."""
input DeleteHttpstepitemByHttpstepitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  httpstepitemid: BigInt!
}

"""All input for the `deleteHttpstepitem` mutation."""
input DeleteHttpstepitemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httpstepitem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Httpstepitem` mutation."""
type DeleteHttpstepitemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httpstepitem` that was deleted by this mutation."""
  httpstepitem: Httpstepitem
  deletedHttpstepitemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httpstep` that is related to this `Httpstepitem`."""
  httpstepByHttpstepid: Httpstep

  """Reads a single `Item` that is related to this `Httpstepitem`."""
  itemByItemid: Item

  """An edge for our `Httpstepitem`. May be used by Relay 1."""
  httpstepitemEdge(
    """The method to use when ordering `Httpstepitem`."""
    orderBy: [HttpstepitemsOrderBy!] = PRIMARY_KEY_ASC
  ): HttpstepitemsEdge
}

"""The output of our delete `Httpstep` mutation."""
type DeleteHttpstepPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httpstep` that was deleted by this mutation."""
  httpstep: Httpstep
  deletedHttpstepId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httptest` that is related to this `Httpstep`."""
  httptestByHttptestid: Httptest

  """An edge for our `Httpstep`. May be used by Relay 1."""
  httpstepEdge(
    """The method to use when ordering `Httpstep`."""
    orderBy: [HttpstepsOrderBy!] = PRIMARY_KEY_ASC
  ): HttpstepsEdge
}

"""All input for the `deleteHttptestByHttptestid` mutation."""
input DeleteHttptestByHttptestidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  httptestid: BigInt!
}

"""All input for the `deleteHttptest` mutation."""
input DeleteHttptestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httptest` to be deleted.
  """
  nodeId: ID!
}

"""All input for the `deleteHttptestitemByHttptestitemid` mutation."""
input DeleteHttptestitemByHttptestitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  httptestitemid: BigInt!
}

"""All input for the `deleteHttptestitem` mutation."""
input DeleteHttptestitemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httptestitem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Httptestitem` mutation."""
type DeleteHttptestitemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httptestitem` that was deleted by this mutation."""
  httptestitem: Httptestitem
  deletedHttptestitemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httptest` that is related to this `Httptestitem`."""
  httptestByHttptestid: Httptest

  """Reads a single `Item` that is related to this `Httptestitem`."""
  itemByItemid: Item

  """An edge for our `Httptestitem`. May be used by Relay 1."""
  httptestitemEdge(
    """The method to use when ordering `Httptestitem`."""
    orderBy: [HttptestitemsOrderBy!] = PRIMARY_KEY_ASC
  ): HttptestitemsEdge
}

"""The output of our delete `Httptest` mutation."""
type DeleteHttptestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httptest` that was deleted by this mutation."""
  httptest: Httptest
  deletedHttptestId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Httptest`."""
  applicationByApplicationid: Application

  """Reads a single `Host` that is related to this `Httptest`."""
  hostByHostid: Host

  """Reads a single `Httptest` that is related to this `Httptest`."""
  httptestByTemplateid: Httptest

  """An edge for our `Httptest`. May be used by Relay 1."""
  httptestEdge(
    """The method to use when ordering `Httptest`."""
    orderBy: [HttptestsOrderBy!] = PRIMARY_KEY_ASC
  ): HttptestsEdge
}

"""All input for the `deleteIconMapByIconmapid` mutation."""
input DeleteIconMapByIconmapidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  iconmapid: BigInt!
}

"""All input for the `deleteIconMap` mutation."""
input DeleteIconMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IconMap` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `IconMap` mutation."""
type DeleteIconMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IconMap` that was deleted by this mutation."""
  iconMap: IconMap
  deletedIconMapId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `IconMap`."""
  imageByDefaultIconid: Image

  """An edge for our `IconMap`. May be used by Relay 1."""
  iconMapEdge(
    """The method to use when ordering `IconMap`."""
    orderBy: [IconMapsOrderBy!] = PRIMARY_KEY_ASC
  ): IconMapsEdge
}

"""All input for the `deleteIconMappingByIconmappingid` mutation."""
input DeleteIconMappingByIconmappingidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  iconmappingid: BigInt!
}

"""All input for the `deleteIconMapping` mutation."""
input DeleteIconMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IconMapping` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `IconMapping` mutation."""
type DeleteIconMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IconMapping` that was deleted by this mutation."""
  iconMapping: IconMapping
  deletedIconMappingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `IconMap` that is related to this `IconMapping`."""
  iconMapByIconmapid: IconMap

  """Reads a single `Image` that is related to this `IconMapping`."""
  imageByIconid: Image

  """An edge for our `IconMapping`. May be used by Relay 1."""
  iconMappingEdge(
    """The method to use when ordering `IconMapping`."""
    orderBy: [IconMappingsOrderBy!] = PRIMARY_KEY_ASC
  ): IconMappingsEdge
}

"""All input for the `deleteIdByTableNameAndFieldName` mutation."""
input DeleteIdByTableNameAndFieldNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableName: String!
  fieldName: String!
}

"""All input for the `deleteId` mutation."""
input DeleteIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Id` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Id` mutation."""
type DeleteIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Id` that was deleted by this mutation."""
  id: Id
  deletedIdId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Id`. May be used by Relay 1."""
  idEdge(
    """The method to use when ordering `Id`."""
    orderBy: [IdsOrderBy!] = PRIMARY_KEY_ASC
  ): IdsEdge
}

"""All input for the `deleteImageByImageid` mutation."""
input DeleteImageByImageidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  imageid: BigInt!
}

"""All input for the `deleteImage` mutation."""
input DeleteImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Image` mutation."""
type DeleteImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was deleted by this mutation."""
  image: Image
  deletedImageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = PRIMARY_KEY_ASC
  ): ImagesEdge
}

"""All input for the `deleteInterfaceByInterfaceid` mutation."""
input DeleteInterfaceByInterfaceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  interfaceid: BigInt!
}

"""All input for the `deleteInterfaceDiscoveryByInterfaceid` mutation."""
input DeleteInterfaceDiscoveryByInterfaceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  interfaceid: BigInt!
}

"""All input for the `deleteInterfaceDiscovery` mutation."""
input DeleteInterfaceDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InterfaceDiscovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `InterfaceDiscovery` mutation."""
type DeleteInterfaceDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InterfaceDiscovery` that was deleted by this mutation."""
  interfaceDiscovery: InterfaceDiscovery
  deletedInterfaceDiscoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByInterfaceid: Interface

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByParentInterfaceid: Interface

  """An edge for our `InterfaceDiscovery`. May be used by Relay 1."""
  interfaceDiscoveryEdge(
    """The method to use when ordering `InterfaceDiscovery`."""
    orderBy: [InterfaceDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): InterfaceDiscoveriesEdge
}

"""All input for the `deleteInterface` mutation."""
input DeleteInterfaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Interface` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Interface` mutation."""
type DeleteInterfacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Interface` that was deleted by this mutation."""
  interface: Interface
  deletedInterfaceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Interface`."""
  hostByHostid: Host

  """An edge for our `Interface`. May be used by Relay 1."""
  interfaceEdge(
    """The method to use when ordering `Interface`."""
    orderBy: [InterfacesOrderBy!] = PRIMARY_KEY_ASC
  ): InterfacesEdge
}

"""
All input for the `deleteItemApplicationPrototypeByItemApplicationPrototypeid` mutation.
"""
input DeleteItemApplicationPrototypeByItemApplicationPrototypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemApplicationPrototypeid: BigInt!
}

"""All input for the `deleteItemApplicationPrototype` mutation."""
input DeleteItemApplicationPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemApplicationPrototype` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ItemApplicationPrototype` mutation."""
type DeleteItemApplicationPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemApplicationPrototype` that was deleted by this mutation."""
  itemApplicationPrototype: ItemApplicationPrototype
  deletedItemApplicationPrototypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationPrototype` that is related to this `ItemApplicationPrototype`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype

  """
  Reads a single `Item` that is related to this `ItemApplicationPrototype`.
  """
  itemByItemid: Item

  """An edge for our `ItemApplicationPrototype`. May be used by Relay 1."""
  itemApplicationPrototypeEdge(
    """The method to use when ordering `ItemApplicationPrototype`."""
    orderBy: [ItemApplicationPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): ItemApplicationPrototypesEdge
}

"""All input for the `deleteItemByItemid` mutation."""
input DeleteItemByItemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemid: BigInt!
}

"""
All input for the `deleteItemConditionOrigByItemConditionid` mutation.
"""
input DeleteItemConditionOrigByItemConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemConditionid: BigInt!
}

"""All input for the `deleteItemConditionOrig` mutation."""
input DeleteItemConditionOrigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemConditionOrig` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ItemConditionOrig` mutation."""
type DeleteItemConditionOrigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemConditionOrig` that was deleted by this mutation."""
  itemConditionOrig: ItemConditionOrig
  deletedItemConditionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ItemConditionOrig`."""
  itemByItemid: Item

  """An edge for our `ItemConditionOrig`. May be used by Relay 1."""
  itemConditionOrigEdge(
    """The method to use when ordering `ItemConditionOrig`."""
    orderBy: [ItemConditionOrigsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemConditionOrigsEdge
}

"""All input for the `deleteItemDiscoveryByItemdiscoveryid` mutation."""
input DeleteItemDiscoveryByItemdiscoveryidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemdiscoveryid: BigInt!
}

"""All input for the `deleteItemDiscovery` mutation."""
input DeleteItemDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemDiscovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ItemDiscovery` mutation."""
type DeleteItemDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemDiscovery` that was deleted by this mutation."""
  itemDiscovery: ItemDiscovery
  deletedItemDiscoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByItemid: Item

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByParentItemid: Item

  """An edge for our `ItemDiscovery`. May be used by Relay 1."""
  itemDiscoveryEdge(
    """The method to use when ordering `ItemDiscovery`."""
    orderBy: [ItemDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): ItemDiscoveriesEdge
}

"""All input for the `deleteItem` mutation."""
input DeleteItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Item` mutation."""
type DeleteItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was deleted by this mutation."""
  item: Item
  deletedItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Item`."""
  hostByHostid: Host

  """Reads a single `Item` that is related to this `Item`."""
  itemByTemplateid: Item

  """Reads a single `Valuemap` that is related to this `Item`."""
  valuemapByValuemapid: Valuemap

  """Reads a single `Interface` that is related to this `Item`."""
  interfaceByInterfaceid: Interface

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemsEdge
}

"""All input for the `deleteItemsApplicationByItemappid` mutation."""
input DeleteItemsApplicationByItemappidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemappid: BigInt!
}

"""All input for the `deleteItemsApplication` mutation."""
input DeleteItemsApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemsApplication` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ItemsApplication` mutation."""
type DeleteItemsApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemsApplication` that was deleted by this mutation."""
  itemsApplication: ItemsApplication
  deletedItemsApplicationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ItemsApplication`.
  """
  applicationByApplicationid: Application

  """Reads a single `Item` that is related to this `ItemsApplication`."""
  itemByItemid: Item

  """An edge for our `ItemsApplication`. May be used by Relay 1."""
  itemsApplicationEdge(
    """The method to use when ordering `ItemsApplication`."""
    orderBy: [ItemsApplicationsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemsApplicationsEdge
}

"""All input for the `deleteMaintenanceByMaintenanceid` mutation."""
input DeleteMaintenanceByMaintenanceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  maintenanceid: BigInt!
}

"""All input for the `deleteMaintenance` mutation."""
input DeleteMaintenanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Maintenance` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Maintenance` mutation."""
type DeleteMaintenancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Maintenance` that was deleted by this mutation."""
  maintenance: Maintenance
  deletedMaintenanceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Maintenance`. May be used by Relay 1."""
  maintenanceEdge(
    """The method to use when ordering `Maintenance`."""
    orderBy: [MaintenancesOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesEdge
}

"""
All input for the `deleteMaintenancesGroupByMaintenanceGroupid` mutation.
"""
input DeleteMaintenancesGroupByMaintenanceGroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  maintenanceGroupid: BigInt!
}

"""All input for the `deleteMaintenancesGroup` mutation."""
input DeleteMaintenancesGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenancesGroup` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MaintenancesGroup` mutation."""
type DeleteMaintenancesGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesGroup` that was deleted by this mutation."""
  maintenancesGroup: MaintenancesGroup
  deletedMaintenancesGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesGroup`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Group` that is related to this `MaintenancesGroup`."""
  groupByGroupid: Group

  """An edge for our `MaintenancesGroup`. May be used by Relay 1."""
  maintenancesGroupEdge(
    """The method to use when ordering `MaintenancesGroup`."""
    orderBy: [MaintenancesGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesGroupsEdge
}

"""
All input for the `deleteMaintenancesHostByMaintenanceHostid` mutation.
"""
input DeleteMaintenancesHostByMaintenanceHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  maintenanceHostid: BigInt!
}

"""All input for the `deleteMaintenancesHost` mutation."""
input DeleteMaintenancesHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenancesHost` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MaintenancesHost` mutation."""
type DeleteMaintenancesHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesHost` that was deleted by this mutation."""
  maintenancesHost: MaintenancesHost
  deletedMaintenancesHostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesHost`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `MaintenancesHost`."""
  hostByHostid: Host

  """An edge for our `MaintenancesHost`. May be used by Relay 1."""
  maintenancesHostEdge(
    """The method to use when ordering `MaintenancesHost`."""
    orderBy: [MaintenancesHostsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesHostsEdge
}

"""
All input for the `deleteMaintenancesWindowByMaintenanceTimeperiodid` mutation.
"""
input DeleteMaintenancesWindowByMaintenanceTimeperiodidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  maintenanceTimeperiodid: BigInt!
}

"""All input for the `deleteMaintenancesWindow` mutation."""
input DeleteMaintenancesWindowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenancesWindow` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MaintenancesWindow` mutation."""
type DeleteMaintenancesWindowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesWindow` that was deleted by this mutation."""
  maintenancesWindow: MaintenancesWindow
  deletedMaintenancesWindowId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesWindow`.
  """
  maintenanceByMaintenanceid: Maintenance

  """
  Reads a single `Timeperiod` that is related to this `MaintenancesWindow`.
  """
  timeperiodByTimeperiodid: Timeperiod

  """An edge for our `MaintenancesWindow`. May be used by Relay 1."""
  maintenancesWindowEdge(
    """The method to use when ordering `MaintenancesWindow`."""
    orderBy: [MaintenancesWindowsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesWindowsEdge
}

"""All input for the `deleteMappingByMappingid` mutation."""
input DeleteMappingByMappingidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mappingid: BigInt!
}

"""All input for the `deleteMapping` mutation."""
input DeleteMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mapping` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Mapping` mutation."""
type DeleteMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mapping` that was deleted by this mutation."""
  mapping: Mapping
  deletedMappingId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Valuemap` that is related to this `Mapping`."""
  valuemapByValuemapid: Valuemap

  """An edge for our `Mapping`. May be used by Relay 1."""
  mappingEdge(
    """The method to use when ordering `Mapping`."""
    orderBy: [MappingsOrderBy!] = PRIMARY_KEY_ASC
  ): MappingsEdge
}

"""All input for the `deleteMediaByMediaid` mutation."""
input DeleteMediaByMediaidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mediaid: BigInt!
}

"""All input for the `deleteMedia` mutation."""
input DeleteMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Media` mutation."""
type DeleteMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was deleted by this mutation."""
  media: Media
  deletedMediaId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Media`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Media`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = PRIMARY_KEY_ASC
  ): MediaEdge
}

"""All input for the `deleteMediaTypeByMediatypeid` mutation."""
input DeleteMediaTypeByMediatypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  mediatypeid: BigInt!
}

"""All input for the `deleteMediaType` mutation."""
input DeleteMediaTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MediaType` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `MediaType` mutation."""
type DeleteMediaTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MediaType` that was deleted by this mutation."""
  mediaType: MediaType
  deletedMediaTypeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MediaType`. May be used by Relay 1."""
  mediaTypeEdge(
    """The method to use when ordering `MediaType`."""
    orderBy: [MediaTypesOrderBy!] = PRIMARY_KEY_ASC
  ): MediaTypesEdge
}

"""All input for the `deleteOpcommandByOperationid` mutation."""
input DeleteOpcommandByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  operationid: BigInt!
}

"""All input for the `deleteOpcommandGrpByOpcommandGrpid` mutation."""
input DeleteOpcommandGrpByOpcommandGrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  opcommandGrpid: BigInt!
}

"""All input for the `deleteOpcommandGrp` mutation."""
input DeleteOpcommandGrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpcommandGrp` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OpcommandGrp` mutation."""
type DeleteOpcommandGrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpcommandGrp` that was deleted by this mutation."""
  opcommandGrp: OpcommandGrp
  deletedOpcommandGrpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpcommandGrp`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `OpcommandGrp`."""
  groupByGroupid: Group

  """An edge for our `OpcommandGrp`. May be used by Relay 1."""
  opcommandGrpEdge(
    """The method to use when ordering `OpcommandGrp`."""
    orderBy: [OpcommandGrpsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandGrpsEdge
}

"""All input for the `deleteOpcommandHstByOpcommandHstid` mutation."""
input DeleteOpcommandHstByOpcommandHstidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  opcommandHstid: BigInt!
}

"""All input for the `deleteOpcommandHst` mutation."""
input DeleteOpcommandHstInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpcommandHst` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OpcommandHst` mutation."""
type DeleteOpcommandHstPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpcommandHst` that was deleted by this mutation."""
  opcommandHst: OpcommandHst
  deletedOpcommandHstId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpcommandHst`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `OpcommandHst`."""
  hostByHostid: Host

  """An edge for our `OpcommandHst`. May be used by Relay 1."""
  opcommandHstEdge(
    """The method to use when ordering `OpcommandHst`."""
    orderBy: [OpcommandHstsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandHstsEdge
}

"""All input for the `deleteOpcommand` mutation."""
input DeleteOpcommandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opcommand` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Opcommand` mutation."""
type DeleteOpcommandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opcommand` that was deleted by this mutation."""
  opcommand: Opcommand
  deletedOpcommandId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opcommand`."""
  operationByOperationid: Operation

  """Reads a single `Script` that is related to this `Opcommand`."""
  scriptByScriptid: Script

  """An edge for our `Opcommand`. May be used by Relay 1."""
  opcommandEdge(
    """The method to use when ordering `Opcommand`."""
    orderBy: [OpcommandsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandsEdge
}

"""All input for the `deleteOpconditionByOpconditionid` mutation."""
input DeleteOpconditionByOpconditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  opconditionid: BigInt!
}

"""All input for the `deleteOpcondition` mutation."""
input DeleteOpconditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opcondition` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Opcondition` mutation."""
type DeleteOpconditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opcondition` that was deleted by this mutation."""
  opcondition: Opcondition
  deletedOpconditionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opcondition`."""
  operationByOperationid: Operation

  """An edge for our `Opcondition`. May be used by Relay 1."""
  opconditionEdge(
    """The method to use when ordering `Opcondition`."""
    orderBy: [OpconditionsOrderBy!] = PRIMARY_KEY_ASC
  ): OpconditionsEdge
}

"""All input for the `deleteOperationByOperationid` mutation."""
input DeleteOperationByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  operationid: BigInt!
}

"""All input for the `deleteOperation` mutation."""
input DeleteOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Operation` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Operation` mutation."""
type DeleteOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Operation` that was deleted by this mutation."""
  operation: Operation
  deletedOperationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Operation`."""
  actionByActionid: Action

  """An edge for our `Operation`. May be used by Relay 1."""
  operationEdge(
    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = PRIMARY_KEY_ASC
  ): OperationsEdge
}

"""All input for the `deleteOpgroupByOpgroupid` mutation."""
input DeleteOpgroupByOpgroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  opgroupid: BigInt!
}

"""All input for the `deleteOpgroup` mutation."""
input DeleteOpgroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opgroup` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Opgroup` mutation."""
type DeleteOpgroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opgroup` that was deleted by this mutation."""
  opgroup: Opgroup
  deletedOpgroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opgroup`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `Opgroup`."""
  groupByGroupid: Group

  """An edge for our `Opgroup`. May be used by Relay 1."""
  opgroupEdge(
    """The method to use when ordering `Opgroup`."""
    orderBy: [OpgroupsOrderBy!] = PRIMARY_KEY_ASC
  ): OpgroupsEdge
}

"""All input for the `deleteOpinventoryByOperationid` mutation."""
input DeleteOpinventoryByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  operationid: BigInt!
}

"""All input for the `deleteOpinventory` mutation."""
input DeleteOpinventoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opinventory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Opinventory` mutation."""
type DeleteOpinventoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opinventory` that was deleted by this mutation."""
  opinventory: Opinventory
  deletedOpinventoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opinventory`."""
  operationByOperationid: Operation

  """An edge for our `Opinventory`. May be used by Relay 1."""
  opinventoryEdge(
    """The method to use when ordering `Opinventory`."""
    orderBy: [OpinventoriesOrderBy!] = PRIMARY_KEY_ASC
  ): OpinventoriesEdge
}

"""All input for the `deleteOpmessageByOperationid` mutation."""
input DeleteOpmessageByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  operationid: BigInt!
}

"""All input for the `deleteOpmessageGrpByOpmessageGrpid` mutation."""
input DeleteOpmessageGrpByOpmessageGrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  opmessageGrpid: BigInt!
}

"""All input for the `deleteOpmessageGrp` mutation."""
input DeleteOpmessageGrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpmessageGrp` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OpmessageGrp` mutation."""
type DeleteOpmessageGrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpmessageGrp` that was deleted by this mutation."""
  opmessageGrp: OpmessageGrp
  deletedOpmessageGrpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpmessageGrp`."""
  operationByOperationid: Operation

  """Reads a single `Usrgrp` that is related to this `OpmessageGrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `OpmessageGrp`. May be used by Relay 1."""
  opmessageGrpEdge(
    """The method to use when ordering `OpmessageGrp`."""
    orderBy: [OpmessageGrpsOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessageGrpsEdge
}

"""All input for the `deleteOpmessage` mutation."""
input DeleteOpmessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opmessage` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Opmessage` mutation."""
type DeleteOpmessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opmessage` that was deleted by this mutation."""
  opmessage: Opmessage
  deletedOpmessageId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opmessage`."""
  operationByOperationid: Operation

  """Reads a single `MediaType` that is related to this `Opmessage`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Opmessage`. May be used by Relay 1."""
  opmessageEdge(
    """The method to use when ordering `Opmessage`."""
    orderBy: [OpmessagesOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessagesEdge
}

"""All input for the `deleteOpmessageUsrByOpmessageUsrid` mutation."""
input DeleteOpmessageUsrByOpmessageUsridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  opmessageUsrid: BigInt!
}

"""All input for the `deleteOpmessageUsr` mutation."""
input DeleteOpmessageUsrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpmessageUsr` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `OpmessageUsr` mutation."""
type DeleteOpmessageUsrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpmessageUsr` that was deleted by this mutation."""
  opmessageUsr: OpmessageUsr
  deletedOpmessageUsrId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpmessageUsr`."""
  operationByOperationid: Operation

  """Reads a single `User` that is related to this `OpmessageUsr`."""
  userByUserid: User

  """An edge for our `OpmessageUsr`. May be used by Relay 1."""
  opmessageUsrEdge(
    """The method to use when ordering `OpmessageUsr`."""
    orderBy: [OpmessageUsrsOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessageUsrsEdge
}

"""All input for the `deleteOptemplateByOptemplateid` mutation."""
input DeleteOptemplateByOptemplateidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  optemplateid: BigInt!
}

"""All input for the `deleteOptemplate` mutation."""
input DeleteOptemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Optemplate` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Optemplate` mutation."""
type DeleteOptemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Optemplate` that was deleted by this mutation."""
  optemplate: Optemplate
  deletedOptemplateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Optemplate`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `Optemplate`."""
  hostByTemplateid: Host

  """An edge for our `Optemplate`. May be used by Relay 1."""
  optemplateEdge(
    """The method to use when ordering `Optemplate`."""
    orderBy: [OptemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): OptemplatesEdge
}

"""All input for the `deleteProblemByEventid` mutation."""
input DeleteProblemByEventidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  eventid: BigInt!
}

"""All input for the `deleteProblem` mutation."""
input DeleteProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Problem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Problem` mutation."""
type DeleteProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Problem` that was deleted by this mutation."""
  problem: Problem
  deletedProblemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Problem`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `Problem`."""
  eventByREventid: Event

  """An edge for our `Problem`. May be used by Relay 1."""
  problemEdge(
    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsEdge
}

"""All input for the `deleteProblemTagByProblemtagid` mutation."""
input DeleteProblemTagByProblemtagidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  problemtagid: BigInt!
}

"""All input for the `deleteProblemTag` mutation."""
input DeleteProblemTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProblemTag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProblemTag` mutation."""
type DeleteProblemTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProblemTag` that was deleted by this mutation."""
  problemTag: ProblemTag
  deletedProblemTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `ProblemTag`."""
  problemByEventid: Problem

  """An edge for our `ProblemTag`. May be used by Relay 1."""
  problemTagEdge(
    """The method to use when ordering `ProblemTag`."""
    orderBy: [ProblemTagsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemTagsEdge
}

"""All input for the `deleteProfileByProfileid` mutation."""
input DeleteProfileByProfileidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  profileid: BigInt!
}

"""All input for the `deleteProfile` mutation."""
input DeleteProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Profile` mutation."""
type DeleteProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was deleted by this mutation."""
  profile: Profile
  deletedProfileId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  userByUserid: User

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesEdge
}

"""All input for the `deleteProxyAutoregHostById` mutation."""
input DeleteProxyAutoregHostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteProxyAutoregHost` mutation."""
input DeleteProxyAutoregHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyAutoregHost` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProxyAutoregHost` mutation."""
type DeleteProxyAutoregHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyAutoregHost` that was deleted by this mutation."""
  proxyAutoregHost: ProxyAutoregHost
  deletedProxyAutoregHostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyAutoregHost`. May be used by Relay 1."""
  proxyAutoregHostEdge(
    """The method to use when ordering `ProxyAutoregHost`."""
    orderBy: [ProxyAutoregHostsOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyAutoregHostsEdge
}

"""All input for the `deleteProxyDhistoryById` mutation."""
input DeleteProxyDhistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteProxyDhistory` mutation."""
input DeleteProxyDhistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyDhistory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProxyDhistory` mutation."""
type DeleteProxyDhistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyDhistory` that was deleted by this mutation."""
  proxyDhistory: ProxyDhistory
  deletedProxyDhistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyDhistory`. May be used by Relay 1."""
  proxyDhistoryEdge(
    """The method to use when ordering `ProxyDhistory`."""
    orderBy: [ProxyDhistoriesOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyDhistoriesEdge
}

"""All input for the `deleteProxyHistoryById` mutation."""
input DeleteProxyHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteProxyHistory` mutation."""
input DeleteProxyHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyHistory` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ProxyHistory` mutation."""
type DeleteProxyHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyHistory` that was deleted by this mutation."""
  proxyHistory: ProxyHistory
  deletedProxyHistoryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyHistory`. May be used by Relay 1."""
  proxyHistoryEdge(
    """The method to use when ordering `ProxyHistory`."""
    orderBy: [ProxyHistoriesOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyHistoriesEdge
}

"""All input for the `deleteRegexpByRegexpid` mutation."""
input DeleteRegexpByRegexpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  regexpid: BigInt!
}

"""All input for the `deleteRegexp` mutation."""
input DeleteRegexpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Regexp` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Regexp` mutation."""
type DeleteRegexpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Regexp` that was deleted by this mutation."""
  regexp: Regexp
  deletedRegexpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Regexp`. May be used by Relay 1."""
  regexpEdge(
    """The method to use when ordering `Regexp`."""
    orderBy: [RegexpsOrderBy!] = PRIMARY_KEY_ASC
  ): RegexpsEdge
}

"""All input for the `deleteRightByRightid` mutation."""
input DeleteRightByRightidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rightid: BigInt!
}

"""All input for the `deleteRight` mutation."""
input DeleteRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Right` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Right` mutation."""
type DeleteRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Right` that was deleted by this mutation."""
  right: Right
  deletedRightId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Right`."""
  usrgrpByGroupid: Usrgrp

  """Reads a single `Group` that is related to this `Right`."""
  groupById: Group

  """An edge for our `Right`. May be used by Relay 1."""
  rightEdge(
    """The method to use when ordering `Right`."""
    orderBy: [RightsOrderBy!] = PRIMARY_KEY_ASC
  ): RightsEdge
}

"""All input for the `deleteScreenByScreenid` mutation."""
input DeleteScreenByScreenidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  screenid: BigInt!
}

"""All input for the `deleteScreen` mutation."""
input DeleteScreenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Screen` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Screen` mutation."""
type DeleteScreenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Screen` that was deleted by this mutation."""
  screen: Screen
  deletedScreenId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Screen`."""
  hostByTemplateid: Host

  """Reads a single `User` that is related to this `Screen`."""
  userByUserid: User

  """An edge for our `Screen`. May be used by Relay 1."""
  screenEdge(
    """The method to use when ordering `Screen`."""
    orderBy: [ScreensOrderBy!] = PRIMARY_KEY_ASC
  ): ScreensEdge
}

"""All input for the `deleteScreensItemByScreenitemid` mutation."""
input DeleteScreensItemByScreenitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  screenitemid: BigInt!
}

"""All input for the `deleteScreensItem` mutation."""
input DeleteScreensItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScreensItem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ScreensItem` mutation."""
type DeleteScreensItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreensItem` that was deleted by this mutation."""
  screensItem: ScreensItem
  deletedScreensItemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreensItem`."""
  screenByScreenid: Screen

  """An edge for our `ScreensItem`. May be used by Relay 1."""
  screensItemEdge(
    """The method to use when ordering `ScreensItem`."""
    orderBy: [ScreensItemsOrderBy!] = PRIMARY_KEY_ASC
  ): ScreensItemsEdge
}

"""All input for the `deleteScreenUserByScreenuserid` mutation."""
input DeleteScreenUserByScreenuseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  screenuserid: BigInt!
}

"""All input for the `deleteScreenUser` mutation."""
input DeleteScreenUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScreenUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ScreenUser` mutation."""
type DeleteScreenUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreenUser` that was deleted by this mutation."""
  screenUser: ScreenUser
  deletedScreenUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreenUser`."""
  screenByScreenid: Screen

  """Reads a single `User` that is related to this `ScreenUser`."""
  userByUserid: User

  """An edge for our `ScreenUser`. May be used by Relay 1."""
  screenUserEdge(
    """The method to use when ordering `ScreenUser`."""
    orderBy: [ScreenUsersOrderBy!] = PRIMARY_KEY_ASC
  ): ScreenUsersEdge
}

"""All input for the `deleteScreenUsrgrpByScreenusrgrpid` mutation."""
input DeleteScreenUsrgrpByScreenusrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  screenusrgrpid: BigInt!
}

"""All input for the `deleteScreenUsrgrp` mutation."""
input DeleteScreenUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScreenUsrgrp` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ScreenUsrgrp` mutation."""
type DeleteScreenUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreenUsrgrp` that was deleted by this mutation."""
  screenUsrgrp: ScreenUsrgrp
  deletedScreenUsrgrpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreenUsrgrp`."""
  screenByScreenid: Screen

  """Reads a single `Usrgrp` that is related to this `ScreenUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `ScreenUsrgrp`. May be used by Relay 1."""
  screenUsrgrpEdge(
    """The method to use when ordering `ScreenUsrgrp`."""
    orderBy: [ScreenUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): ScreenUsrgrpsEdge
}

"""All input for the `deleteScriptByScriptid` mutation."""
input DeleteScriptByScriptidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  scriptid: BigInt!
}

"""All input for the `deleteScript` mutation."""
input DeleteScriptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Script` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Script` mutation."""
type DeleteScriptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Script` that was deleted by this mutation."""
  script: Script
  deletedScriptId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Script`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Script`."""
  groupByGroupid: Group

  """An edge for our `Script`. May be used by Relay 1."""
  scriptEdge(
    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!] = PRIMARY_KEY_ASC
  ): ScriptsEdge
}

"""All input for the `deleteServiceAlarmByServicealarmid` mutation."""
input DeleteServiceAlarmByServicealarmidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  servicealarmid: BigInt!
}

"""All input for the `deleteServiceAlarm` mutation."""
input DeleteServiceAlarmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServiceAlarm` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ServiceAlarm` mutation."""
type DeleteServiceAlarmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServiceAlarm` that was deleted by this mutation."""
  serviceAlarm: ServiceAlarm
  deletedServiceAlarmId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServiceAlarm`."""
  serviceByServiceid: Service

  """An edge for our `ServiceAlarm`. May be used by Relay 1."""
  serviceAlarmEdge(
    """The method to use when ordering `ServiceAlarm`."""
    orderBy: [ServiceAlarmsOrderBy!] = PRIMARY_KEY_ASC
  ): ServiceAlarmsEdge
}

"""All input for the `deleteServiceByServiceid` mutation."""
input DeleteServiceByServiceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  serviceid: BigInt!
}

"""All input for the `deleteService` mutation."""
input DeleteServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Service` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Service` mutation."""
type DeleteServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Service` that was deleted by this mutation."""
  service: Service
  deletedServiceId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `Service`."""
  triggerByTriggerid: Trigger

  """An edge for our `Service`. May be used by Relay 1."""
  serviceEdge(
    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesEdge
}

"""All input for the `deleteServicesLinkByLinkid` mutation."""
input DeleteServicesLinkByLinkidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  linkid: BigInt!
}

"""All input for the `deleteServicesLink` mutation."""
input DeleteServicesLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServicesLink` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ServicesLink` mutation."""
type DeleteServicesLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServicesLink` that was deleted by this mutation."""
  servicesLink: ServicesLink
  deletedServicesLinkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServiceupid: Service

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServicedownid: Service

  """An edge for our `ServicesLink`. May be used by Relay 1."""
  servicesLinkEdge(
    """The method to use when ordering `ServicesLink`."""
    orderBy: [ServicesLinksOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesLinksEdge
}

"""All input for the `deleteServicesTimeByTimeid` mutation."""
input DeleteServicesTimeByTimeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  timeid: BigInt!
}

"""All input for the `deleteServicesTime` mutation."""
input DeleteServicesTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServicesTime` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `ServicesTime` mutation."""
type DeleteServicesTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServicesTime` that was deleted by this mutation."""
  servicesTime: ServicesTime
  deletedServicesTimeId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServicesTime`."""
  serviceByServiceid: Service

  """An edge for our `ServicesTime`. May be used by Relay 1."""
  servicesTimeEdge(
    """The method to use when ordering `ServicesTime`."""
    orderBy: [ServicesTimesOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesTimesEdge
}

"""All input for the `deleteSessionBySessionid` mutation."""
input DeleteSessionBySessionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sessionid: String!
}

"""All input for the `deleteSession` mutation."""
input DeleteSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Session` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Session` mutation."""
type DeleteSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Session` that was deleted by this mutation."""
  session: Session
  deletedSessionId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Session`."""
  userByUserid: User

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = PRIMARY_KEY_ASC
  ): SessionsEdge
}

"""All input for the `deleteSlideBySlideid` mutation."""
input DeleteSlideBySlideidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slideid: BigInt!
}

"""All input for the `deleteSlide` mutation."""
input DeleteSlideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Slide` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Slide` mutation."""
type DeleteSlidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Slide` that was deleted by this mutation."""
  slide: Slide
  deletedSlideId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `Slide`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Screen` that is related to this `Slide`."""
  screenByScreenid: Screen

  """An edge for our `Slide`. May be used by Relay 1."""
  slideEdge(
    """The method to use when ordering `Slide`."""
    orderBy: [SlidesOrderBy!] = PRIMARY_KEY_ASC
  ): SlidesEdge
}

"""All input for the `deleteSlideshowBySlideshowid` mutation."""
input DeleteSlideshowBySlideshowidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slideshowid: BigInt!
}

"""All input for the `deleteSlideshow` mutation."""
input DeleteSlideshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Slideshow` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Slideshow` mutation."""
type DeleteSlideshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Slideshow` that was deleted by this mutation."""
  slideshow: Slideshow
  deletedSlideshowId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Slideshow`."""
  userByUserid: User

  """An edge for our `Slideshow`. May be used by Relay 1."""
  slideshowEdge(
    """The method to use when ordering `Slideshow`."""
    orderBy: [SlideshowsOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowsEdge
}

"""All input for the `deleteSlideshowUserBySlideshowuserid` mutation."""
input DeleteSlideshowUserBySlideshowuseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slideshowuserid: BigInt!
}

"""All input for the `deleteSlideshowUser` mutation."""
input DeleteSlideshowUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SlideshowUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SlideshowUser` mutation."""
type DeleteSlideshowUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SlideshowUser` that was deleted by this mutation."""
  slideshowUser: SlideshowUser
  deletedSlideshowUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `SlideshowUser`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `User` that is related to this `SlideshowUser`."""
  userByUserid: User

  """An edge for our `SlideshowUser`. May be used by Relay 1."""
  slideshowUserEdge(
    """The method to use when ordering `SlideshowUser`."""
    orderBy: [SlideshowUsersOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowUsersEdge
}

"""
All input for the `deleteSlideshowUsrgrpBySlideshowusrgrpid` mutation.
"""
input DeleteSlideshowUsrgrpBySlideshowusrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  slideshowusrgrpid: BigInt!
}

"""All input for the `deleteSlideshowUsrgrp` mutation."""
input DeleteSlideshowUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SlideshowUsrgrp` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SlideshowUsrgrp` mutation."""
type DeleteSlideshowUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SlideshowUsrgrp` that was deleted by this mutation."""
  slideshowUsrgrp: SlideshowUsrgrp
  deletedSlideshowUsrgrpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `SlideshowUsrgrp`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Usrgrp` that is related to this `SlideshowUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `SlideshowUsrgrp`. May be used by Relay 1."""
  slideshowUsrgrpEdge(
    """The method to use when ordering `SlideshowUsrgrp`."""
    orderBy: [SlideshowUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowUsrgrpsEdge
}

"""All input for the `deleteSysmapBySysmapid` mutation."""
input DeleteSysmapBySysmapidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sysmapid: BigInt!
}

"""
All input for the `deleteSysmapElementUrlBySysmapelementurlid` mutation.
"""
input DeleteSysmapElementUrlBySysmapelementurlidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sysmapelementurlid: BigInt!
}

"""All input for the `deleteSysmapElementUrl` mutation."""
input DeleteSysmapElementUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapElementUrl` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SysmapElementUrl` mutation."""
type DeleteSysmapElementUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapElementUrl` that was deleted by this mutation."""
  sysmapElementUrl: SysmapElementUrl
  deletedSysmapElementUrlId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SysmapsElement` that is related to this `SysmapElementUrl`.
  """
  sysmapsElementBySelementid: SysmapsElement

  """An edge for our `SysmapElementUrl`. May be used by Relay 1."""
  sysmapElementUrlEdge(
    """The method to use when ordering `SysmapElementUrl`."""
    orderBy: [SysmapElementUrlsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapElementUrlsEdge
}

"""All input for the `deleteSysmap` mutation."""
input DeleteSysmapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sysmap` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Sysmap` mutation."""
type DeleteSysmapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sysmap` that was deleted by this mutation."""
  sysmap: Sysmap
  deletedSysmapId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `Sysmap`."""
  imageByBackgroundid: Image

  """Reads a single `IconMap` that is related to this `Sysmap`."""
  iconMapByIconmapid: IconMap

  """Reads a single `User` that is related to this `Sysmap`."""
  userByUserid: User

  """An edge for our `Sysmap`. May be used by Relay 1."""
  sysmapEdge(
    """The method to use when ordering `Sysmap`."""
    orderBy: [SysmapsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsEdge
}

"""All input for the `deleteSysmapsElementBySelementid` mutation."""
input DeleteSysmapsElementBySelementidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  selementid: BigInt!
}

"""All input for the `deleteSysmapsElement` mutation."""
input DeleteSysmapsElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapsElement` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SysmapsElement` mutation."""
type DeleteSysmapsElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsElement` that was deleted by this mutation."""
  sysmapsElement: SysmapsElement
  deletedSysmapsElementId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapsElement`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOff: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOn: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidDisabled: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidMaintenance: Image

  """An edge for our `SysmapsElement`. May be used by Relay 1."""
  sysmapsElementEdge(
    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsElementsEdge
}

"""All input for the `deleteSysmapsLinkByLinkid` mutation."""
input DeleteSysmapsLinkByLinkidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  linkid: BigInt!
}

"""All input for the `deleteSysmapsLink` mutation."""
input DeleteSysmapsLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapsLink` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SysmapsLink` mutation."""
type DeleteSysmapsLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsLink` that was deleted by this mutation."""
  sysmapsLink: SysmapsLink
  deletedSysmapsLinkId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapsLink`."""
  sysmapBySysmapid: Sysmap

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid1: SysmapsElement

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid2: SysmapsElement

  """An edge for our `SysmapsLink`. May be used by Relay 1."""
  sysmapsLinkEdge(
    """The method to use when ordering `SysmapsLink`."""
    orderBy: [SysmapsLinksOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsLinksEdge
}

"""All input for the `deleteSysmapsLinkTriggerByLinktriggerid` mutation."""
input DeleteSysmapsLinkTriggerByLinktriggeridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  linktriggerid: BigInt!
}

"""All input for the `deleteSysmapsLinkTrigger` mutation."""
input DeleteSysmapsLinkTriggerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapsLinkTrigger` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SysmapsLinkTrigger` mutation."""
type DeleteSysmapsLinkTriggerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsLinkTrigger` that was deleted by this mutation."""
  sysmapsLinkTrigger: SysmapsLinkTrigger
  deletedSysmapsLinkTriggerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SysmapsLink` that is related to this `SysmapsLinkTrigger`.
  """
  sysmapsLinkByLinkid: SysmapsLink

  """
  Reads a single `Trigger` that is related to this `SysmapsLinkTrigger`.
  """
  triggerByTriggerid: Trigger

  """An edge for our `SysmapsLinkTrigger`. May be used by Relay 1."""
  sysmapsLinkTriggerEdge(
    """The method to use when ordering `SysmapsLinkTrigger`."""
    orderBy: [SysmapsLinkTriggersOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsLinkTriggersEdge
}

"""All input for the `deleteSysmapUrlBySysmapurlid` mutation."""
input DeleteSysmapUrlBySysmapurlidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sysmapurlid: BigInt!
}

"""All input for the `deleteSysmapUrl` mutation."""
input DeleteSysmapUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapUrl` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SysmapUrl` mutation."""
type DeleteSysmapUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUrl` that was deleted by this mutation."""
  sysmapUrl: SysmapUrl
  deletedSysmapUrlId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUrl`."""
  sysmapBySysmapid: Sysmap

  """An edge for our `SysmapUrl`. May be used by Relay 1."""
  sysmapUrlEdge(
    """The method to use when ordering `SysmapUrl`."""
    orderBy: [SysmapUrlsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUrlsEdge
}

"""All input for the `deleteSysmapUserBySysmapuserid` mutation."""
input DeleteSysmapUserBySysmapuseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sysmapuserid: BigInt!
}

"""All input for the `deleteSysmapUser` mutation."""
input DeleteSysmapUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapUser` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SysmapUser` mutation."""
type DeleteSysmapUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUser` that was deleted by this mutation."""
  sysmapUser: SysmapUser
  deletedSysmapUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUser`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `User` that is related to this `SysmapUser`."""
  userByUserid: User

  """An edge for our `SysmapUser`. May be used by Relay 1."""
  sysmapUserEdge(
    """The method to use when ordering `SysmapUser`."""
    orderBy: [SysmapUsersOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUsersEdge
}

"""All input for the `deleteSysmapUsrgrpBySysmapusrgrpid` mutation."""
input DeleteSysmapUsrgrpBySysmapusrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  sysmapusrgrpid: BigInt!
}

"""All input for the `deleteSysmapUsrgrp` mutation."""
input DeleteSysmapUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapUsrgrp` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `SysmapUsrgrp` mutation."""
type DeleteSysmapUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUsrgrp` that was deleted by this mutation."""
  sysmapUsrgrp: SysmapUsrgrp
  deletedSysmapUsrgrpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUsrgrp`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Usrgrp` that is related to this `SysmapUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `SysmapUsrgrp`. May be used by Relay 1."""
  sysmapUsrgrpEdge(
    """The method to use when ordering `SysmapUsrgrp`."""
    orderBy: [SysmapUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUsrgrpsEdge
}

"""All input for the `deleteTaskByTaskid` mutation."""
input DeleteTaskByTaskidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  taskid: BigInt!
}

"""All input for the `deleteTaskCloseProblemByTaskid` mutation."""
input DeleteTaskCloseProblemByTaskidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  taskid: BigInt!
}

"""All input for the `deleteTaskCloseProblem` mutation."""
input DeleteTaskCloseProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaskCloseProblem` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TaskCloseProblem` mutation."""
type DeleteTaskCloseProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TaskCloseProblem` that was deleted by this mutation."""
  taskCloseProblem: TaskCloseProblem
  deletedTaskCloseProblemId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `TaskCloseProblem`."""
  taskByTaskid: Task

  """An edge for our `TaskCloseProblem`. May be used by Relay 1."""
  taskCloseProblemEdge(
    """The method to use when ordering `TaskCloseProblem`."""
    orderBy: [TaskCloseProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): TaskCloseProblemsEdge
}

"""All input for the `deleteTask` mutation."""
input DeleteTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Task` mutation."""
type DeleteTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was deleted by this mutation."""
  task: Task
  deletedTaskId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = PRIMARY_KEY_ASC
  ): TasksEdge
}

"""All input for the `deleteTimeperiodByTimeperiodid` mutation."""
input DeleteTimeperiodByTimeperiodidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  timeperiodid: BigInt!
}

"""All input for the `deleteTimeperiod` mutation."""
input DeleteTimeperiodInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Timeperiod` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Timeperiod` mutation."""
type DeleteTimeperiodPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Timeperiod` that was deleted by this mutation."""
  timeperiod: Timeperiod
  deletedTimeperiodId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Timeperiod`. May be used by Relay 1."""
  timeperiodEdge(
    """The method to use when ordering `Timeperiod`."""
    orderBy: [TimeperiodsOrderBy!] = PRIMARY_KEY_ASC
  ): TimeperiodsEdge
}

"""All input for the `deleteTrendByItemidAndClock` mutation."""
input DeleteTrendByItemidAndClockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemid: BigInt!
  clock: Int!
}

"""All input for the `deleteTrend` mutation."""
input DeleteTrendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Trend` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Trend` mutation."""
type DeleteTrendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Trend` that was deleted by this mutation."""
  trend: Trend
  deletedTrendId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Trend`. May be used by Relay 1."""
  trendEdge(
    """The method to use when ordering `Trend`."""
    orderBy: [TrendsOrderBy!] = PRIMARY_KEY_ASC
  ): TrendsEdge
}

"""All input for the `deleteTrendsUintByItemidAndClock` mutation."""
input DeleteTrendsUintByItemidAndClockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  itemid: BigInt!
  clock: Int!
}

"""All input for the `deleteTrendsUint` mutation."""
input DeleteTrendsUintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TrendsUint` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TrendsUint` mutation."""
type DeleteTrendsUintPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TrendsUint` that was deleted by this mutation."""
  trendsUint: TrendsUint
  deletedTrendsUintId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TrendsUint`. May be used by Relay 1."""
  trendsUintEdge(
    """The method to use when ordering `TrendsUint`."""
    orderBy: [TrendsUintsOrderBy!] = PRIMARY_KEY_ASC
  ): TrendsUintsEdge
}

"""All input for the `deleteTriggerByTriggerid` mutation."""
input DeleteTriggerByTriggeridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  triggerid: BigInt!
}

"""All input for the `deleteTriggerDependByTriggerdepid` mutation."""
input DeleteTriggerDependByTriggerdepidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  triggerdepid: BigInt!
}

"""All input for the `deleteTriggerDepend` mutation."""
input DeleteTriggerDependInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerDepend` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TriggerDepend` mutation."""
type DeleteTriggerDependPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerDepend` that was deleted by this mutation."""
  triggerDepend: TriggerDepend
  deletedTriggerDependId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridDown: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridUp: Trigger

  """An edge for our `TriggerDepend`. May be used by Relay 1."""
  triggerDependEdge(
    """The method to use when ordering `TriggerDepend`."""
    orderBy: [TriggerDependsOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerDependsEdge
}

"""All input for the `deleteTriggerDiscoveryByTriggerid` mutation."""
input DeleteTriggerDiscoveryByTriggeridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  triggerid: BigInt!
}

"""All input for the `deleteTriggerDiscovery` mutation."""
input DeleteTriggerDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerDiscovery` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TriggerDiscovery` mutation."""
type DeleteTriggerDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerDiscovery` that was deleted by this mutation."""
  triggerDiscovery: TriggerDiscovery
  deletedTriggerDiscoveryId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByTriggerid: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByParentTriggerid: Trigger

  """An edge for our `TriggerDiscovery`. May be used by Relay 1."""
  triggerDiscoveryEdge(
    """The method to use when ordering `TriggerDiscovery`."""
    orderBy: [TriggerDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerDiscoveriesEdge
}

"""All input for the `deleteTrigger` mutation."""
input DeleteTriggerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Trigger` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Trigger` mutation."""
type DeleteTriggerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Trigger` that was deleted by this mutation."""
  trigger: Trigger
  deletedTriggerId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `Trigger`."""
  triggerByTemplateid: Trigger

  """An edge for our `Trigger`. May be used by Relay 1."""
  triggerEdge(
    """The method to use when ordering `Trigger`."""
    orderBy: [TriggersOrderBy!] = PRIMARY_KEY_ASC
  ): TriggersEdge
}

"""All input for the `deleteTriggerTagByTriggertagid` mutation."""
input DeleteTriggerTagByTriggertagidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  triggertagid: BigInt!
}

"""All input for the `deleteTriggerTag` mutation."""
input DeleteTriggerTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerTag` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `TriggerTag` mutation."""
type DeleteTriggerTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerTag` that was deleted by this mutation."""
  triggerTag: TriggerTag
  deletedTriggerTagId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerTag`."""
  triggerByTriggerid: Trigger

  """An edge for our `TriggerTag`. May be used by Relay 1."""
  triggerTagEdge(
    """The method to use when ordering `TriggerTag`."""
    orderBy: [TriggerTagsOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerTagsEdge
}

"""All input for the `deleteUserByUserid` mutation."""
input DeleteUserByUseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  userid: BigInt!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `deleteUsersGroupById` mutation."""
input DeleteUsersGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  id: BigInt!
}

"""All input for the `deleteUsersGroup` mutation."""
input DeleteUsersGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UsersGroup` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `UsersGroup` mutation."""
type DeleteUsersGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UsersGroup` that was deleted by this mutation."""
  usersGroup: UsersGroup
  deletedUsersGroupId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `UsersGroup`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `User` that is related to this `UsersGroup`."""
  userByUserid: User

  """An edge for our `UsersGroup`. May be used by Relay 1."""
  usersGroupEdge(
    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): UsersGroupsEdge
}

"""All input for the `deleteUsrgrpByUsrgrpid` mutation."""
input DeleteUsrgrpByUsrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  usrgrpid: BigInt!
}

"""All input for the `deleteUsrgrp` mutation."""
input DeleteUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Usrgrp` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Usrgrp` mutation."""
type DeleteUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Usrgrp` that was deleted by this mutation."""
  usrgrp: Usrgrp
  deletedUsrgrpId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Usrgrp`. May be used by Relay 1."""
  usrgrpEdge(
    """The method to use when ordering `Usrgrp`."""
    orderBy: [UsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): UsrgrpsEdge
}

"""All input for the `deleteValuemapByValuemapid` mutation."""
input DeleteValuemapByValuemapidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  valuemapid: BigInt!
}

"""All input for the `deleteValuemap` mutation."""
input DeleteValuemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Valuemap` to be deleted.
  """
  nodeId: ID!
}

"""The output of our delete `Valuemap` mutation."""
type DeleteValuemapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Valuemap` that was deleted by this mutation."""
  valuemap: Valuemap
  deletedValuemapId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Valuemap`. May be used by Relay 1."""
  valuemapEdge(
    """The method to use when ordering `Valuemap`."""
    orderBy: [ValuemapsOrderBy!] = PRIMARY_KEY_ASC
  ): ValuemapsEdge
}

type Dhost implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  dhostid: BigInt!
  druleid: BigInt!
  status: Int!
  lastup: Int!
  lastdown: Int!

  """Reads a single `Drule` that is related to this `Dhost`."""
  druleByDruleid: Drule

  """Reads and enables pagination through a set of `Dservice`."""
  dservicesByDhostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dservice`."""
    orderBy: [DservicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DserviceCondition
  ): DservicesConnection!
}

"""
A condition to be used against `Dhost` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DhostCondition {
  """Checks for equality with the object’s `dhostid` field."""
  dhostid: BigInt

  """Checks for equality with the object’s `druleid` field."""
  druleid: BigInt

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `lastup` field."""
  lastup: Int

  """Checks for equality with the object’s `lastdown` field."""
  lastdown: Int
}

"""An input for mutations affecting `Dhost`"""
input DhostInput {
  dhostid: BigInt!
  druleid: BigInt!
  status: Int
  lastup: Int
  lastdown: Int
}

"""
Represents an update to a `Dhost`. Fields that are set will be updated.
"""
input DhostPatch {
  dhostid: BigInt
  druleid: BigInt
  status: Int
  lastup: Int
  lastdown: Int
}

"""A connection to a list of `Dhost` values."""
type DhostsConnection {
  """A list of `Dhost` objects."""
  nodes: [Dhost]!

  """
  A list of edges which contains the `Dhost` and cursor to aid in pagination.
  """
  edges: [DhostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dhost` you could get from the connection."""
  totalCount: Int
}

"""A `Dhost` edge in the connection."""
type DhostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dhost` at the end of the edge."""
  node: Dhost
}

"""Methods to use when ordering `Dhost`."""
enum DhostsOrderBy {
  NATURAL
  DHOSTID_ASC
  DHOSTID_DESC
  DRULEID_ASC
  DRULEID_DESC
  STATUS_ASC
  STATUS_DESC
  LASTUP_ASC
  LASTUP_DESC
  LASTDOWN_ASC
  LASTDOWN_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Drule implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  druleid: BigInt!
  proxyHostid: BigInt
  name: String!
  iprange: String!
  delay: Int!
  nextcheck: Int!
  status: Int!

  """Reads a single `Host` that is related to this `Drule`."""
  hostByProxyHostid: Host

  """Reads and enables pagination through a set of `Dcheck`."""
  dchecksByDruleid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dcheck`."""
    orderBy: [DchecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DcheckCondition
  ): DchecksConnection!

  """Reads and enables pagination through a set of `Dhost`."""
  dhostsByDruleid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dhost`."""
    orderBy: [DhostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DhostCondition
  ): DhostsConnection!
}

"""
A condition to be used against `Drule` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input DruleCondition {
  """Checks for equality with the object’s `druleid` field."""
  druleid: BigInt

  """Checks for equality with the object’s `proxyHostid` field."""
  proxyHostid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `iprange` field."""
  iprange: String

  """Checks for equality with the object’s `delay` field."""
  delay: Int

  """Checks for equality with the object’s `nextcheck` field."""
  nextcheck: Int

  """Checks for equality with the object’s `status` field."""
  status: Int
}

"""An input for mutations affecting `Drule`"""
input DruleInput {
  druleid: BigInt!
  proxyHostid: BigInt
  name: String
  iprange: String
  delay: Int
  nextcheck: Int
  status: Int
}

"""
Represents an update to a `Drule`. Fields that are set will be updated.
"""
input DrulePatch {
  druleid: BigInt
  proxyHostid: BigInt
  name: String
  iprange: String
  delay: Int
  nextcheck: Int
  status: Int
}

"""A connection to a list of `Drule` values."""
type DrulesConnection {
  """A list of `Drule` objects."""
  nodes: [Drule]!

  """
  A list of edges which contains the `Drule` and cursor to aid in pagination.
  """
  edges: [DrulesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Drule` you could get from the connection."""
  totalCount: Int
}

"""A `Drule` edge in the connection."""
type DrulesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Drule` at the end of the edge."""
  node: Drule
}

"""Methods to use when ordering `Drule`."""
enum DrulesOrderBy {
  NATURAL
  DRULEID_ASC
  DRULEID_DESC
  PROXY_HOSTID_ASC
  PROXY_HOSTID_DESC
  NAME_ASC
  NAME_DESC
  IPRANGE_ASC
  IPRANGE_DESC
  DELAY_ASC
  DELAY_DESC
  NEXTCHECK_ASC
  NEXTCHECK_DESC
  STATUS_ASC
  STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Dservice implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  dserviceid: BigInt!
  dhostid: BigInt!
  type: Int!
  key_: String!
  value: String!
  port: Int!
  status: Int!
  lastup: Int!
  lastdown: Int!
  dcheckid: BigInt!
  ip: String!
  dns: String!

  """Reads a single `Dhost` that is related to this `Dservice`."""
  dhostByDhostid: Dhost

  """Reads a single `Dcheck` that is related to this `Dservice`."""
  dcheckByDcheckid: Dcheck
}

"""
A condition to be used against `Dservice` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input DserviceCondition {
  """Checks for equality with the object’s `dserviceid` field."""
  dserviceid: BigInt

  """Checks for equality with the object’s `dhostid` field."""
  dhostid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `key_` field."""
  key_: String

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `port` field."""
  port: Int

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `lastup` field."""
  lastup: Int

  """Checks for equality with the object’s `lastdown` field."""
  lastdown: Int

  """Checks for equality with the object’s `dcheckid` field."""
  dcheckid: BigInt

  """Checks for equality with the object’s `ip` field."""
  ip: String

  """Checks for equality with the object’s `dns` field."""
  dns: String
}

"""An input for mutations affecting `Dservice`"""
input DserviceInput {
  dserviceid: BigInt!
  dhostid: BigInt!
  type: Int
  key_: String
  value: String
  port: Int
  status: Int
  lastup: Int
  lastdown: Int
  dcheckid: BigInt!
  ip: String
  dns: String
}

"""
Represents an update to a `Dservice`. Fields that are set will be updated.
"""
input DservicePatch {
  dserviceid: BigInt
  dhostid: BigInt
  type: Int
  key_: String
  value: String
  port: Int
  status: Int
  lastup: Int
  lastdown: Int
  dcheckid: BigInt
  ip: String
  dns: String
}

"""A connection to a list of `Dservice` values."""
type DservicesConnection {
  """A list of `Dservice` objects."""
  nodes: [Dservice]!

  """
  A list of edges which contains the `Dservice` and cursor to aid in pagination.
  """
  edges: [DservicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Dservice` you could get from the connection."""
  totalCount: Int
}

"""A `Dservice` edge in the connection."""
type DservicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Dservice` at the end of the edge."""
  node: Dservice
}

"""Methods to use when ordering `Dservice`."""
enum DservicesOrderBy {
  NATURAL
  DSERVICEID_ASC
  DSERVICEID_DESC
  DHOSTID_ASC
  DHOSTID_DESC
  TYPE_ASC
  TYPE_DESC
  KEY_ASC
  KEY_DESC
  VALUE_ASC
  VALUE_DESC
  PORT_ASC
  PORT_DESC
  STATUS_ASC
  STATUS_DESC
  LASTUP_ASC
  LASTUP_DESC
  LASTDOWN_ASC
  LASTDOWN_DESC
  DCHECKID_ASC
  DCHECKID_DESC
  IP_ASC
  IP_DESC
  DNS_ASC
  DNS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Escalation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  escalationid: BigInt!
  actionid: BigInt!
  triggerid: BigInt
  eventid: BigInt
  rEventid: BigInt
  nextcheck: Int!
  escStep: Int!
  status: Int!
  itemid: BigInt
}

"""
A condition to be used against `Escalation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EscalationCondition {
  """Checks for equality with the object’s `escalationid` field."""
  escalationid: BigInt

  """Checks for equality with the object’s `actionid` field."""
  actionid: BigInt

  """Checks for equality with the object’s `triggerid` field."""
  triggerid: BigInt

  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `rEventid` field."""
  rEventid: BigInt

  """Checks for equality with the object’s `nextcheck` field."""
  nextcheck: Int

  """Checks for equality with the object’s `escStep` field."""
  escStep: Int

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt
}

"""An input for mutations affecting `Escalation`"""
input EscalationInput {
  escalationid: BigInt!
  actionid: BigInt!
  triggerid: BigInt
  eventid: BigInt
  rEventid: BigInt
  nextcheck: Int
  escStep: Int
  status: Int
  itemid: BigInt
}

"""
Represents an update to a `Escalation`. Fields that are set will be updated.
"""
input EscalationPatch {
  escalationid: BigInt
  actionid: BigInt
  triggerid: BigInt
  eventid: BigInt
  rEventid: BigInt
  nextcheck: Int
  escStep: Int
  status: Int
  itemid: BigInt
}

"""A connection to a list of `Escalation` values."""
type EscalationsConnection {
  """A list of `Escalation` objects."""
  nodes: [Escalation]!

  """
  A list of edges which contains the `Escalation` and cursor to aid in pagination.
  """
  edges: [EscalationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Escalation` you could get from the connection."""
  totalCount: Int
}

"""A `Escalation` edge in the connection."""
type EscalationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Escalation` at the end of the edge."""
  node: Escalation
}

"""Methods to use when ordering `Escalation`."""
enum EscalationsOrderBy {
  NATURAL
  ESCALATIONID_ASC
  ESCALATIONID_DESC
  ACTIONID_ASC
  ACTIONID_DESC
  TRIGGERID_ASC
  TRIGGERID_DESC
  EVENTID_ASC
  EVENTID_DESC
  R_EVENTID_ASC
  R_EVENTID_DESC
  NEXTCHECK_ASC
  NEXTCHECK_DESC
  ESC_STEP_ASC
  ESC_STEP_DESC
  STATUS_ASC
  STATUS_DESC
  ITEMID_ASC
  ITEMID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Event implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  eventid: BigInt!
  source: Int!
  object: Int!
  objectid: BigInt!
  clock: Int!
  value: Int!
  acknowledged: Int!
  ns: Int!

  """Reads and enables pagination through a set of `Alert`."""
  alertsByEventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlertCondition
  ): AlertsConnection!

  """Reads and enables pagination through a set of `Acknowledge`."""
  acknowledgesByEventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Acknowledge`."""
    orderBy: [AcknowledgesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AcknowledgeCondition
  ): AcknowledgesConnection!

  """Reads and enables pagination through a set of `EventTag`."""
  eventTagsByEventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition
  ): EventTagsConnection!

  """Reads a single `Problem` that is related to this `Event`."""
  problemByEventid: Problem

  """Reads and enables pagination through a set of `Problem`."""
  problemsByEventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection! @deprecated(reason: "Please use problemByEventid instead")

  """Reads and enables pagination through a set of `Problem`."""
  problemsByREventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection!

  """Reads a single `EventRecovery` that is related to this `Event`."""
  eventRecoveryByEventid: EventRecovery

  """Reads and enables pagination through a set of `EventRecovery`."""
  eventRecoveriesByEventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventRecovery`."""
    orderBy: [EventRecoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRecoveryCondition
  ): EventRecoveriesConnection! @deprecated(reason: "Please use eventRecoveryByEventid instead")

  """Reads and enables pagination through a set of `EventRecovery`."""
  eventRecoveriesByREventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventRecovery`."""
    orderBy: [EventRecoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRecoveryCondition
  ): EventRecoveriesConnection!

  """Reads and enables pagination through a set of `EventRecovery`."""
  eventRecoveriesByCEventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventRecovery`."""
    orderBy: [EventRecoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRecoveryCondition
  ): EventRecoveriesConnection!
}

"""
A condition to be used against `Event` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input EventCondition {
  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `source` field."""
  source: Int

  """Checks for equality with the object’s `object` field."""
  object: Int

  """Checks for equality with the object’s `objectid` field."""
  objectid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `value` field."""
  value: Int

  """Checks for equality with the object’s `acknowledged` field."""
  acknowledged: Int

  """Checks for equality with the object’s `ns` field."""
  ns: Int
}

"""An input for mutations affecting `Event`"""
input EventInput {
  eventid: BigInt!
  source: Int
  object: Int
  objectid: BigInt
  clock: Int
  value: Int
  acknowledged: Int
  ns: Int
}

"""
Represents an update to a `Event`. Fields that are set will be updated.
"""
input EventPatch {
  eventid: BigInt
  source: Int
  object: Int
  objectid: BigInt
  clock: Int
  value: Int
  acknowledged: Int
  ns: Int
}

"""A connection to a list of `EventRecovery` values."""
type EventRecoveriesConnection {
  """A list of `EventRecovery` objects."""
  nodes: [EventRecovery]!

  """
  A list of edges which contains the `EventRecovery` and cursor to aid in pagination.
  """
  edges: [EventRecoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventRecovery` you could get from the connection."""
  totalCount: Int
}

"""A `EventRecovery` edge in the connection."""
type EventRecoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventRecovery` at the end of the edge."""
  node: EventRecovery
}

"""Methods to use when ordering `EventRecovery`."""
enum EventRecoveriesOrderBy {
  NATURAL
  EVENTID_ASC
  EVENTID_DESC
  R_EVENTID_ASC
  R_EVENTID_DESC
  C_EVENTID_ASC
  C_EVENTID_DESC
  CORRELATIONID_ASC
  CORRELATIONID_DESC
  USERID_ASC
  USERID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EventRecovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  eventid: BigInt!
  rEventid: BigInt!
  cEventid: BigInt
  correlationid: BigInt
  userid: BigInt

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByREventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByCEventid: Event
}

"""
A condition to be used against `EventRecovery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input EventRecoveryCondition {
  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `rEventid` field."""
  rEventid: BigInt

  """Checks for equality with the object’s `cEventid` field."""
  cEventid: BigInt

  """Checks for equality with the object’s `correlationid` field."""
  correlationid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt
}

"""An input for mutations affecting `EventRecovery`"""
input EventRecoveryInput {
  eventid: BigInt!
  rEventid: BigInt!
  cEventid: BigInt
  correlationid: BigInt
  userid: BigInt
}

"""
Represents an update to a `EventRecovery`. Fields that are set will be updated.
"""
input EventRecoveryPatch {
  eventid: BigInt
  rEventid: BigInt
  cEventid: BigInt
  correlationid: BigInt
  userid: BigInt
}

"""A connection to a list of `Event` values."""
type EventsConnection {
  """A list of `Event` objects."""
  nodes: [Event]!

  """
  A list of edges which contains the `Event` and cursor to aid in pagination.
  """
  edges: [EventsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Event` you could get from the connection."""
  totalCount: Int
}

"""A `Event` edge in the connection."""
type EventsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Event` at the end of the edge."""
  node: Event
}

"""Methods to use when ordering `Event`."""
enum EventsOrderBy {
  NATURAL
  EVENTID_ASC
  EVENTID_DESC
  SOURCE_ASC
  SOURCE_DESC
  OBJECT_ASC
  OBJECT_DESC
  OBJECTID_ASC
  OBJECTID_DESC
  CLOCK_ASC
  CLOCK_DESC
  VALUE_ASC
  VALUE_DESC
  ACKNOWLEDGED_ASC
  ACKNOWLEDGED_DESC
  NS_ASC
  NS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type EventTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  eventtagid: BigInt!
  eventid: BigInt!
  tag: String!
  value: String!

  """Reads a single `Event` that is related to this `EventTag`."""
  eventByEventid: Event
}

"""
A condition to be used against `EventTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input EventTagCondition {
  """Checks for equality with the object’s `eventtagid` field."""
  eventtagid: BigInt

  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `tag` field."""
  tag: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `EventTag`"""
input EventTagInput {
  eventtagid: BigInt!
  eventid: BigInt!
  tag: String
  value: String
}

"""
Represents an update to a `EventTag`. Fields that are set will be updated.
"""
input EventTagPatch {
  eventtagid: BigInt
  eventid: BigInt
  tag: String
  value: String
}

"""A connection to a list of `EventTag` values."""
type EventTagsConnection {
  """A list of `EventTag` objects."""
  nodes: [EventTag]!

  """
  A list of edges which contains the `EventTag` and cursor to aid in pagination.
  """
  edges: [EventTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `EventTag` you could get from the connection."""
  totalCount: Int
}

"""A `EventTag` edge in the connection."""
type EventTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `EventTag` at the end of the edge."""
  node: EventTag
}

"""Methods to use when ordering `EventTag`."""
enum EventTagsOrderBy {
  NATURAL
  EVENTTAGID_ASC
  EVENTTAGID_DESC
  EVENTID_ASC
  EVENTID_DESC
  TAG_ASC
  TAG_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Expression implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  expressionid: BigInt!
  regexpid: BigInt!
  expression: String!
  expressionType: Int!
  expDelimiter: String!
  caseSensitive: Int!

  """Reads a single `Regexp` that is related to this `Expression`."""
  regexpByRegexpid: Regexp
}

"""
A condition to be used against `Expression` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ExpressionCondition {
  """Checks for equality with the object’s `expressionid` field."""
  expressionid: BigInt

  """Checks for equality with the object’s `regexpid` field."""
  regexpid: BigInt

  """Checks for equality with the object’s `expression` field."""
  expression: String

  """Checks for equality with the object’s `expressionType` field."""
  expressionType: Int

  """Checks for equality with the object’s `expDelimiter` field."""
  expDelimiter: String

  """Checks for equality with the object’s `caseSensitive` field."""
  caseSensitive: Int
}

"""An input for mutations affecting `Expression`"""
input ExpressionInput {
  expressionid: BigInt!
  regexpid: BigInt!
  expression: String
  expressionType: Int
  expDelimiter: String
  caseSensitive: Int
}

"""
Represents an update to a `Expression`. Fields that are set will be updated.
"""
input ExpressionPatch {
  expressionid: BigInt
  regexpid: BigInt
  expression: String
  expressionType: Int
  expDelimiter: String
  caseSensitive: Int
}

"""A connection to a list of `Expression` values."""
type ExpressionsConnection {
  """A list of `Expression` objects."""
  nodes: [Expression]!

  """
  A list of edges which contains the `Expression` and cursor to aid in pagination.
  """
  edges: [ExpressionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Expression` you could get from the connection."""
  totalCount: Int
}

"""A `Expression` edge in the connection."""
type ExpressionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Expression` at the end of the edge."""
  node: Expression
}

"""Methods to use when ordering `Expression`."""
enum ExpressionsOrderBy {
  NATURAL
  EXPRESSIONID_ASC
  EXPRESSIONID_DESC
  REGEXPID_ASC
  REGEXPID_DESC
  EXPRESSION_ASC
  EXPRESSION_DESC
  EXPRESSION_TYPE_ASC
  EXPRESSION_TYPE_DESC
  EXP_DELIMITER_ASC
  EXP_DELIMITER_DESC
  CASE_SENSITIVE_ASC
  CASE_SENSITIVE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Fact implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: Int!
  host: String
  data: JSON!
  timestamp: Datetime
}

"""
A condition to be used against `Fact` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input FactCondition {
  """Checks for equality with the object’s `id` field."""
  id: Int

  """Checks for equality with the object’s `host` field."""
  host: String

  """Checks for equality with the object’s `data` field."""
  data: JSON

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
}

"""An input for mutations affecting `Fact`"""
input FactInput {
  id: Int
  host: String
  data: JSON!
  timestamp: Datetime
}

"""
Represents an update to a `Fact`. Fields that are set will be updated.
"""
input FactPatch {
  id: Int
  host: String
  data: JSON
  timestamp: Datetime
}

"""A connection to a list of `Fact` values."""
type FactsConnection {
  """A list of `Fact` objects."""
  nodes: [Fact]!

  """
  A list of edges which contains the `Fact` and cursor to aid in pagination.
  """
  edges: [FactsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Fact` you could get from the connection."""
  totalCount: Int
}

"""A `Fact` edge in the connection."""
type FactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Fact` at the end of the edge."""
  node: Fact
}

"""Methods to use when ordering `Fact`."""
enum FactsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  HOST_ASC
  HOST_DESC
  DATA_ASC
  DATA_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Function implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  functionid: BigInt!
  itemid: BigInt!
  triggerid: BigInt!
  function: String!
  parameter: String!

  """Reads a single `Item` that is related to this `Function`."""
  itemByItemid: Item

  """Reads a single `Trigger` that is related to this `Function`."""
  triggerByTriggerid: Trigger
}

"""
A condition to be used against `Function` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input FunctionCondition {
  """Checks for equality with the object’s `functionid` field."""
  functionid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `triggerid` field."""
  triggerid: BigInt

  """Checks for equality with the object’s `function` field."""
  function: String

  """Checks for equality with the object’s `parameter` field."""
  parameter: String
}

"""An input for mutations affecting `Function`"""
input FunctionInput {
  functionid: BigInt!
  itemid: BigInt!
  triggerid: BigInt!
  function: String
  parameter: String
}

"""
Represents an update to a `Function`. Fields that are set will be updated.
"""
input FunctionPatch {
  functionid: BigInt
  itemid: BigInt
  triggerid: BigInt
  function: String
  parameter: String
}

"""A connection to a list of `Function` values."""
type FunctionsConnection {
  """A list of `Function` objects."""
  nodes: [Function]!

  """
  A list of edges which contains the `Function` and cursor to aid in pagination.
  """
  edges: [FunctionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Function` you could get from the connection."""
  totalCount: Int
}

"""A `Function` edge in the connection."""
type FunctionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Function` at the end of the edge."""
  node: Function
}

"""Methods to use when ordering `Function`."""
enum FunctionsOrderBy {
  NATURAL
  FUNCTIONID_ASC
  FUNCTIONID_DESC
  ITEMID_ASC
  ITEMID_DESC
  TRIGGERID_ASC
  TRIGGERID_DESC
  FUNCTION_ASC
  FUNCTION_DESC
  PARAMETER_ASC
  PARAMETER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Globalmacro implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  globalmacroid: BigInt!
  macro: String!
  value: String!
}

"""
A condition to be used against `Globalmacro` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GlobalmacroCondition {
  """Checks for equality with the object’s `globalmacroid` field."""
  globalmacroid: BigInt

  """Checks for equality with the object’s `macro` field."""
  macro: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `Globalmacro`"""
input GlobalmacroInput {
  globalmacroid: BigInt!
  macro: String
  value: String
}

"""
Represents an update to a `Globalmacro`. Fields that are set will be updated.
"""
input GlobalmacroPatch {
  globalmacroid: BigInt
  macro: String
  value: String
}

"""A connection to a list of `Globalmacro` values."""
type GlobalmacrosConnection {
  """A list of `Globalmacro` objects."""
  nodes: [Globalmacro]!

  """
  A list of edges which contains the `Globalmacro` and cursor to aid in pagination.
  """
  edges: [GlobalmacrosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Globalmacro` you could get from the connection."""
  totalCount: Int
}

"""A `Globalmacro` edge in the connection."""
type GlobalmacrosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Globalmacro` at the end of the edge."""
  node: Globalmacro
}

"""Methods to use when ordering `Globalmacro`."""
enum GlobalmacrosOrderBy {
  NATURAL
  GLOBALMACROID_ASC
  GLOBALMACROID_DESC
  MACRO_ASC
  MACRO_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Globalvar implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  globalvarid: BigInt!
  snmpLastsize: Int!
}

"""
A condition to be used against `Globalvar` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GlobalvarCondition {
  """Checks for equality with the object’s `globalvarid` field."""
  globalvarid: BigInt

  """Checks for equality with the object’s `snmpLastsize` field."""
  snmpLastsize: Int
}

"""An input for mutations affecting `Globalvar`"""
input GlobalvarInput {
  globalvarid: BigInt!
  snmpLastsize: Int
}

"""
Represents an update to a `Globalvar`. Fields that are set will be updated.
"""
input GlobalvarPatch {
  globalvarid: BigInt
  snmpLastsize: Int
}

"""A connection to a list of `Globalvar` values."""
type GlobalvarsConnection {
  """A list of `Globalvar` objects."""
  nodes: [Globalvar]!

  """
  A list of edges which contains the `Globalvar` and cursor to aid in pagination.
  """
  edges: [GlobalvarsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Globalvar` you could get from the connection."""
  totalCount: Int
}

"""A `Globalvar` edge in the connection."""
type GlobalvarsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Globalvar` at the end of the edge."""
  node: Globalvar
}

"""Methods to use when ordering `Globalvar`."""
enum GlobalvarsOrderBy {
  NATURAL
  GLOBALVARID_ASC
  GLOBALVARID_DESC
  SNMP_LASTSIZE_ASC
  SNMP_LASTSIZE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Graph implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  graphid: BigInt!
  name: String!
  width: Int!
  height: Int!
  yaxismin: BigFloat!
  yaxismax: BigFloat!
  templateid: BigInt
  showWorkPeriod: Int!
  showTriggers: Int!
  graphtype: Int!
  showLegend: Int!
  show3D: Int!
  percentLeft: BigFloat!
  percentRight: BigFloat!
  yminType: Int!
  ymaxType: Int!
  yminItemid: BigInt
  ymaxItemid: BigInt
  flags: Int!

  """Reads a single `Graph` that is related to this `Graph`."""
  graphByTemplateid: Graph

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYminItemid: Item

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYmaxItemid: Item

  """Reads and enables pagination through a set of `Graph`."""
  graphsByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Graph`."""
    orderBy: [GraphsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphCondition
  ): GraphsConnection!

  """Reads and enables pagination through a set of `GraphsItem`."""
  graphsItemsByGraphid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GraphsItem`."""
    orderBy: [GraphsItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphsItemCondition
  ): GraphsItemsConnection!

  """Reads a single `GraphDiscovery` that is related to this `Graph`."""
  graphDiscoveryByGraphid: GraphDiscovery

  """Reads and enables pagination through a set of `GraphDiscovery`."""
  graphDiscoveriesByGraphid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GraphDiscovery`."""
    orderBy: [GraphDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphDiscoveryCondition
  ): GraphDiscoveriesConnection! @deprecated(reason: "Please use graphDiscoveryByGraphid instead")

  """Reads and enables pagination through a set of `GraphDiscovery`."""
  graphDiscoveriesByParentGraphid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GraphDiscovery`."""
    orderBy: [GraphDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphDiscoveryCondition
  ): GraphDiscoveriesConnection!
}

"""
A condition to be used against `Graph` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GraphCondition {
  """Checks for equality with the object’s `graphid` field."""
  graphid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `width` field."""
  width: Int

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `yaxismin` field."""
  yaxismin: BigFloat

  """Checks for equality with the object’s `yaxismax` field."""
  yaxismax: BigFloat

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt

  """Checks for equality with the object’s `showWorkPeriod` field."""
  showWorkPeriod: Int

  """Checks for equality with the object’s `showTriggers` field."""
  showTriggers: Int

  """Checks for equality with the object’s `graphtype` field."""
  graphtype: Int

  """Checks for equality with the object’s `showLegend` field."""
  showLegend: Int

  """Checks for equality with the object’s `show3D` field."""
  show3D: Int

  """Checks for equality with the object’s `percentLeft` field."""
  percentLeft: BigFloat

  """Checks for equality with the object’s `percentRight` field."""
  percentRight: BigFloat

  """Checks for equality with the object’s `yminType` field."""
  yminType: Int

  """Checks for equality with the object’s `ymaxType` field."""
  ymaxType: Int

  """Checks for equality with the object’s `yminItemid` field."""
  yminItemid: BigInt

  """Checks for equality with the object’s `ymaxItemid` field."""
  ymaxItemid: BigInt

  """Checks for equality with the object’s `flags` field."""
  flags: Int
}

"""A connection to a list of `GraphDiscovery` values."""
type GraphDiscoveriesConnection {
  """A list of `GraphDiscovery` objects."""
  nodes: [GraphDiscovery]!

  """
  A list of edges which contains the `GraphDiscovery` and cursor to aid in pagination.
  """
  edges: [GraphDiscoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GraphDiscovery` you could get from the connection.
  """
  totalCount: Int
}

"""A `GraphDiscovery` edge in the connection."""
type GraphDiscoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GraphDiscovery` at the end of the edge."""
  node: GraphDiscovery
}

"""Methods to use when ordering `GraphDiscovery`."""
enum GraphDiscoveriesOrderBy {
  NATURAL
  GRAPHID_ASC
  GRAPHID_DESC
  PARENT_GRAPHID_ASC
  PARENT_GRAPHID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type GraphDiscovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  graphid: BigInt!
  parentGraphid: BigInt!

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByGraphid: Graph

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByParentGraphid: Graph
}

"""
A condition to be used against `GraphDiscovery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GraphDiscoveryCondition {
  """Checks for equality with the object’s `graphid` field."""
  graphid: BigInt

  """Checks for equality with the object’s `parentGraphid` field."""
  parentGraphid: BigInt
}

"""An input for mutations affecting `GraphDiscovery`"""
input GraphDiscoveryInput {
  graphid: BigInt!
  parentGraphid: BigInt!
}

"""
Represents an update to a `GraphDiscovery`. Fields that are set will be updated.
"""
input GraphDiscoveryPatch {
  graphid: BigInt
  parentGraphid: BigInt
}

"""An input for mutations affecting `Graph`"""
input GraphInput {
  graphid: BigInt!
  name: String
  width: Int
  height: Int
  yaxismin: BigFloat
  yaxismax: BigFloat
  templateid: BigInt
  showWorkPeriod: Int
  showTriggers: Int
  graphtype: Int
  showLegend: Int
  show3D: Int
  percentLeft: BigFloat
  percentRight: BigFloat
  yminType: Int
  ymaxType: Int
  yminItemid: BigInt
  ymaxItemid: BigInt
  flags: Int
}

"""
Represents an update to a `Graph`. Fields that are set will be updated.
"""
input GraphPatch {
  graphid: BigInt
  name: String
  width: Int
  height: Int
  yaxismin: BigFloat
  yaxismax: BigFloat
  templateid: BigInt
  showWorkPeriod: Int
  showTriggers: Int
  graphtype: Int
  showLegend: Int
  show3D: Int
  percentLeft: BigFloat
  percentRight: BigFloat
  yminType: Int
  ymaxType: Int
  yminItemid: BigInt
  ymaxItemid: BigInt
  flags: Int
}

"""A connection to a list of `Graph` values."""
type GraphsConnection {
  """A list of `Graph` objects."""
  nodes: [Graph]!

  """
  A list of edges which contains the `Graph` and cursor to aid in pagination.
  """
  edges: [GraphsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Graph` you could get from the connection."""
  totalCount: Int
}

"""A `Graph` edge in the connection."""
type GraphsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Graph` at the end of the edge."""
  node: Graph
}

type GraphsItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  gitemid: BigInt!
  graphid: BigInt!
  itemid: BigInt!
  drawtype: Int!
  sortorder: Int!
  color: String!
  yaxisside: Int!
  calcFnc: Int!
  type: Int!

  """Reads a single `Graph` that is related to this `GraphsItem`."""
  graphByGraphid: Graph

  """Reads a single `Item` that is related to this `GraphsItem`."""
  itemByItemid: Item
}

"""
A condition to be used against `GraphsItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GraphsItemCondition {
  """Checks for equality with the object’s `gitemid` field."""
  gitemid: BigInt

  """Checks for equality with the object’s `graphid` field."""
  graphid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `drawtype` field."""
  drawtype: Int

  """Checks for equality with the object’s `sortorder` field."""
  sortorder: Int

  """Checks for equality with the object’s `color` field."""
  color: String

  """Checks for equality with the object’s `yaxisside` field."""
  yaxisside: Int

  """Checks for equality with the object’s `calcFnc` field."""
  calcFnc: Int

  """Checks for equality with the object’s `type` field."""
  type: Int
}

"""An input for mutations affecting `GraphsItem`"""
input GraphsItemInput {
  gitemid: BigInt!
  graphid: BigInt!
  itemid: BigInt!
  drawtype: Int
  sortorder: Int
  color: String
  yaxisside: Int
  calcFnc: Int
  type: Int
}

"""
Represents an update to a `GraphsItem`. Fields that are set will be updated.
"""
input GraphsItemPatch {
  gitemid: BigInt
  graphid: BigInt
  itemid: BigInt
  drawtype: Int
  sortorder: Int
  color: String
  yaxisside: Int
  calcFnc: Int
  type: Int
}

"""A connection to a list of `GraphsItem` values."""
type GraphsItemsConnection {
  """A list of `GraphsItem` objects."""
  nodes: [GraphsItem]!

  """
  A list of edges which contains the `GraphsItem` and cursor to aid in pagination.
  """
  edges: [GraphsItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GraphsItem` you could get from the connection."""
  totalCount: Int
}

"""A `GraphsItem` edge in the connection."""
type GraphsItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GraphsItem` at the end of the edge."""
  node: GraphsItem
}

"""Methods to use when ordering `GraphsItem`."""
enum GraphsItemsOrderBy {
  NATURAL
  GITEMID_ASC
  GITEMID_DESC
  GRAPHID_ASC
  GRAPHID_DESC
  ITEMID_ASC
  ITEMID_DESC
  DRAWTYPE_ASC
  DRAWTYPE_DESC
  SORTORDER_ASC
  SORTORDER_DESC
  COLOR_ASC
  COLOR_DESC
  YAXISSIDE_ASC
  YAXISSIDE_DESC
  CALC_FNC_ASC
  CALC_FNC_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Graph`."""
enum GraphsOrderBy {
  NATURAL
  GRAPHID_ASC
  GRAPHID_DESC
  NAME_ASC
  NAME_DESC
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  YAXISMIN_ASC
  YAXISMIN_DESC
  YAXISMAX_ASC
  YAXISMAX_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  SHOW_WORK_PERIOD_ASC
  SHOW_WORK_PERIOD_DESC
  SHOW_TRIGGERS_ASC
  SHOW_TRIGGERS_DESC
  GRAPHTYPE_ASC
  GRAPHTYPE_DESC
  SHOW_LEGEND_ASC
  SHOW_LEGEND_DESC
  SHOW_3D_ASC
  SHOW_3D_DESC
  PERCENT_LEFT_ASC
  PERCENT_LEFT_DESC
  PERCENT_RIGHT_ASC
  PERCENT_RIGHT_DESC
  YMIN_TYPE_ASC
  YMIN_TYPE_DESC
  YMAX_TYPE_ASC
  YMAX_TYPE_DESC
  YMIN_ITEMID_ASC
  YMIN_ITEMID_DESC
  YMAX_ITEMID_ASC
  YMAX_ITEMID_DESC
  FLAGS_ASC
  FLAGS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type GraphTheme implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  graphthemeid: BigInt!
  theme: String!
  backgroundcolor: String!
  graphcolor: String!
  gridcolor: String!
  maingridcolor: String!
  gridbordercolor: String!
  textcolor: String!
  highlightcolor: String!
  leftpercentilecolor: String!
  rightpercentilecolor: String!
  nonworktimecolor: String!
}

"""
A condition to be used against `GraphTheme` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input GraphThemeCondition {
  """Checks for equality with the object’s `graphthemeid` field."""
  graphthemeid: BigInt

  """Checks for equality with the object’s `theme` field."""
  theme: String

  """Checks for equality with the object’s `backgroundcolor` field."""
  backgroundcolor: String

  """Checks for equality with the object’s `graphcolor` field."""
  graphcolor: String

  """Checks for equality with the object’s `gridcolor` field."""
  gridcolor: String

  """Checks for equality with the object’s `maingridcolor` field."""
  maingridcolor: String

  """Checks for equality with the object’s `gridbordercolor` field."""
  gridbordercolor: String

  """Checks for equality with the object’s `textcolor` field."""
  textcolor: String

  """Checks for equality with the object’s `highlightcolor` field."""
  highlightcolor: String

  """Checks for equality with the object’s `leftpercentilecolor` field."""
  leftpercentilecolor: String

  """Checks for equality with the object’s `rightpercentilecolor` field."""
  rightpercentilecolor: String

  """Checks for equality with the object’s `nonworktimecolor` field."""
  nonworktimecolor: String
}

"""An input for mutations affecting `GraphTheme`"""
input GraphThemeInput {
  graphthemeid: BigInt!
  theme: String
  backgroundcolor: String
  graphcolor: String
  gridcolor: String
  maingridcolor: String
  gridbordercolor: String
  textcolor: String
  highlightcolor: String
  leftpercentilecolor: String
  rightpercentilecolor: String
  nonworktimecolor: String
}

"""
Represents an update to a `GraphTheme`. Fields that are set will be updated.
"""
input GraphThemePatch {
  graphthemeid: BigInt
  theme: String
  backgroundcolor: String
  graphcolor: String
  gridcolor: String
  maingridcolor: String
  gridbordercolor: String
  textcolor: String
  highlightcolor: String
  leftpercentilecolor: String
  rightpercentilecolor: String
  nonworktimecolor: String
}

"""A connection to a list of `GraphTheme` values."""
type GraphThemesConnection {
  """A list of `GraphTheme` objects."""
  nodes: [GraphTheme]!

  """
  A list of edges which contains the `GraphTheme` and cursor to aid in pagination.
  """
  edges: [GraphThemesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `GraphTheme` you could get from the connection."""
  totalCount: Int
}

"""A `GraphTheme` edge in the connection."""
type GraphThemesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GraphTheme` at the end of the edge."""
  node: GraphTheme
}

"""Methods to use when ordering `GraphTheme`."""
enum GraphThemesOrderBy {
  NATURAL
  GRAPHTHEMEID_ASC
  GRAPHTHEMEID_DESC
  THEME_ASC
  THEME_DESC
  BACKGROUNDCOLOR_ASC
  BACKGROUNDCOLOR_DESC
  GRAPHCOLOR_ASC
  GRAPHCOLOR_DESC
  GRIDCOLOR_ASC
  GRIDCOLOR_DESC
  MAINGRIDCOLOR_ASC
  MAINGRIDCOLOR_DESC
  GRIDBORDERCOLOR_ASC
  GRIDBORDERCOLOR_DESC
  TEXTCOLOR_ASC
  TEXTCOLOR_DESC
  HIGHLIGHTCOLOR_ASC
  HIGHLIGHTCOLOR_DESC
  LEFTPERCENTILECOLOR_ASC
  LEFTPERCENTILECOLOR_DESC
  RIGHTPERCENTILECOLOR_ASC
  RIGHTPERCENTILECOLOR_DESC
  NONWORKTIMECOLOR_ASC
  NONWORKTIMECOLOR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Group implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  groupid: BigInt!
  name: String!
  internal: Int!
  flags: Int!

  """Reads and enables pagination through a set of `GroupPrototype`."""
  groupPrototypesByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupPrototype`."""
    orderBy: [GroupPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPrototypeCondition
  ): GroupPrototypesConnection!

  """Reads a single `GroupDiscovery` that is related to this `Group`."""
  groupDiscoveryByGroupid: GroupDiscovery

  """Reads and enables pagination through a set of `GroupDiscovery`."""
  groupDiscoveriesByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupDiscovery`."""
    orderBy: [GroupDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupDiscoveryCondition
  ): GroupDiscoveriesConnection! @deprecated(reason: "Please use groupDiscoveryByGroupid instead")

  """Reads and enables pagination through a set of `Script`."""
  scriptsByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition
  ): ScriptsConnection!

  """Reads and enables pagination through a set of `OpcommandGrp`."""
  opcommandGrpsByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpcommandGrp`."""
    orderBy: [OpcommandGrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandGrpCondition
  ): OpcommandGrpsConnection!

  """Reads and enables pagination through a set of `Opgroup`."""
  opgroupsByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opgroup`."""
    orderBy: [OpgroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpgroupCondition
  ): OpgroupsConnection!

  """Reads and enables pagination through a set of `Config`."""
  configsByDiscoveryGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Config`."""
    orderBy: [ConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConfigCondition
  ): ConfigsConnection!

  """Reads and enables pagination through a set of `HostsGroup`."""
  hostsGroupsByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostsGroup`."""
    orderBy: [HostsGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostsGroupCondition
  ): HostsGroupsConnection!

  """Reads and enables pagination through a set of `Right`."""
  rightsById(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Right`."""
    orderBy: [RightsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RightCondition
  ): RightsConnection!

  """Reads and enables pagination through a set of `MaintenancesGroup`."""
  maintenancesGroupsByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesGroup`."""
    orderBy: [MaintenancesGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesGroupCondition
  ): MaintenancesGroupsConnection!

  """Reads and enables pagination through a set of `CorrConditionGroup`."""
  corrConditionGroupsByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionGroup`."""
    orderBy: [CorrConditionGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionGroupCondition
  ): CorrConditionGroupsConnection!
}

"""
A condition to be used against `Group` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input GroupCondition {
  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `internal` field."""
  internal: Int

  """Checks for equality with the object’s `flags` field."""
  flags: Int
}

"""A connection to a list of `GroupDiscovery` values."""
type GroupDiscoveriesConnection {
  """A list of `GroupDiscovery` objects."""
  nodes: [GroupDiscovery]!

  """
  A list of edges which contains the `GroupDiscovery` and cursor to aid in pagination.
  """
  edges: [GroupDiscoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GroupDiscovery` you could get from the connection.
  """
  totalCount: Int
}

"""A `GroupDiscovery` edge in the connection."""
type GroupDiscoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupDiscovery` at the end of the edge."""
  node: GroupDiscovery
}

"""Methods to use when ordering `GroupDiscovery`."""
enum GroupDiscoveriesOrderBy {
  NATURAL
  GROUPID_ASC
  GROUPID_DESC
  PARENT_GROUP_PROTOTYPEID_ASC
  PARENT_GROUP_PROTOTYPEID_DESC
  NAME_ASC
  NAME_DESC
  LASTCHECK_ASC
  LASTCHECK_DESC
  TS_DELETE_ASC
  TS_DELETE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type GroupDiscovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  groupid: BigInt!
  parentGroupPrototypeid: BigInt!
  name: String!
  lastcheck: Int!
  tsDelete: Int!

  """Reads a single `Group` that is related to this `GroupDiscovery`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupDiscovery`.
  """
  groupPrototypeByParentGroupPrototypeid: GroupPrototype
}

"""
A condition to be used against `GroupDiscovery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GroupDiscoveryCondition {
  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt

  """Checks for equality with the object’s `parentGroupPrototypeid` field."""
  parentGroupPrototypeid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `lastcheck` field."""
  lastcheck: Int

  """Checks for equality with the object’s `tsDelete` field."""
  tsDelete: Int
}

"""An input for mutations affecting `GroupDiscovery`"""
input GroupDiscoveryInput {
  groupid: BigInt!
  parentGroupPrototypeid: BigInt!
  name: String
  lastcheck: Int
  tsDelete: Int
}

"""
Represents an update to a `GroupDiscovery`. Fields that are set will be updated.
"""
input GroupDiscoveryPatch {
  groupid: BigInt
  parentGroupPrototypeid: BigInt
  name: String
  lastcheck: Int
  tsDelete: Int
}

"""An input for mutations affecting `Group`"""
input GroupInput {
  groupid: BigInt!
  name: String
  internal: Int
  flags: Int
}

"""
Represents an update to a `Group`. Fields that are set will be updated.
"""
input GroupPatch {
  groupid: BigInt
  name: String
  internal: Int
  flags: Int
}

type GroupPrototype implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  groupPrototypeid: BigInt!
  hostid: BigInt!
  name: String!
  groupid: BigInt
  templateid: BigInt

  """Reads a single `Host` that is related to this `GroupPrototype`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `GroupPrototype`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupPrototype`.
  """
  groupPrototypeByTemplateid: GroupPrototype

  """Reads and enables pagination through a set of `GroupPrototype`."""
  groupPrototypesByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupPrototype`."""
    orderBy: [GroupPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPrototypeCondition
  ): GroupPrototypesConnection!

  """Reads and enables pagination through a set of `GroupDiscovery`."""
  groupDiscoveriesByParentGroupPrototypeid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupDiscovery`."""
    orderBy: [GroupDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupDiscoveryCondition
  ): GroupDiscoveriesConnection!
}

"""
A condition to be used against `GroupPrototype` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input GroupPrototypeCondition {
  """Checks for equality with the object’s `groupPrototypeid` field."""
  groupPrototypeid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt
}

"""An input for mutations affecting `GroupPrototype`"""
input GroupPrototypeInput {
  groupPrototypeid: BigInt!
  hostid: BigInt!
  name: String
  groupid: BigInt
  templateid: BigInt
}

"""
Represents an update to a `GroupPrototype`. Fields that are set will be updated.
"""
input GroupPrototypePatch {
  groupPrototypeid: BigInt
  hostid: BigInt
  name: String
  groupid: BigInt
  templateid: BigInt
}

"""A connection to a list of `GroupPrototype` values."""
type GroupPrototypesConnection {
  """A list of `GroupPrototype` objects."""
  nodes: [GroupPrototype]!

  """
  A list of edges which contains the `GroupPrototype` and cursor to aid in pagination.
  """
  edges: [GroupPrototypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `GroupPrototype` you could get from the connection.
  """
  totalCount: Int
}

"""A `GroupPrototype` edge in the connection."""
type GroupPrototypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `GroupPrototype` at the end of the edge."""
  node: GroupPrototype
}

"""Methods to use when ordering `GroupPrototype`."""
enum GroupPrototypesOrderBy {
  NATURAL
  GROUP_PROTOTYPEID_ASC
  GROUP_PROTOTYPEID_DESC
  HOSTID_ASC
  HOSTID_DESC
  NAME_ASC
  NAME_DESC
  GROUPID_ASC
  GROUPID_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Group` values."""
type GroupsConnection {
  """A list of `Group` objects."""
  nodes: [Group]!

  """
  A list of edges which contains the `Group` and cursor to aid in pagination.
  """
  edges: [GroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Group` you could get from the connection."""
  totalCount: Int
}

"""A `Group` edge in the connection."""
type GroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Group` at the end of the edge."""
  node: Group
}

"""Methods to use when ordering `Group`."""
enum GroupsOrderBy {
  NATURAL
  GROUPID_ASC
  GROUPID_DESC
  NAME_ASC
  NAME_DESC
  INTERNAL_ASC
  INTERNAL_DESC
  FLAGS_ASC
  FLAGS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `History` values."""
type HistoriesConnection {
  """A list of `History` objects."""
  nodes: [History]!

  """
  A list of edges which contains the `History` and cursor to aid in pagination.
  """
  edges: [HistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `History` you could get from the connection."""
  totalCount: Int
}

"""A `History` edge in the connection."""
type HistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `History` at the end of the edge."""
  node: History
}

"""Methods to use when ordering `History`."""
enum HistoriesOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  VALUE_ASC
  VALUE_DESC
  NS_ASC
  NS_DESC
}

type History {
  itemid: BigInt!
  clock: Int!
  value: BigFloat!
  ns: Int!
}

"""
A condition to be used against `History` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input HistoryCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat

  """Checks for equality with the object’s `ns` field."""
  ns: Int
}

"""An input for mutations affecting `History`"""
input HistoryInput {
  itemid: BigInt!
  clock: Int
  value: BigFloat
  ns: Int
}

type HistoryLog {
  itemid: BigInt!
  clock: Int!
  timestamp: Int!
  source: String!
  severity: Int!
  value: String!
  logeventid: Int!
  ns: Int!
}

"""
A condition to be used against `HistoryLog` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HistoryLogCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Int

  """Checks for equality with the object’s `source` field."""
  source: String

  """Checks for equality with the object’s `severity` field."""
  severity: Int

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `logeventid` field."""
  logeventid: Int

  """Checks for equality with the object’s `ns` field."""
  ns: Int
}

"""An input for mutations affecting `HistoryLog`"""
input HistoryLogInput {
  itemid: BigInt!
  clock: Int
  timestamp: Int
  source: String
  severity: Int
  value: String
  logeventid: Int
  ns: Int
}

"""A connection to a list of `HistoryLog` values."""
type HistoryLogsConnection {
  """A list of `HistoryLog` objects."""
  nodes: [HistoryLog]!

  """
  A list of edges which contains the `HistoryLog` and cursor to aid in pagination.
  """
  edges: [HistoryLogsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HistoryLog` you could get from the connection."""
  totalCount: Int
}

"""A `HistoryLog` edge in the connection."""
type HistoryLogsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HistoryLog` at the end of the edge."""
  node: HistoryLog
}

"""Methods to use when ordering `HistoryLog`."""
enum HistoryLogsOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  SOURCE_ASC
  SOURCE_DESC
  SEVERITY_ASC
  SEVERITY_DESC
  VALUE_ASC
  VALUE_DESC
  LOGEVENTID_ASC
  LOGEVENTID_DESC
  NS_ASC
  NS_DESC
}

type HistoryStr {
  itemid: BigInt!
  clock: Int!
  value: String!
  ns: Int!
}

"""
A condition to be used against `HistoryStr` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HistoryStrCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `ns` field."""
  ns: Int
}

"""An input for mutations affecting `HistoryStr`"""
input HistoryStrInput {
  itemid: BigInt!
  clock: Int
  value: String
  ns: Int
}

"""A connection to a list of `HistoryStr` values."""
type HistoryStrsConnection {
  """A list of `HistoryStr` objects."""
  nodes: [HistoryStr]!

  """
  A list of edges which contains the `HistoryStr` and cursor to aid in pagination.
  """
  edges: [HistoryStrsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HistoryStr` you could get from the connection."""
  totalCount: Int
}

"""A `HistoryStr` edge in the connection."""
type HistoryStrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HistoryStr` at the end of the edge."""
  node: HistoryStr
}

"""Methods to use when ordering `HistoryStr`."""
enum HistoryStrsOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  VALUE_ASC
  VALUE_DESC
  NS_ASC
  NS_DESC
}

type HistoryText {
  itemid: BigInt!
  clock: Int!
  value: String!
  ns: Int!
}

"""
A condition to be used against `HistoryText` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HistoryTextCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `ns` field."""
  ns: Int
}

"""An input for mutations affecting `HistoryText`"""
input HistoryTextInput {
  itemid: BigInt!
  clock: Int
  value: String
  ns: Int
}

"""A connection to a list of `HistoryText` values."""
type HistoryTextsConnection {
  """A list of `HistoryText` objects."""
  nodes: [HistoryText]!

  """
  A list of edges which contains the `HistoryText` and cursor to aid in pagination.
  """
  edges: [HistoryTextsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HistoryText` you could get from the connection."""
  totalCount: Int
}

"""A `HistoryText` edge in the connection."""
type HistoryTextsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HistoryText` at the end of the edge."""
  node: HistoryText
}

"""Methods to use when ordering `HistoryText`."""
enum HistoryTextsOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  VALUE_ASC
  VALUE_DESC
  NS_ASC
  NS_DESC
}

type HistoryUint {
  itemid: BigInt!
  clock: Int!
  value: BigFloat!
  ns: Int!
}

"""
A condition to be used against `HistoryUint` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HistoryUintCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `value` field."""
  value: BigFloat

  """Checks for equality with the object’s `ns` field."""
  ns: Int
}

"""An input for mutations affecting `HistoryUint`"""
input HistoryUintInput {
  itemid: BigInt!
  clock: Int
  value: BigFloat
  ns: Int
}

"""A connection to a list of `HistoryUint` values."""
type HistoryUintsConnection {
  """A list of `HistoryUint` objects."""
  nodes: [HistoryUint]!

  """
  A list of edges which contains the `HistoryUint` and cursor to aid in pagination.
  """
  edges: [HistoryUintsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HistoryUint` you could get from the connection."""
  totalCount: Int
}

"""A `HistoryUint` edge in the connection."""
type HistoryUintsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HistoryUint` at the end of the edge."""
  node: HistoryUint
}

"""Methods to use when ordering `HistoryUint`."""
enum HistoryUintsOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  VALUE_ASC
  VALUE_DESC
  NS_ASC
  NS_DESC
}

type Host implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hostid: BigInt!
  proxyHostid: BigInt
  host: String!
  status: Int!
  disableUntil: Int!
  error: String!
  available: Int!
  errorsFrom: Int!
  lastaccess: Int!
  ipmiAuthtype: Int!
  ipmiPrivilege: Int!
  ipmiUsername: String!
  ipmiPassword: String!
  ipmiDisableUntil: Int!
  ipmiAvailable: Int!
  snmpDisableUntil: Int!
  snmpAvailable: Int!
  maintenanceid: BigInt
  maintenanceStatus: Int!
  maintenanceType: Int!
  maintenanceFrom: Int!
  ipmiErrorsFrom: Int!
  snmpErrorsFrom: Int!
  ipmiError: String!
  snmpError: String!
  jmxDisableUntil: Int!
  jmxAvailable: Int!
  jmxErrorsFrom: Int!
  jmxError: String!
  name: String!
  flags: Int!
  templateid: BigInt
  description: String!
  tlsConnect: Int!
  tlsAccept: Int!
  tlsIssuer: String!
  tlsSubject: String!
  tlsPskIdentity: String!
  tlsPsk: String!

  """Reads a single `Host` that is related to this `Host`."""
  hostByProxyHostid: Host

  """Reads a single `Maintenance` that is related to this `Host`."""
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `Host`."""
  hostByTemplateid: Host

  """Reads and enables pagination through a set of `Host`."""
  hostsByProxyHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Host`."""
    orderBy: [HostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostCondition
  ): HostsConnection!

  """Reads and enables pagination through a set of `Host`."""
  hostsByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Host`."""
    orderBy: [HostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostCondition
  ): HostsConnection!

  """Reads and enables pagination through a set of `GroupPrototype`."""
  groupPrototypesByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupPrototype`."""
    orderBy: [GroupPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPrototypeCondition
  ): GroupPrototypesConnection!

  """Reads and enables pagination through a set of `Screen`."""
  screensByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Screen`."""
    orderBy: [ScreensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenCondition
  ): ScreensConnection!

  """Reads and enables pagination through a set of `Drule`."""
  drulesByProxyHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Drule`."""
    orderBy: [DrulesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DruleCondition
  ): DrulesConnection!

  """Reads and enables pagination through a set of `Application`."""
  applicationsByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection!

  """Reads and enables pagination through a set of `Httptest`."""
  httptestsByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httptest`."""
    orderBy: [HttptestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttptestCondition
  ): HttptestsConnection!

  """Reads and enables pagination through a set of `Interface`."""
  interfacesByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Interface`."""
    orderBy: [InterfacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterfaceCondition
  ): InterfacesConnection!

  """Reads and enables pagination through a set of `Item`."""
  itemsByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition
  ): ItemsConnection!

  """Reads and enables pagination through a set of `OpcommandHst`."""
  opcommandHstsByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpcommandHst`."""
    orderBy: [OpcommandHstsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandHstCondition
  ): OpcommandHstsConnection!

  """Reads and enables pagination through a set of `Optemplate`."""
  optemplatesByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Optemplate`."""
    orderBy: [OptemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OptemplateCondition
  ): OptemplatesConnection!

  """Reads and enables pagination through a set of `Hostmacro`."""
  hostmacrosByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Hostmacro`."""
    orderBy: [HostmacrosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostmacroCondition
  ): HostmacrosConnection!

  """Reads and enables pagination through a set of `HostsGroup`."""
  hostsGroupsByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostsGroup`."""
    orderBy: [HostsGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostsGroupCondition
  ): HostsGroupsConnection!

  """Reads and enables pagination through a set of `HostsTemplate`."""
  hostsTemplatesByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostsTemplate`."""
    orderBy: [HostsTemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostsTemplateCondition
  ): HostsTemplatesConnection!

  """Reads and enables pagination through a set of `HostsTemplate`."""
  hostsTemplatesByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostsTemplate`."""
    orderBy: [HostsTemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostsTemplateCondition
  ): HostsTemplatesConnection!

  """Reads and enables pagination through a set of `MaintenancesHost`."""
  maintenancesHostsByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesHost`."""
    orderBy: [MaintenancesHostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesHostCondition
  ): MaintenancesHostsConnection!

  """Reads and enables pagination through a set of `AutoregHost`."""
  autoregHostsByProxyHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AutoregHost`."""
    orderBy: [AutoregHostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AutoregHostCondition
  ): AutoregHostsConnection!

  """Reads a single `HostInventory` that is related to this `Host`."""
  hostInventoryByHostid: HostInventory

  """Reads and enables pagination through a set of `HostInventory`."""
  hostInventoriesByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostInventory`."""
    orderBy: [HostInventoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostInventoryCondition
  ): HostInventoriesConnection! @deprecated(reason: "Please use hostInventoryByHostid instead")

  """Reads a single `HostDiscovery` that is related to this `Host`."""
  hostDiscoveryByHostid: HostDiscovery

  """Reads and enables pagination through a set of `HostDiscovery`."""
  hostDiscoveriesByHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostDiscovery`."""
    orderBy: [HostDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostDiscoveryCondition
  ): HostDiscoveriesConnection! @deprecated(reason: "Please use hostDiscoveryByHostid instead")

  """Reads and enables pagination through a set of `HostDiscovery`."""
  hostDiscoveriesByParentHostid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostDiscovery`."""
    orderBy: [HostDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostDiscoveryCondition
  ): HostDiscoveriesConnection!
}

"""
A condition to be used against `Host` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input HostCondition {
  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `proxyHostid` field."""
  proxyHostid: BigInt

  """Checks for equality with the object’s `host` field."""
  host: String

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `disableUntil` field."""
  disableUntil: Int

  """Checks for equality with the object’s `error` field."""
  error: String

  """Checks for equality with the object’s `available` field."""
  available: Int

  """Checks for equality with the object’s `errorsFrom` field."""
  errorsFrom: Int

  """Checks for equality with the object’s `lastaccess` field."""
  lastaccess: Int

  """Checks for equality with the object’s `ipmiAuthtype` field."""
  ipmiAuthtype: Int

  """Checks for equality with the object’s `ipmiPrivilege` field."""
  ipmiPrivilege: Int

  """Checks for equality with the object’s `ipmiUsername` field."""
  ipmiUsername: String

  """Checks for equality with the object’s `ipmiPassword` field."""
  ipmiPassword: String

  """Checks for equality with the object’s `ipmiDisableUntil` field."""
  ipmiDisableUntil: Int

  """Checks for equality with the object’s `ipmiAvailable` field."""
  ipmiAvailable: Int

  """Checks for equality with the object’s `snmpDisableUntil` field."""
  snmpDisableUntil: Int

  """Checks for equality with the object’s `snmpAvailable` field."""
  snmpAvailable: Int

  """Checks for equality with the object’s `maintenanceid` field."""
  maintenanceid: BigInt

  """Checks for equality with the object’s `maintenanceStatus` field."""
  maintenanceStatus: Int

  """Checks for equality with the object’s `maintenanceType` field."""
  maintenanceType: Int

  """Checks for equality with the object’s `maintenanceFrom` field."""
  maintenanceFrom: Int

  """Checks for equality with the object’s `ipmiErrorsFrom` field."""
  ipmiErrorsFrom: Int

  """Checks for equality with the object’s `snmpErrorsFrom` field."""
  snmpErrorsFrom: Int

  """Checks for equality with the object’s `ipmiError` field."""
  ipmiError: String

  """Checks for equality with the object’s `snmpError` field."""
  snmpError: String

  """Checks for equality with the object’s `jmxDisableUntil` field."""
  jmxDisableUntil: Int

  """Checks for equality with the object’s `jmxAvailable` field."""
  jmxAvailable: Int

  """Checks for equality with the object’s `jmxErrorsFrom` field."""
  jmxErrorsFrom: Int

  """Checks for equality with the object’s `jmxError` field."""
  jmxError: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `flags` field."""
  flags: Int

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `tlsConnect` field."""
  tlsConnect: Int

  """Checks for equality with the object’s `tlsAccept` field."""
  tlsAccept: Int

  """Checks for equality with the object’s `tlsIssuer` field."""
  tlsIssuer: String

  """Checks for equality with the object’s `tlsSubject` field."""
  tlsSubject: String

  """Checks for equality with the object’s `tlsPskIdentity` field."""
  tlsPskIdentity: String

  """Checks for equality with the object’s `tlsPsk` field."""
  tlsPsk: String
}

"""A connection to a list of `HostDiscovery` values."""
type HostDiscoveriesConnection {
  """A list of `HostDiscovery` objects."""
  nodes: [HostDiscovery]!

  """
  A list of edges which contains the `HostDiscovery` and cursor to aid in pagination.
  """
  edges: [HostDiscoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HostDiscovery` you could get from the connection."""
  totalCount: Int
}

"""A `HostDiscovery` edge in the connection."""
type HostDiscoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HostDiscovery` at the end of the edge."""
  node: HostDiscovery
}

"""Methods to use when ordering `HostDiscovery`."""
enum HostDiscoveriesOrderBy {
  NATURAL
  HOSTID_ASC
  HOSTID_DESC
  PARENT_HOSTID_ASC
  PARENT_HOSTID_DESC
  PARENT_ITEMID_ASC
  PARENT_ITEMID_DESC
  HOST_ASC
  HOST_DESC
  LASTCHECK_ASC
  LASTCHECK_DESC
  TS_DELETE_ASC
  TS_DELETE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type HostDiscovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hostid: BigInt!
  parentHostid: BigInt
  parentItemid: BigInt
  host: String!
  lastcheck: Int!
  tsDelete: Int!

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByParentHostid: Host

  """Reads a single `Item` that is related to this `HostDiscovery`."""
  itemByParentItemid: Item
}

"""
A condition to be used against `HostDiscovery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HostDiscoveryCondition {
  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `parentHostid` field."""
  parentHostid: BigInt

  """Checks for equality with the object’s `parentItemid` field."""
  parentItemid: BigInt

  """Checks for equality with the object’s `host` field."""
  host: String

  """Checks for equality with the object’s `lastcheck` field."""
  lastcheck: Int

  """Checks for equality with the object’s `tsDelete` field."""
  tsDelete: Int
}

"""An input for mutations affecting `HostDiscovery`"""
input HostDiscoveryInput {
  hostid: BigInt!
  parentHostid: BigInt
  parentItemid: BigInt
  host: String
  lastcheck: Int
  tsDelete: Int
}

"""
Represents an update to a `HostDiscovery`. Fields that are set will be updated.
"""
input HostDiscoveryPatch {
  hostid: BigInt
  parentHostid: BigInt
  parentItemid: BigInt
  host: String
  lastcheck: Int
  tsDelete: Int
}

"""An input for mutations affecting `Host`"""
input HostInput {
  hostid: BigInt!
  proxyHostid: BigInt
  host: String
  status: Int
  disableUntil: Int
  error: String
  available: Int
  errorsFrom: Int
  lastaccess: Int
  ipmiAuthtype: Int
  ipmiPrivilege: Int
  ipmiUsername: String
  ipmiPassword: String
  ipmiDisableUntil: Int
  ipmiAvailable: Int
  snmpDisableUntil: Int
  snmpAvailable: Int
  maintenanceid: BigInt
  maintenanceStatus: Int
  maintenanceType: Int
  maintenanceFrom: Int
  ipmiErrorsFrom: Int
  snmpErrorsFrom: Int
  ipmiError: String
  snmpError: String
  jmxDisableUntil: Int
  jmxAvailable: Int
  jmxErrorsFrom: Int
  jmxError: String
  name: String
  flags: Int
  templateid: BigInt
  description: String
  tlsConnect: Int
  tlsAccept: Int
  tlsIssuer: String
  tlsSubject: String
  tlsPskIdentity: String
  tlsPsk: String
}

"""A connection to a list of `HostInventory` values."""
type HostInventoriesConnection {
  """A list of `HostInventory` objects."""
  nodes: [HostInventory]!

  """
  A list of edges which contains the `HostInventory` and cursor to aid in pagination.
  """
  edges: [HostInventoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HostInventory` you could get from the connection."""
  totalCount: Int
}

"""A `HostInventory` edge in the connection."""
type HostInventoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HostInventory` at the end of the edge."""
  node: HostInventory
}

"""Methods to use when ordering `HostInventory`."""
enum HostInventoriesOrderBy {
  NATURAL
  HOSTID_ASC
  HOSTID_DESC
  INVENTORY_MODE_ASC
  INVENTORY_MODE_DESC
  TYPE_ASC
  TYPE_DESC
  TYPE_FULL_ASC
  TYPE_FULL_DESC
  NAME_ASC
  NAME_DESC
  ALIAS_ASC
  ALIAS_DESC
  OS_ASC
  OS_DESC
  OS_FULL_ASC
  OS_FULL_DESC
  OS_SHORT_ASC
  OS_SHORT_DESC
  SERIALNO_A_ASC
  SERIALNO_A_DESC
  SERIALNO_B_ASC
  SERIALNO_B_DESC
  TAG_ASC
  TAG_DESC
  ASSET_TAG_ASC
  ASSET_TAG_DESC
  MACADDRESS_A_ASC
  MACADDRESS_A_DESC
  MACADDRESS_B_ASC
  MACADDRESS_B_DESC
  HARDWARE_ASC
  HARDWARE_DESC
  HARDWARE_FULL_ASC
  HARDWARE_FULL_DESC
  SOFTWARE_ASC
  SOFTWARE_DESC
  SOFTWARE_FULL_ASC
  SOFTWARE_FULL_DESC
  SOFTWARE_APP_A_ASC
  SOFTWARE_APP_A_DESC
  SOFTWARE_APP_B_ASC
  SOFTWARE_APP_B_DESC
  SOFTWARE_APP_C_ASC
  SOFTWARE_APP_C_DESC
  SOFTWARE_APP_D_ASC
  SOFTWARE_APP_D_DESC
  SOFTWARE_APP_E_ASC
  SOFTWARE_APP_E_DESC
  CONTACT_ASC
  CONTACT_DESC
  LOCATION_ASC
  LOCATION_DESC
  LOCATION_LAT_ASC
  LOCATION_LAT_DESC
  LOCATION_LON_ASC
  LOCATION_LON_DESC
  NOTES_ASC
  NOTES_DESC
  CHASSIS_ASC
  CHASSIS_DESC
  MODEL_ASC
  MODEL_DESC
  HW_ARCH_ASC
  HW_ARCH_DESC
  VENDOR_ASC
  VENDOR_DESC
  CONTRACT_NUMBER_ASC
  CONTRACT_NUMBER_DESC
  INSTALLER_NAME_ASC
  INSTALLER_NAME_DESC
  DEPLOYMENT_STATUS_ASC
  DEPLOYMENT_STATUS_DESC
  URL_A_ASC
  URL_A_DESC
  URL_B_ASC
  URL_B_DESC
  URL_C_ASC
  URL_C_DESC
  HOST_NETWORKS_ASC
  HOST_NETWORKS_DESC
  HOST_NETMASK_ASC
  HOST_NETMASK_DESC
  HOST_ROUTER_ASC
  HOST_ROUTER_DESC
  OOB_IP_ASC
  OOB_IP_DESC
  OOB_NETMASK_ASC
  OOB_NETMASK_DESC
  OOB_ROUTER_ASC
  OOB_ROUTER_DESC
  DATE_HW_PURCHASE_ASC
  DATE_HW_PURCHASE_DESC
  DATE_HW_INSTALL_ASC
  DATE_HW_INSTALL_DESC
  DATE_HW_EXPIRY_ASC
  DATE_HW_EXPIRY_DESC
  DATE_HW_DECOMM_ASC
  DATE_HW_DECOMM_DESC
  SITE_ADDRESS_A_ASC
  SITE_ADDRESS_A_DESC
  SITE_ADDRESS_B_ASC
  SITE_ADDRESS_B_DESC
  SITE_ADDRESS_C_ASC
  SITE_ADDRESS_C_DESC
  SITE_CITY_ASC
  SITE_CITY_DESC
  SITE_STATE_ASC
  SITE_STATE_DESC
  SITE_COUNTRY_ASC
  SITE_COUNTRY_DESC
  SITE_ZIP_ASC
  SITE_ZIP_DESC
  SITE_RACK_ASC
  SITE_RACK_DESC
  SITE_NOTES_ASC
  SITE_NOTES_DESC
  POC_1_NAME_ASC
  POC_1_NAME_DESC
  POC_1_EMAIL_ASC
  POC_1_EMAIL_DESC
  POC_1_PHONE_A_ASC
  POC_1_PHONE_A_DESC
  POC_1_PHONE_B_ASC
  POC_1_PHONE_B_DESC
  POC_1_CELL_ASC
  POC_1_CELL_DESC
  POC_1_SCREEN_ASC
  POC_1_SCREEN_DESC
  POC_1_NOTES_ASC
  POC_1_NOTES_DESC
  POC_2_NAME_ASC
  POC_2_NAME_DESC
  POC_2_EMAIL_ASC
  POC_2_EMAIL_DESC
  POC_2_PHONE_A_ASC
  POC_2_PHONE_A_DESC
  POC_2_PHONE_B_ASC
  POC_2_PHONE_B_DESC
  POC_2_CELL_ASC
  POC_2_CELL_DESC
  POC_2_SCREEN_ASC
  POC_2_SCREEN_DESC
  POC_2_NOTES_ASC
  POC_2_NOTES_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type HostInventory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hostid: BigInt!
  inventoryMode: Int!
  type: String!
  typeFull: String!
  name: String!
  alias: String!
  os: String!
  osFull: String!
  osShort: String!
  serialnoA: String!
  serialnoB: String!
  tag: String!
  assetTag: String!
  macaddressA: String!
  macaddressB: String!
  hardware: String!
  hardwareFull: String!
  software: String!
  softwareFull: String!
  softwareAppA: String!
  softwareAppB: String!
  softwareAppC: String!
  softwareAppD: String!
  softwareAppE: String!
  contact: String!
  location: String!
  locationLat: String!
  locationLon: String!
  notes: String!
  chassis: String!
  model: String!
  hwArch: String!
  vendor: String!
  contractNumber: String!
  installerName: String!
  deploymentStatus: String!
  urlA: String!
  urlB: String!
  urlC: String!
  hostNetworks: String!
  hostNetmask: String!
  hostRouter: String!
  oobIp: String!
  oobNetmask: String!
  oobRouter: String!
  dateHwPurchase: String!
  dateHwInstall: String!
  dateHwExpiry: String!
  dateHwDecomm: String!
  siteAddressA: String!
  siteAddressB: String!
  siteAddressC: String!
  siteCity: String!
  siteState: String!
  siteCountry: String!
  siteZip: String!
  siteRack: String!
  siteNotes: String!
  poc1Name: String!
  poc1Email: String!
  poc1PhoneA: String!
  poc1PhoneB: String!
  poc1Cell: String!
  poc1Screen: String!
  poc1Notes: String!
  poc2Name: String!
  poc2Email: String!
  poc2PhoneA: String!
  poc2PhoneB: String!
  poc2Cell: String!
  poc2Screen: String!
  poc2Notes: String!

  """Reads a single `Host` that is related to this `HostInventory`."""
  hostByHostid: Host
}

"""
A condition to be used against `HostInventory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HostInventoryCondition {
  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `inventoryMode` field."""
  inventoryMode: Int

  """Checks for equality with the object’s `type` field."""
  type: String

  """Checks for equality with the object’s `typeFull` field."""
  typeFull: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `os` field."""
  os: String

  """Checks for equality with the object’s `osFull` field."""
  osFull: String

  """Checks for equality with the object’s `osShort` field."""
  osShort: String

  """Checks for equality with the object’s `serialnoA` field."""
  serialnoA: String

  """Checks for equality with the object’s `serialnoB` field."""
  serialnoB: String

  """Checks for equality with the object’s `tag` field."""
  tag: String

  """Checks for equality with the object’s `assetTag` field."""
  assetTag: String

  """Checks for equality with the object’s `macaddressA` field."""
  macaddressA: String

  """Checks for equality with the object’s `macaddressB` field."""
  macaddressB: String

  """Checks for equality with the object’s `hardware` field."""
  hardware: String

  """Checks for equality with the object’s `hardwareFull` field."""
  hardwareFull: String

  """Checks for equality with the object’s `software` field."""
  software: String

  """Checks for equality with the object’s `softwareFull` field."""
  softwareFull: String

  """Checks for equality with the object’s `softwareAppA` field."""
  softwareAppA: String

  """Checks for equality with the object’s `softwareAppB` field."""
  softwareAppB: String

  """Checks for equality with the object’s `softwareAppC` field."""
  softwareAppC: String

  """Checks for equality with the object’s `softwareAppD` field."""
  softwareAppD: String

  """Checks for equality with the object’s `softwareAppE` field."""
  softwareAppE: String

  """Checks for equality with the object’s `contact` field."""
  contact: String

  """Checks for equality with the object’s `location` field."""
  location: String

  """Checks for equality with the object’s `locationLat` field."""
  locationLat: String

  """Checks for equality with the object’s `locationLon` field."""
  locationLon: String

  """Checks for equality with the object’s `notes` field."""
  notes: String

  """Checks for equality with the object’s `chassis` field."""
  chassis: String

  """Checks for equality with the object’s `model` field."""
  model: String

  """Checks for equality with the object’s `hwArch` field."""
  hwArch: String

  """Checks for equality with the object’s `vendor` field."""
  vendor: String

  """Checks for equality with the object’s `contractNumber` field."""
  contractNumber: String

  """Checks for equality with the object’s `installerName` field."""
  installerName: String

  """Checks for equality with the object’s `deploymentStatus` field."""
  deploymentStatus: String

  """Checks for equality with the object’s `urlA` field."""
  urlA: String

  """Checks for equality with the object’s `urlB` field."""
  urlB: String

  """Checks for equality with the object’s `urlC` field."""
  urlC: String

  """Checks for equality with the object’s `hostNetworks` field."""
  hostNetworks: String

  """Checks for equality with the object’s `hostNetmask` field."""
  hostNetmask: String

  """Checks for equality with the object’s `hostRouter` field."""
  hostRouter: String

  """Checks for equality with the object’s `oobIp` field."""
  oobIp: String

  """Checks for equality with the object’s `oobNetmask` field."""
  oobNetmask: String

  """Checks for equality with the object’s `oobRouter` field."""
  oobRouter: String

  """Checks for equality with the object’s `dateHwPurchase` field."""
  dateHwPurchase: String

  """Checks for equality with the object’s `dateHwInstall` field."""
  dateHwInstall: String

  """Checks for equality with the object’s `dateHwExpiry` field."""
  dateHwExpiry: String

  """Checks for equality with the object’s `dateHwDecomm` field."""
  dateHwDecomm: String

  """Checks for equality with the object’s `siteAddressA` field."""
  siteAddressA: String

  """Checks for equality with the object’s `siteAddressB` field."""
  siteAddressB: String

  """Checks for equality with the object’s `siteAddressC` field."""
  siteAddressC: String

  """Checks for equality with the object’s `siteCity` field."""
  siteCity: String

  """Checks for equality with the object’s `siteState` field."""
  siteState: String

  """Checks for equality with the object’s `siteCountry` field."""
  siteCountry: String

  """Checks for equality with the object’s `siteZip` field."""
  siteZip: String

  """Checks for equality with the object’s `siteRack` field."""
  siteRack: String

  """Checks for equality with the object’s `siteNotes` field."""
  siteNotes: String

  """Checks for equality with the object’s `poc1Name` field."""
  poc1Name: String

  """Checks for equality with the object’s `poc1Email` field."""
  poc1Email: String

  """Checks for equality with the object’s `poc1PhoneA` field."""
  poc1PhoneA: String

  """Checks for equality with the object’s `poc1PhoneB` field."""
  poc1PhoneB: String

  """Checks for equality with the object’s `poc1Cell` field."""
  poc1Cell: String

  """Checks for equality with the object’s `poc1Screen` field."""
  poc1Screen: String

  """Checks for equality with the object’s `poc1Notes` field."""
  poc1Notes: String

  """Checks for equality with the object’s `poc2Name` field."""
  poc2Name: String

  """Checks for equality with the object’s `poc2Email` field."""
  poc2Email: String

  """Checks for equality with the object’s `poc2PhoneA` field."""
  poc2PhoneA: String

  """Checks for equality with the object’s `poc2PhoneB` field."""
  poc2PhoneB: String

  """Checks for equality with the object’s `poc2Cell` field."""
  poc2Cell: String

  """Checks for equality with the object’s `poc2Screen` field."""
  poc2Screen: String

  """Checks for equality with the object’s `poc2Notes` field."""
  poc2Notes: String
}

"""An input for mutations affecting `HostInventory`"""
input HostInventoryInput {
  hostid: BigInt!
  inventoryMode: Int
  type: String
  typeFull: String
  name: String
  alias: String
  os: String
  osFull: String
  osShort: String
  serialnoA: String
  serialnoB: String
  tag: String
  assetTag: String
  macaddressA: String
  macaddressB: String
  hardware: String
  hardwareFull: String
  software: String
  softwareFull: String
  softwareAppA: String
  softwareAppB: String
  softwareAppC: String
  softwareAppD: String
  softwareAppE: String
  contact: String
  location: String
  locationLat: String
  locationLon: String
  notes: String
  chassis: String
  model: String
  hwArch: String
  vendor: String
  contractNumber: String
  installerName: String
  deploymentStatus: String
  urlA: String
  urlB: String
  urlC: String
  hostNetworks: String
  hostNetmask: String
  hostRouter: String
  oobIp: String
  oobNetmask: String
  oobRouter: String
  dateHwPurchase: String
  dateHwInstall: String
  dateHwExpiry: String
  dateHwDecomm: String
  siteAddressA: String
  siteAddressB: String
  siteAddressC: String
  siteCity: String
  siteState: String
  siteCountry: String
  siteZip: String
  siteRack: String
  siteNotes: String
  poc1Name: String
  poc1Email: String
  poc1PhoneA: String
  poc1PhoneB: String
  poc1Cell: String
  poc1Screen: String
  poc1Notes: String
  poc2Name: String
  poc2Email: String
  poc2PhoneA: String
  poc2PhoneB: String
  poc2Cell: String
  poc2Screen: String
  poc2Notes: String
}

"""
Represents an update to a `HostInventory`. Fields that are set will be updated.
"""
input HostInventoryPatch {
  hostid: BigInt
  inventoryMode: Int
  type: String
  typeFull: String
  name: String
  alias: String
  os: String
  osFull: String
  osShort: String
  serialnoA: String
  serialnoB: String
  tag: String
  assetTag: String
  macaddressA: String
  macaddressB: String
  hardware: String
  hardwareFull: String
  software: String
  softwareFull: String
  softwareAppA: String
  softwareAppB: String
  softwareAppC: String
  softwareAppD: String
  softwareAppE: String
  contact: String
  location: String
  locationLat: String
  locationLon: String
  notes: String
  chassis: String
  model: String
  hwArch: String
  vendor: String
  contractNumber: String
  installerName: String
  deploymentStatus: String
  urlA: String
  urlB: String
  urlC: String
  hostNetworks: String
  hostNetmask: String
  hostRouter: String
  oobIp: String
  oobNetmask: String
  oobRouter: String
  dateHwPurchase: String
  dateHwInstall: String
  dateHwExpiry: String
  dateHwDecomm: String
  siteAddressA: String
  siteAddressB: String
  siteAddressC: String
  siteCity: String
  siteState: String
  siteCountry: String
  siteZip: String
  siteRack: String
  siteNotes: String
  poc1Name: String
  poc1Email: String
  poc1PhoneA: String
  poc1PhoneB: String
  poc1Cell: String
  poc1Screen: String
  poc1Notes: String
  poc2Name: String
  poc2Email: String
  poc2PhoneA: String
  poc2PhoneB: String
  poc2Cell: String
  poc2Screen: String
  poc2Notes: String
}

type Hostmacro implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hostmacroid: BigInt!
  hostid: BigInt!
  macro: String!
  value: String!

  """Reads a single `Host` that is related to this `Hostmacro`."""
  hostByHostid: Host
}

"""
A condition to be used against `Hostmacro` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HostmacroCondition {
  """Checks for equality with the object’s `hostmacroid` field."""
  hostmacroid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `macro` field."""
  macro: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `Hostmacro`"""
input HostmacroInput {
  hostmacroid: BigInt!
  hostid: BigInt!
  macro: String
  value: String
}

"""
Represents an update to a `Hostmacro`. Fields that are set will be updated.
"""
input HostmacroPatch {
  hostmacroid: BigInt
  hostid: BigInt
  macro: String
  value: String
}

"""A connection to a list of `Hostmacro` values."""
type HostmacrosConnection {
  """A list of `Hostmacro` objects."""
  nodes: [Hostmacro]!

  """
  A list of edges which contains the `Hostmacro` and cursor to aid in pagination.
  """
  edges: [HostmacrosEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Hostmacro` you could get from the connection."""
  totalCount: Int
}

"""A `Hostmacro` edge in the connection."""
type HostmacrosEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Hostmacro` at the end of the edge."""
  node: Hostmacro
}

"""Methods to use when ordering `Hostmacro`."""
enum HostmacrosOrderBy {
  NATURAL
  HOSTMACROID_ASC
  HOSTMACROID_DESC
  HOSTID_ASC
  HOSTID_DESC
  MACRO_ASC
  MACRO_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Host`. Fields that are set will be updated.
"""
input HostPatch {
  hostid: BigInt
  proxyHostid: BigInt
  host: String
  status: Int
  disableUntil: Int
  error: String
  available: Int
  errorsFrom: Int
  lastaccess: Int
  ipmiAuthtype: Int
  ipmiPrivilege: Int
  ipmiUsername: String
  ipmiPassword: String
  ipmiDisableUntil: Int
  ipmiAvailable: Int
  snmpDisableUntil: Int
  snmpAvailable: Int
  maintenanceid: BigInt
  maintenanceStatus: Int
  maintenanceType: Int
  maintenanceFrom: Int
  ipmiErrorsFrom: Int
  snmpErrorsFrom: Int
  ipmiError: String
  snmpError: String
  jmxDisableUntil: Int
  jmxAvailable: Int
  jmxErrorsFrom: Int
  jmxError: String
  name: String
  flags: Int
  templateid: BigInt
  description: String
  tlsConnect: Int
  tlsAccept: Int
  tlsIssuer: String
  tlsSubject: String
  tlsPskIdentity: String
  tlsPsk: String
}

"""A connection to a list of `Host` values."""
type HostsConnection {
  """A list of `Host` objects."""
  nodes: [Host]!

  """
  A list of edges which contains the `Host` and cursor to aid in pagination.
  """
  edges: [HostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Host` you could get from the connection."""
  totalCount: Int
}

"""A `Host` edge in the connection."""
type HostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Host` at the end of the edge."""
  node: Host
}

type HostsGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hostgroupid: BigInt!
  hostid: BigInt!
  groupid: BigInt!

  """Reads a single `Host` that is related to this `HostsGroup`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `HostsGroup`."""
  groupByGroupid: Group
}

"""
A condition to be used against `HostsGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HostsGroupCondition {
  """Checks for equality with the object’s `hostgroupid` field."""
  hostgroupid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt
}

"""An input for mutations affecting `HostsGroup`"""
input HostsGroupInput {
  hostgroupid: BigInt!
  hostid: BigInt!
  groupid: BigInt!
}

"""
Represents an update to a `HostsGroup`. Fields that are set will be updated.
"""
input HostsGroupPatch {
  hostgroupid: BigInt
  hostid: BigInt
  groupid: BigInt
}

"""A connection to a list of `HostsGroup` values."""
type HostsGroupsConnection {
  """A list of `HostsGroup` objects."""
  nodes: [HostsGroup]!

  """
  A list of edges which contains the `HostsGroup` and cursor to aid in pagination.
  """
  edges: [HostsGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HostsGroup` you could get from the connection."""
  totalCount: Int
}

"""A `HostsGroup` edge in the connection."""
type HostsGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HostsGroup` at the end of the edge."""
  node: HostsGroup
}

"""Methods to use when ordering `HostsGroup`."""
enum HostsGroupsOrderBy {
  NATURAL
  HOSTGROUPID_ASC
  HOSTGROUPID_DESC
  HOSTID_ASC
  HOSTID_DESC
  GROUPID_ASC
  GROUPID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Host`."""
enum HostsOrderBy {
  NATURAL
  HOSTID_ASC
  HOSTID_DESC
  PROXY_HOSTID_ASC
  PROXY_HOSTID_DESC
  HOST_ASC
  HOST_DESC
  STATUS_ASC
  STATUS_DESC
  DISABLE_UNTIL_ASC
  DISABLE_UNTIL_DESC
  ERROR_ASC
  ERROR_DESC
  AVAILABLE_ASC
  AVAILABLE_DESC
  ERRORS_FROM_ASC
  ERRORS_FROM_DESC
  LASTACCESS_ASC
  LASTACCESS_DESC
  IPMI_AUTHTYPE_ASC
  IPMI_AUTHTYPE_DESC
  IPMI_PRIVILEGE_ASC
  IPMI_PRIVILEGE_DESC
  IPMI_USERNAME_ASC
  IPMI_USERNAME_DESC
  IPMI_PASSWORD_ASC
  IPMI_PASSWORD_DESC
  IPMI_DISABLE_UNTIL_ASC
  IPMI_DISABLE_UNTIL_DESC
  IPMI_AVAILABLE_ASC
  IPMI_AVAILABLE_DESC
  SNMP_DISABLE_UNTIL_ASC
  SNMP_DISABLE_UNTIL_DESC
  SNMP_AVAILABLE_ASC
  SNMP_AVAILABLE_DESC
  MAINTENANCEID_ASC
  MAINTENANCEID_DESC
  MAINTENANCE_STATUS_ASC
  MAINTENANCE_STATUS_DESC
  MAINTENANCE_TYPE_ASC
  MAINTENANCE_TYPE_DESC
  MAINTENANCE_FROM_ASC
  MAINTENANCE_FROM_DESC
  IPMI_ERRORS_FROM_ASC
  IPMI_ERRORS_FROM_DESC
  SNMP_ERRORS_FROM_ASC
  SNMP_ERRORS_FROM_DESC
  IPMI_ERROR_ASC
  IPMI_ERROR_DESC
  SNMP_ERROR_ASC
  SNMP_ERROR_DESC
  JMX_DISABLE_UNTIL_ASC
  JMX_DISABLE_UNTIL_DESC
  JMX_AVAILABLE_ASC
  JMX_AVAILABLE_DESC
  JMX_ERRORS_FROM_ASC
  JMX_ERRORS_FROM_DESC
  JMX_ERROR_ASC
  JMX_ERROR_DESC
  NAME_ASC
  NAME_DESC
  FLAGS_ASC
  FLAGS_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  TLS_CONNECT_ASC
  TLS_CONNECT_DESC
  TLS_ACCEPT_ASC
  TLS_ACCEPT_DESC
  TLS_ISSUER_ASC
  TLS_ISSUER_DESC
  TLS_SUBJECT_ASC
  TLS_SUBJECT_DESC
  TLS_PSK_IDENTITY_ASC
  TLS_PSK_IDENTITY_DESC
  TLS_PSK_ASC
  TLS_PSK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type HostsTemplate implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  hosttemplateid: BigInt!
  hostid: BigInt!
  templateid: BigInt!

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByTemplateid: Host
}

"""
A condition to be used against `HostsTemplate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HostsTemplateCondition {
  """Checks for equality with the object’s `hosttemplateid` field."""
  hosttemplateid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt
}

"""An input for mutations affecting `HostsTemplate`"""
input HostsTemplateInput {
  hosttemplateid: BigInt!
  hostid: BigInt!
  templateid: BigInt!
}

"""
Represents an update to a `HostsTemplate`. Fields that are set will be updated.
"""
input HostsTemplatePatch {
  hosttemplateid: BigInt
  hostid: BigInt
  templateid: BigInt
}

"""A connection to a list of `HostsTemplate` values."""
type HostsTemplatesConnection {
  """A list of `HostsTemplate` objects."""
  nodes: [HostsTemplate]!

  """
  A list of edges which contains the `HostsTemplate` and cursor to aid in pagination.
  """
  edges: [HostsTemplatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `HostsTemplate` you could get from the connection."""
  totalCount: Int
}

"""A `HostsTemplate` edge in the connection."""
type HostsTemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `HostsTemplate` at the end of the edge."""
  node: HostsTemplate
}

"""Methods to use when ordering `HostsTemplate`."""
enum HostsTemplatesOrderBy {
  NATURAL
  HOSTTEMPLATEID_ASC
  HOSTTEMPLATEID_DESC
  HOSTID_ASC
  HOSTID_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Housekeeper implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  housekeeperid: BigInt!
  tablename: String!
  field: String!
  value: BigInt!
}

"""
A condition to be used against `Housekeeper` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HousekeeperCondition {
  """Checks for equality with the object’s `housekeeperid` field."""
  housekeeperid: BigInt

  """Checks for equality with the object’s `tablename` field."""
  tablename: String

  """Checks for equality with the object’s `field` field."""
  field: String

  """Checks for equality with the object’s `value` field."""
  value: BigInt
}

"""An input for mutations affecting `Housekeeper`"""
input HousekeeperInput {
  housekeeperid: BigInt!
  tablename: String
  field: String
  value: BigInt!
}

"""
Represents an update to a `Housekeeper`. Fields that are set will be updated.
"""
input HousekeeperPatch {
  housekeeperid: BigInt
  tablename: String
  field: String
  value: BigInt
}

"""A connection to a list of `Housekeeper` values."""
type HousekeepersConnection {
  """A list of `Housekeeper` objects."""
  nodes: [Housekeeper]!

  """
  A list of edges which contains the `Housekeeper` and cursor to aid in pagination.
  """
  edges: [HousekeepersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Housekeeper` you could get from the connection."""
  totalCount: Int
}

"""A `Housekeeper` edge in the connection."""
type HousekeepersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Housekeeper` at the end of the edge."""
  node: Housekeeper
}

"""Methods to use when ordering `Housekeeper`."""
enum HousekeepersOrderBy {
  NATURAL
  HOUSEKEEPERID_ASC
  HOUSEKEEPERID_DESC
  TABLENAME_ASC
  TABLENAME_DESC
  FIELD_ASC
  FIELD_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Httpstep implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  httpstepid: BigInt!
  httptestid: BigInt!
  name: String!
  no: Int!
  url: String!
  timeout: Int!
  posts: String!
  required: String!
  statusCodes: String!
  variables: String!
  followRedirects: Int!
  retrieveMode: Int!
  headers: String!

  """Reads a single `Httptest` that is related to this `Httpstep`."""
  httptestByHttptestid: Httptest

  """Reads and enables pagination through a set of `Httpstepitem`."""
  httpstepitemsByHttpstepid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httpstepitem`."""
    orderBy: [HttpstepitemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttpstepitemCondition
  ): HttpstepitemsConnection!
}

"""
A condition to be used against `Httpstep` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HttpstepCondition {
  """Checks for equality with the object’s `httpstepid` field."""
  httpstepid: BigInt

  """Checks for equality with the object’s `httptestid` field."""
  httptestid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `no` field."""
  no: Int

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `timeout` field."""
  timeout: Int

  """Checks for equality with the object’s `posts` field."""
  posts: String

  """Checks for equality with the object’s `required` field."""
  required: String

  """Checks for equality with the object’s `statusCodes` field."""
  statusCodes: String

  """Checks for equality with the object’s `variables` field."""
  variables: String

  """Checks for equality with the object’s `followRedirects` field."""
  followRedirects: Int

  """Checks for equality with the object’s `retrieveMode` field."""
  retrieveMode: Int

  """Checks for equality with the object’s `headers` field."""
  headers: String
}

"""An input for mutations affecting `Httpstep`"""
input HttpstepInput {
  httpstepid: BigInt!
  httptestid: BigInt!
  name: String
  no: Int
  url: String
  timeout: Int
  posts: String
  required: String
  statusCodes: String
  variables: String
  followRedirects: Int
  retrieveMode: Int
  headers: String
}

type Httpstepitem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  httpstepitemid: BigInt!
  httpstepid: BigInt!
  itemid: BigInt!
  type: Int!

  """Reads a single `Httpstep` that is related to this `Httpstepitem`."""
  httpstepByHttpstepid: Httpstep

  """Reads a single `Item` that is related to this `Httpstepitem`."""
  itemByItemid: Item
}

"""
A condition to be used against `Httpstepitem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HttpstepitemCondition {
  """Checks for equality with the object’s `httpstepitemid` field."""
  httpstepitemid: BigInt

  """Checks for equality with the object’s `httpstepid` field."""
  httpstepid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int
}

"""An input for mutations affecting `Httpstepitem`"""
input HttpstepitemInput {
  httpstepitemid: BigInt!
  httpstepid: BigInt!
  itemid: BigInt!
  type: Int
}

"""
Represents an update to a `Httpstepitem`. Fields that are set will be updated.
"""
input HttpstepitemPatch {
  httpstepitemid: BigInt
  httpstepid: BigInt
  itemid: BigInt
  type: Int
}

"""A connection to a list of `Httpstepitem` values."""
type HttpstepitemsConnection {
  """A list of `Httpstepitem` objects."""
  nodes: [Httpstepitem]!

  """
  A list of edges which contains the `Httpstepitem` and cursor to aid in pagination.
  """
  edges: [HttpstepitemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Httpstepitem` you could get from the connection."""
  totalCount: Int
}

"""A `Httpstepitem` edge in the connection."""
type HttpstepitemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Httpstepitem` at the end of the edge."""
  node: Httpstepitem
}

"""Methods to use when ordering `Httpstepitem`."""
enum HttpstepitemsOrderBy {
  NATURAL
  HTTPSTEPITEMID_ASC
  HTTPSTEPITEMID_DESC
  HTTPSTEPID_ASC
  HTTPSTEPID_DESC
  ITEMID_ASC
  ITEMID_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Httpstep`. Fields that are set will be updated.
"""
input HttpstepPatch {
  httpstepid: BigInt
  httptestid: BigInt
  name: String
  no: Int
  url: String
  timeout: Int
  posts: String
  required: String
  statusCodes: String
  variables: String
  followRedirects: Int
  retrieveMode: Int
  headers: String
}

"""A connection to a list of `Httpstep` values."""
type HttpstepsConnection {
  """A list of `Httpstep` objects."""
  nodes: [Httpstep]!

  """
  A list of edges which contains the `Httpstep` and cursor to aid in pagination.
  """
  edges: [HttpstepsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Httpstep` you could get from the connection."""
  totalCount: Int
}

"""A `Httpstep` edge in the connection."""
type HttpstepsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Httpstep` at the end of the edge."""
  node: Httpstep
}

"""Methods to use when ordering `Httpstep`."""
enum HttpstepsOrderBy {
  NATURAL
  HTTPSTEPID_ASC
  HTTPSTEPID_DESC
  HTTPTESTID_ASC
  HTTPTESTID_DESC
  NAME_ASC
  NAME_DESC
  NO_ASC
  NO_DESC
  URL_ASC
  URL_DESC
  TIMEOUT_ASC
  TIMEOUT_DESC
  POSTS_ASC
  POSTS_DESC
  REQUIRED_ASC
  REQUIRED_DESC
  STATUS_CODES_ASC
  STATUS_CODES_DESC
  VARIABLES_ASC
  VARIABLES_DESC
  FOLLOW_REDIRECTS_ASC
  FOLLOW_REDIRECTS_DESC
  RETRIEVE_MODE_ASC
  RETRIEVE_MODE_DESC
  HEADERS_ASC
  HEADERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Httptest implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  httptestid: BigInt!
  name: String!
  applicationid: BigInt
  nextcheck: Int!
  delay: Int!
  status: Int!
  variables: String!
  agent: String!
  authentication: Int!
  httpUser: String!
  httpPassword: String!
  hostid: BigInt!
  templateid: BigInt
  httpProxy: String!
  retries: Int!
  sslCertFile: String!
  sslKeyFile: String!
  sslKeyPassword: String!
  verifyPeer: Int!
  verifyHost: Int!
  headers: String!

  """Reads a single `Application` that is related to this `Httptest`."""
  applicationByApplicationid: Application

  """Reads a single `Host` that is related to this `Httptest`."""
  hostByHostid: Host

  """Reads a single `Httptest` that is related to this `Httptest`."""
  httptestByTemplateid: Httptest

  """Reads and enables pagination through a set of `Httptest`."""
  httptestsByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httptest`."""
    orderBy: [HttptestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttptestCondition
  ): HttptestsConnection!

  """Reads and enables pagination through a set of `Httpstep`."""
  httpstepsByHttptestid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httpstep`."""
    orderBy: [HttpstepsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttpstepCondition
  ): HttpstepsConnection!

  """Reads and enables pagination through a set of `Httptestitem`."""
  httptestitemsByHttptestid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httptestitem`."""
    orderBy: [HttptestitemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttptestitemCondition
  ): HttptestitemsConnection!
}

"""
A condition to be used against `Httptest` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input HttptestCondition {
  """Checks for equality with the object’s `httptestid` field."""
  httptestid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `applicationid` field."""
  applicationid: BigInt

  """Checks for equality with the object’s `nextcheck` field."""
  nextcheck: Int

  """Checks for equality with the object’s `delay` field."""
  delay: Int

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `variables` field."""
  variables: String

  """Checks for equality with the object’s `agent` field."""
  agent: String

  """Checks for equality with the object’s `authentication` field."""
  authentication: Int

  """Checks for equality with the object’s `httpUser` field."""
  httpUser: String

  """Checks for equality with the object’s `httpPassword` field."""
  httpPassword: String

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt

  """Checks for equality with the object’s `httpProxy` field."""
  httpProxy: String

  """Checks for equality with the object’s `retries` field."""
  retries: Int

  """Checks for equality with the object’s `sslCertFile` field."""
  sslCertFile: String

  """Checks for equality with the object’s `sslKeyFile` field."""
  sslKeyFile: String

  """Checks for equality with the object’s `sslKeyPassword` field."""
  sslKeyPassword: String

  """Checks for equality with the object’s `verifyPeer` field."""
  verifyPeer: Int

  """Checks for equality with the object’s `verifyHost` field."""
  verifyHost: Int

  """Checks for equality with the object’s `headers` field."""
  headers: String
}

"""An input for mutations affecting `Httptest`"""
input HttptestInput {
  httptestid: BigInt!
  name: String
  applicationid: BigInt
  nextcheck: Int
  delay: Int
  status: Int
  variables: String
  agent: String
  authentication: Int
  httpUser: String
  httpPassword: String
  hostid: BigInt!
  templateid: BigInt
  httpProxy: String
  retries: Int
  sslCertFile: String
  sslKeyFile: String
  sslKeyPassword: String
  verifyPeer: Int
  verifyHost: Int
  headers: String
}

type Httptestitem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  httptestitemid: BigInt!
  httptestid: BigInt!
  itemid: BigInt!
  type: Int!

  """Reads a single `Httptest` that is related to this `Httptestitem`."""
  httptestByHttptestid: Httptest

  """Reads a single `Item` that is related to this `Httptestitem`."""
  itemByItemid: Item
}

"""
A condition to be used against `Httptestitem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input HttptestitemCondition {
  """Checks for equality with the object’s `httptestitemid` field."""
  httptestitemid: BigInt

  """Checks for equality with the object’s `httptestid` field."""
  httptestid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int
}

"""An input for mutations affecting `Httptestitem`"""
input HttptestitemInput {
  httptestitemid: BigInt!
  httptestid: BigInt!
  itemid: BigInt!
  type: Int
}

"""
Represents an update to a `Httptestitem`. Fields that are set will be updated.
"""
input HttptestitemPatch {
  httptestitemid: BigInt
  httptestid: BigInt
  itemid: BigInt
  type: Int
}

"""A connection to a list of `Httptestitem` values."""
type HttptestitemsConnection {
  """A list of `Httptestitem` objects."""
  nodes: [Httptestitem]!

  """
  A list of edges which contains the `Httptestitem` and cursor to aid in pagination.
  """
  edges: [HttptestitemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Httptestitem` you could get from the connection."""
  totalCount: Int
}

"""A `Httptestitem` edge in the connection."""
type HttptestitemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Httptestitem` at the end of the edge."""
  node: Httptestitem
}

"""Methods to use when ordering `Httptestitem`."""
enum HttptestitemsOrderBy {
  NATURAL
  HTTPTESTITEMID_ASC
  HTTPTESTITEMID_DESC
  HTTPTESTID_ASC
  HTTPTESTID_DESC
  ITEMID_ASC
  ITEMID_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Httptest`. Fields that are set will be updated.
"""
input HttptestPatch {
  httptestid: BigInt
  name: String
  applicationid: BigInt
  nextcheck: Int
  delay: Int
  status: Int
  variables: String
  agent: String
  authentication: Int
  httpUser: String
  httpPassword: String
  hostid: BigInt
  templateid: BigInt
  httpProxy: String
  retries: Int
  sslCertFile: String
  sslKeyFile: String
  sslKeyPassword: String
  verifyPeer: Int
  verifyHost: Int
  headers: String
}

"""A connection to a list of `Httptest` values."""
type HttptestsConnection {
  """A list of `Httptest` objects."""
  nodes: [Httptest]!

  """
  A list of edges which contains the `Httptest` and cursor to aid in pagination.
  """
  edges: [HttptestsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Httptest` you could get from the connection."""
  totalCount: Int
}

"""A `Httptest` edge in the connection."""
type HttptestsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Httptest` at the end of the edge."""
  node: Httptest
}

"""Methods to use when ordering `Httptest`."""
enum HttptestsOrderBy {
  NATURAL
  HTTPTESTID_ASC
  HTTPTESTID_DESC
  NAME_ASC
  NAME_DESC
  APPLICATIONID_ASC
  APPLICATIONID_DESC
  NEXTCHECK_ASC
  NEXTCHECK_DESC
  DELAY_ASC
  DELAY_DESC
  STATUS_ASC
  STATUS_DESC
  VARIABLES_ASC
  VARIABLES_DESC
  AGENT_ASC
  AGENT_DESC
  AUTHENTICATION_ASC
  AUTHENTICATION_DESC
  HTTP_USER_ASC
  HTTP_USER_DESC
  HTTP_PASSWORD_ASC
  HTTP_PASSWORD_DESC
  HOSTID_ASC
  HOSTID_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  HTTP_PROXY_ASC
  HTTP_PROXY_DESC
  RETRIES_ASC
  RETRIES_DESC
  SSL_CERT_FILE_ASC
  SSL_CERT_FILE_DESC
  SSL_KEY_FILE_ASC
  SSL_KEY_FILE_DESC
  SSL_KEY_PASSWORD_ASC
  SSL_KEY_PASSWORD_DESC
  VERIFY_PEER_ASC
  VERIFY_PEER_DESC
  VERIFY_HOST_ASC
  VERIFY_HOST_DESC
  HEADERS_ASC
  HEADERS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type IconMap implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  iconmapid: BigInt!
  name: String!
  defaultIconid: BigInt!

  """Reads a single `Image` that is related to this `IconMap`."""
  imageByDefaultIconid: Image

  """Reads and enables pagination through a set of `IconMapping`."""
  iconMappingsByIconmapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IconMapping`."""
    orderBy: [IconMappingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IconMappingCondition
  ): IconMappingsConnection!

  """Reads and enables pagination through a set of `Sysmap`."""
  sysmapsByIconmapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sysmap`."""
    orderBy: [SysmapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapCondition
  ): SysmapsConnection!
}

"""
A condition to be used against `IconMap` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input IconMapCondition {
  """Checks for equality with the object’s `iconmapid` field."""
  iconmapid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `defaultIconid` field."""
  defaultIconid: BigInt
}

"""An input for mutations affecting `IconMap`"""
input IconMapInput {
  iconmapid: BigInt!
  name: String
  defaultIconid: BigInt!
}

"""
Represents an update to a `IconMap`. Fields that are set will be updated.
"""
input IconMapPatch {
  iconmapid: BigInt
  name: String
  defaultIconid: BigInt
}

type IconMapping implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  iconmappingid: BigInt!
  iconmapid: BigInt!
  iconid: BigInt!
  inventoryLink: Int!
  expression: String!
  sortorder: Int!

  """Reads a single `IconMap` that is related to this `IconMapping`."""
  iconMapByIconmapid: IconMap

  """Reads a single `Image` that is related to this `IconMapping`."""
  imageByIconid: Image
}

"""
A condition to be used against `IconMapping` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input IconMappingCondition {
  """Checks for equality with the object’s `iconmappingid` field."""
  iconmappingid: BigInt

  """Checks for equality with the object’s `iconmapid` field."""
  iconmapid: BigInt

  """Checks for equality with the object’s `iconid` field."""
  iconid: BigInt

  """Checks for equality with the object’s `inventoryLink` field."""
  inventoryLink: Int

  """Checks for equality with the object’s `expression` field."""
  expression: String

  """Checks for equality with the object’s `sortorder` field."""
  sortorder: Int
}

"""An input for mutations affecting `IconMapping`"""
input IconMappingInput {
  iconmappingid: BigInt!
  iconmapid: BigInt!
  iconid: BigInt!
  inventoryLink: Int
  expression: String
  sortorder: Int
}

"""
Represents an update to a `IconMapping`. Fields that are set will be updated.
"""
input IconMappingPatch {
  iconmappingid: BigInt
  iconmapid: BigInt
  iconid: BigInt
  inventoryLink: Int
  expression: String
  sortorder: Int
}

"""A connection to a list of `IconMapping` values."""
type IconMappingsConnection {
  """A list of `IconMapping` objects."""
  nodes: [IconMapping]!

  """
  A list of edges which contains the `IconMapping` and cursor to aid in pagination.
  """
  edges: [IconMappingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `IconMapping` you could get from the connection."""
  totalCount: Int
}

"""A `IconMapping` edge in the connection."""
type IconMappingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IconMapping` at the end of the edge."""
  node: IconMapping
}

"""Methods to use when ordering `IconMapping`."""
enum IconMappingsOrderBy {
  NATURAL
  ICONMAPPINGID_ASC
  ICONMAPPINGID_DESC
  ICONMAPID_ASC
  ICONMAPID_DESC
  ICONID_ASC
  ICONID_DESC
  INVENTORY_LINK_ASC
  INVENTORY_LINK_DESC
  EXPRESSION_ASC
  EXPRESSION_DESC
  SORTORDER_ASC
  SORTORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `IconMap` values."""
type IconMapsConnection {
  """A list of `IconMap` objects."""
  nodes: [IconMap]!

  """
  A list of edges which contains the `IconMap` and cursor to aid in pagination.
  """
  edges: [IconMapsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `IconMap` you could get from the connection."""
  totalCount: Int
}

"""A `IconMap` edge in the connection."""
type IconMapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `IconMap` at the end of the edge."""
  node: IconMap
}

"""Methods to use when ordering `IconMap`."""
enum IconMapsOrderBy {
  NATURAL
  ICONMAPID_ASC
  ICONMAPID_DESC
  NAME_ASC
  NAME_DESC
  DEFAULT_ICONID_ASC
  DEFAULT_ICONID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Id implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  tableName: String!
  fieldName: String!
  nextid: BigInt!
}

"""
A condition to be used against `Id` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input IdCondition {
  """Checks for equality with the object’s `tableName` field."""
  tableName: String

  """Checks for equality with the object’s `fieldName` field."""
  fieldName: String

  """Checks for equality with the object’s `nextid` field."""
  nextid: BigInt
}

"""An input for mutations affecting `Id`"""
input IdInput {
  tableName: String
  fieldName: String
  nextid: BigInt!
}

"""Represents an update to a `Id`. Fields that are set will be updated."""
input IdPatch {
  tableName: String
  fieldName: String
  nextid: BigInt
}

"""A connection to a list of `Id` values."""
type IdsConnection {
  """A list of `Id` objects."""
  nodes: [Id]!

  """
  A list of edges which contains the `Id` and cursor to aid in pagination.
  """
  edges: [IdsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Id` you could get from the connection."""
  totalCount: Int
}

"""A `Id` edge in the connection."""
type IdsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Id` at the end of the edge."""
  node: Id
}

"""Methods to use when ordering `Id`."""
enum IdsOrderBy {
  NATURAL
  TABLE_NAME_ASC
  TABLE_NAME_DESC
  FIELD_NAME_ASC
  FIELD_NAME_DESC
  NEXTID_ASC
  NEXTID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Image implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  imageid: BigInt!
  imagetype: Int!
  name: String!
  image: String!

  """Reads and enables pagination through a set of `IconMap`."""
  iconMapsByDefaultIconid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IconMap`."""
    orderBy: [IconMapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IconMapCondition
  ): IconMapsConnection!

  """Reads and enables pagination through a set of `IconMapping`."""
  iconMappingsByIconid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IconMapping`."""
    orderBy: [IconMappingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IconMappingCondition
  ): IconMappingsConnection!

  """Reads and enables pagination through a set of `Sysmap`."""
  sysmapsByBackgroundid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sysmap`."""
    orderBy: [SysmapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapCondition
  ): SysmapsConnection!

  """Reads and enables pagination through a set of `SysmapsElement`."""
  sysmapsElementsByIconidOff(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsElementCondition
  ): SysmapsElementsConnection!

  """Reads and enables pagination through a set of `SysmapsElement`."""
  sysmapsElementsByIconidOn(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsElementCondition
  ): SysmapsElementsConnection!

  """Reads and enables pagination through a set of `SysmapsElement`."""
  sysmapsElementsByIconidDisabled(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsElementCondition
  ): SysmapsElementsConnection!

  """Reads and enables pagination through a set of `SysmapsElement`."""
  sysmapsElementsByIconidMaintenance(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsElementCondition
  ): SysmapsElementsConnection!
}

"""
A condition to be used against `Image` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ImageCondition {
  """Checks for equality with the object’s `imageid` field."""
  imageid: BigInt

  """Checks for equality with the object’s `imagetype` field."""
  imagetype: Int

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `image` field."""
  image: String
}

"""An input for mutations affecting `Image`"""
input ImageInput {
  imageid: BigInt!
  imagetype: Int
  name: String
  image: String
}

"""
Represents an update to a `Image`. Fields that are set will be updated.
"""
input ImagePatch {
  imageid: BigInt
  imagetype: Int
  name: String
  image: String
}

"""A connection to a list of `Image` values."""
type ImagesConnection {
  """A list of `Image` objects."""
  nodes: [Image]!

  """
  A list of edges which contains the `Image` and cursor to aid in pagination.
  """
  edges: [ImagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Image` you could get from the connection."""
  totalCount: Int
}

"""A `Image` edge in the connection."""
type ImagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Image` at the end of the edge."""
  node: Image
}

"""Methods to use when ordering `Image`."""
enum ImagesOrderBy {
  NATURAL
  IMAGEID_ASC
  IMAGEID_DESC
  IMAGETYPE_ASC
  IMAGETYPE_DESC
  NAME_ASC
  NAME_DESC
  IMAGE_ASC
  IMAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Interface implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  interfaceid: BigInt!
  hostid: BigInt!
  main: Int!
  type: Int!
  useip: Int!
  ip: String!
  dns: String!
  port: String!
  bulk: Int!

  """Reads a single `Host` that is related to this `Interface`."""
  hostByHostid: Host

  """Reads and enables pagination through a set of `Item`."""
  itemsByInterfaceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition
  ): ItemsConnection!

  """
  Reads a single `InterfaceDiscovery` that is related to this `Interface`.
  """
  interfaceDiscoveryByInterfaceid: InterfaceDiscovery

  """Reads and enables pagination through a set of `InterfaceDiscovery`."""
  interfaceDiscoveriesByInterfaceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InterfaceDiscovery`."""
    orderBy: [InterfaceDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterfaceDiscoveryCondition
  ): InterfaceDiscoveriesConnection! @deprecated(reason: "Please use interfaceDiscoveryByInterfaceid instead")

  """Reads and enables pagination through a set of `InterfaceDiscovery`."""
  interfaceDiscoveriesByParentInterfaceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InterfaceDiscovery`."""
    orderBy: [InterfaceDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterfaceDiscoveryCondition
  ): InterfaceDiscoveriesConnection!
}

"""
A condition to be used against `Interface` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input InterfaceCondition {
  """Checks for equality with the object’s `interfaceid` field."""
  interfaceid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `main` field."""
  main: Int

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `useip` field."""
  useip: Int

  """Checks for equality with the object’s `ip` field."""
  ip: String

  """Checks for equality with the object’s `dns` field."""
  dns: String

  """Checks for equality with the object’s `port` field."""
  port: String

  """Checks for equality with the object’s `bulk` field."""
  bulk: Int
}

"""A connection to a list of `InterfaceDiscovery` values."""
type InterfaceDiscoveriesConnection {
  """A list of `InterfaceDiscovery` objects."""
  nodes: [InterfaceDiscovery]!

  """
  A list of edges which contains the `InterfaceDiscovery` and cursor to aid in pagination.
  """
  edges: [InterfaceDiscoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `InterfaceDiscovery` you could get from the connection.
  """
  totalCount: Int
}

"""A `InterfaceDiscovery` edge in the connection."""
type InterfaceDiscoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `InterfaceDiscovery` at the end of the edge."""
  node: InterfaceDiscovery
}

"""Methods to use when ordering `InterfaceDiscovery`."""
enum InterfaceDiscoveriesOrderBy {
  NATURAL
  INTERFACEID_ASC
  INTERFACEID_DESC
  PARENT_INTERFACEID_ASC
  PARENT_INTERFACEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type InterfaceDiscovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  interfaceid: BigInt!
  parentInterfaceid: BigInt!

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByInterfaceid: Interface

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByParentInterfaceid: Interface
}

"""
A condition to be used against `InterfaceDiscovery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input InterfaceDiscoveryCondition {
  """Checks for equality with the object’s `interfaceid` field."""
  interfaceid: BigInt

  """Checks for equality with the object’s `parentInterfaceid` field."""
  parentInterfaceid: BigInt
}

"""An input for mutations affecting `InterfaceDiscovery`"""
input InterfaceDiscoveryInput {
  interfaceid: BigInt!
  parentInterfaceid: BigInt!
}

"""
Represents an update to a `InterfaceDiscovery`. Fields that are set will be updated.
"""
input InterfaceDiscoveryPatch {
  interfaceid: BigInt
  parentInterfaceid: BigInt
}

"""An input for mutations affecting `Interface`"""
input InterfaceInput {
  interfaceid: BigInt!
  hostid: BigInt!
  main: Int
  type: Int
  useip: Int
  ip: String
  dns: String
  port: String
  bulk: Int
}

"""
Represents an update to a `Interface`. Fields that are set will be updated.
"""
input InterfacePatch {
  interfaceid: BigInt
  hostid: BigInt
  main: Int
  type: Int
  useip: Int
  ip: String
  dns: String
  port: String
  bulk: Int
}

"""A connection to a list of `Interface` values."""
type InterfacesConnection {
  """A list of `Interface` objects."""
  nodes: [Interface]!

  """
  A list of edges which contains the `Interface` and cursor to aid in pagination.
  """
  edges: [InterfacesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Interface` you could get from the connection."""
  totalCount: Int
}

"""A `Interface` edge in the connection."""
type InterfacesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Interface` at the end of the edge."""
  node: Interface
}

"""Methods to use when ordering `Interface`."""
enum InterfacesOrderBy {
  NATURAL
  INTERFACEID_ASC
  INTERFACEID_DESC
  HOSTID_ASC
  HOSTID_DESC
  MAIN_ASC
  MAIN_DESC
  TYPE_ASC
  TYPE_DESC
  USEIP_ASC
  USEIP_DESC
  IP_ASC
  IP_DESC
  DNS_ASC
  DNS_DESC
  PORT_ASC
  PORT_DESC
  BULK_ASC
  BULK_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Item implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemid: BigInt!
  type: Int!
  snmpCommunity: String!
  snmpOid: String!
  hostid: BigInt!
  name: String!
  key_: String!
  delay: Int!
  history: Int!
  trends: Int!
  status: Int!
  valueType: Int!
  trapperHosts: String!
  units: String!
  multiplier: Int!
  delta: Int!
  snmpv3Securityname: String!
  snmpv3Securitylevel: Int!
  snmpv3Authpassphrase: String!
  snmpv3Privpassphrase: String!
  formula: String!
  error: String!
  lastlogsize: BigFloat!
  logtimefmt: String!
  templateid: BigInt
  valuemapid: BigInt
  delayFlex: String!
  params: String!
  ipmiSensor: String!
  dataType: Int!
  authtype: Int!
  username: String!
  password: String!
  publickey: String!
  privatekey: String!
  mtime: Int!
  flags: Int!
  interfaceid: BigInt
  port: String!
  description: String!
  inventoryLink: Int!
  lifetime: String!
  snmpv3Authprotocol: Int!
  snmpv3Privprotocol: Int!
  state: Int!
  snmpv3Contextname: String!
  evaltype: Int!

  """Reads a single `Host` that is related to this `Item`."""
  hostByHostid: Host

  """Reads a single `Item` that is related to this `Item`."""
  itemByTemplateid: Item

  """Reads a single `Valuemap` that is related to this `Item`."""
  valuemapByValuemapid: Valuemap

  """Reads a single `Interface` that is related to this `Item`."""
  interfaceByInterfaceid: Interface

  """Reads and enables pagination through a set of `Item`."""
  itemsByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Httpstepitem`."""
  httpstepitemsByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httpstepitem`."""
    orderBy: [HttpstepitemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttpstepitemCondition
  ): HttpstepitemsConnection!

  """Reads and enables pagination through a set of `Httptestitem`."""
  httptestitemsByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httptestitem`."""
    orderBy: [HttptestitemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttptestitemCondition
  ): HttptestitemsConnection!

  """Reads and enables pagination through a set of `Function`."""
  functionsByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Function`."""
    orderBy: [FunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FunctionCondition
  ): FunctionsConnection!

  """Reads and enables pagination through a set of `Graph`."""
  graphsByYminItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Graph`."""
    orderBy: [GraphsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphCondition
  ): GraphsConnection!

  """Reads and enables pagination through a set of `Graph`."""
  graphsByYmaxItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Graph`."""
    orderBy: [GraphsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphCondition
  ): GraphsConnection!

  """Reads and enables pagination through a set of `GraphsItem`."""
  graphsItemsByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GraphsItem`."""
    orderBy: [GraphsItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphsItemCondition
  ): GraphsItemsConnection!

  """Reads and enables pagination through a set of `ItemsApplication`."""
  itemsApplicationsByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemsApplication`."""
    orderBy: [ItemsApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemsApplicationCondition
  ): ItemsApplicationsConnection!

  """Reads and enables pagination through a set of `ItemDiscovery`."""
  itemDiscoveriesByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemDiscovery`."""
    orderBy: [ItemDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemDiscoveryCondition
  ): ItemDiscoveriesConnection!

  """Reads and enables pagination through a set of `ItemDiscovery`."""
  itemDiscoveriesByParentItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemDiscovery`."""
    orderBy: [ItemDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemDiscoveryCondition
  ): ItemDiscoveriesConnection!

  """Reads and enables pagination through a set of `HostDiscovery`."""
  hostDiscoveriesByParentItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostDiscovery`."""
    orderBy: [HostDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostDiscoveryCondition
  ): HostDiscoveriesConnection!

  """Reads and enables pagination through a set of `ItemConditionOrig`."""
  itemConditionOrigsByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemConditionOrig`."""
    orderBy: [ItemConditionOrigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemConditionOrigCondition
  ): ItemConditionOrigsConnection!

  """Reads and enables pagination through a set of `ApplicationPrototype`."""
  applicationPrototypesByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPrototype`."""
    orderBy: [ApplicationPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPrototypeCondition
  ): ApplicationPrototypesConnection!

  """
  Reads and enables pagination through a set of `ItemApplicationPrototype`.
  """
  itemApplicationPrototypesByItemid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemApplicationPrototype`."""
    orderBy: [ItemApplicationPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemApplicationPrototypeCondition
  ): ItemApplicationPrototypesConnection!
}

type ItemApplicationPrototype implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemApplicationPrototypeid: BigInt!
  applicationPrototypeid: BigInt!
  itemid: BigInt!

  """
  Reads a single `ApplicationPrototype` that is related to this `ItemApplicationPrototype`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype

  """
  Reads a single `Item` that is related to this `ItemApplicationPrototype`.
  """
  itemByItemid: Item
}

"""
A condition to be used against `ItemApplicationPrototype` object types. All
fields are tested for equality and combined with a logical ‘and.’
"""
input ItemApplicationPrototypeCondition {
  """
  Checks for equality with the object’s `itemApplicationPrototypeid` field.
  """
  itemApplicationPrototypeid: BigInt

  """Checks for equality with the object’s `applicationPrototypeid` field."""
  applicationPrototypeid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt
}

"""An input for mutations affecting `ItemApplicationPrototype`"""
input ItemApplicationPrototypeInput {
  itemApplicationPrototypeid: BigInt!
  applicationPrototypeid: BigInt!
  itemid: BigInt!
}

"""
Represents an update to a `ItemApplicationPrototype`. Fields that are set will be updated.
"""
input ItemApplicationPrototypePatch {
  itemApplicationPrototypeid: BigInt
  applicationPrototypeid: BigInt
  itemid: BigInt
}

"""A connection to a list of `ItemApplicationPrototype` values."""
type ItemApplicationPrototypesConnection {
  """A list of `ItemApplicationPrototype` objects."""
  nodes: [ItemApplicationPrototype]!

  """
  A list of edges which contains the `ItemApplicationPrototype` and cursor to aid in pagination.
  """
  edges: [ItemApplicationPrototypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ItemApplicationPrototype` you could get from the connection.
  """
  totalCount: Int
}

"""A `ItemApplicationPrototype` edge in the connection."""
type ItemApplicationPrototypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItemApplicationPrototype` at the end of the edge."""
  node: ItemApplicationPrototype
}

"""Methods to use when ordering `ItemApplicationPrototype`."""
enum ItemApplicationPrototypesOrderBy {
  NATURAL
  ITEM_APPLICATION_PROTOTYPEID_ASC
  ITEM_APPLICATION_PROTOTYPEID_DESC
  APPLICATION_PROTOTYPEID_ASC
  APPLICATION_PROTOTYPEID_DESC
  ITEMID_ASC
  ITEMID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Item` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ItemCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `snmpCommunity` field."""
  snmpCommunity: String

  """Checks for equality with the object’s `snmpOid` field."""
  snmpOid: String

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `key_` field."""
  key_: String

  """Checks for equality with the object’s `delay` field."""
  delay: Int

  """Checks for equality with the object’s `history` field."""
  history: Int

  """Checks for equality with the object’s `trends` field."""
  trends: Int

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `valueType` field."""
  valueType: Int

  """Checks for equality with the object’s `trapperHosts` field."""
  trapperHosts: String

  """Checks for equality with the object’s `units` field."""
  units: String

  """Checks for equality with the object’s `multiplier` field."""
  multiplier: Int

  """Checks for equality with the object’s `delta` field."""
  delta: Int

  """Checks for equality with the object’s `snmpv3Securityname` field."""
  snmpv3Securityname: String

  """Checks for equality with the object’s `snmpv3Securitylevel` field."""
  snmpv3Securitylevel: Int

  """Checks for equality with the object’s `snmpv3Authpassphrase` field."""
  snmpv3Authpassphrase: String

  """Checks for equality with the object’s `snmpv3Privpassphrase` field."""
  snmpv3Privpassphrase: String

  """Checks for equality with the object’s `formula` field."""
  formula: String

  """Checks for equality with the object’s `error` field."""
  error: String

  """Checks for equality with the object’s `lastlogsize` field."""
  lastlogsize: BigFloat

  """Checks for equality with the object’s `logtimefmt` field."""
  logtimefmt: String

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt

  """Checks for equality with the object’s `valuemapid` field."""
  valuemapid: BigInt

  """Checks for equality with the object’s `delayFlex` field."""
  delayFlex: String

  """Checks for equality with the object’s `params` field."""
  params: String

  """Checks for equality with the object’s `ipmiSensor` field."""
  ipmiSensor: String

  """Checks for equality with the object’s `dataType` field."""
  dataType: Int

  """Checks for equality with the object’s `authtype` field."""
  authtype: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `password` field."""
  password: String

  """Checks for equality with the object’s `publickey` field."""
  publickey: String

  """Checks for equality with the object’s `privatekey` field."""
  privatekey: String

  """Checks for equality with the object’s `mtime` field."""
  mtime: Int

  """Checks for equality with the object’s `flags` field."""
  flags: Int

  """Checks for equality with the object’s `interfaceid` field."""
  interfaceid: BigInt

  """Checks for equality with the object’s `port` field."""
  port: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `inventoryLink` field."""
  inventoryLink: Int

  """Checks for equality with the object’s `lifetime` field."""
  lifetime: String

  """Checks for equality with the object’s `snmpv3Authprotocol` field."""
  snmpv3Authprotocol: Int

  """Checks for equality with the object’s `snmpv3Privprotocol` field."""
  snmpv3Privprotocol: Int

  """Checks for equality with the object’s `state` field."""
  state: Int

  """Checks for equality with the object’s `snmpv3Contextname` field."""
  snmpv3Contextname: String

  """Checks for equality with the object’s `evaltype` field."""
  evaltype: Int
}

type ItemConditionOrig implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemConditionid: BigInt!
  itemid: BigInt!
  operator: Int!
  macro: String!
  value: String!

  """Reads a single `Item` that is related to this `ItemConditionOrig`."""
  itemByItemid: Item
}

"""
A condition to be used against `ItemConditionOrig` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ItemConditionOrigCondition {
  """Checks for equality with the object’s `itemConditionid` field."""
  itemConditionid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `operator` field."""
  operator: Int

  """Checks for equality with the object’s `macro` field."""
  macro: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `ItemConditionOrig`"""
input ItemConditionOrigInput {
  itemConditionid: BigInt!
  itemid: BigInt!
  operator: Int
  macro: String
  value: String
}

"""
Represents an update to a `ItemConditionOrig`. Fields that are set will be updated.
"""
input ItemConditionOrigPatch {
  itemConditionid: BigInt
  itemid: BigInt
  operator: Int
  macro: String
  value: String
}

"""A connection to a list of `ItemConditionOrig` values."""
type ItemConditionOrigsConnection {
  """A list of `ItemConditionOrig` objects."""
  nodes: [ItemConditionOrig]!

  """
  A list of edges which contains the `ItemConditionOrig` and cursor to aid in pagination.
  """
  edges: [ItemConditionOrigsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ItemConditionOrig` you could get from the connection.
  """
  totalCount: Int
}

"""A `ItemConditionOrig` edge in the connection."""
type ItemConditionOrigsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItemConditionOrig` at the end of the edge."""
  node: ItemConditionOrig
}

"""Methods to use when ordering `ItemConditionOrig`."""
enum ItemConditionOrigsOrderBy {
  NATURAL
  ITEM_CONDITIONID_ASC
  ITEM_CONDITIONID_DESC
  ITEMID_ASC
  ITEMID_DESC
  OPERATOR_ASC
  OPERATOR_DESC
  MACRO_ASC
  MACRO_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `ItemDiscovery` values."""
type ItemDiscoveriesConnection {
  """A list of `ItemDiscovery` objects."""
  nodes: [ItemDiscovery]!

  """
  A list of edges which contains the `ItemDiscovery` and cursor to aid in pagination.
  """
  edges: [ItemDiscoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ItemDiscovery` you could get from the connection."""
  totalCount: Int
}

"""A `ItemDiscovery` edge in the connection."""
type ItemDiscoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItemDiscovery` at the end of the edge."""
  node: ItemDiscovery
}

"""Methods to use when ordering `ItemDiscovery`."""
enum ItemDiscoveriesOrderBy {
  NATURAL
  ITEMDISCOVERYID_ASC
  ITEMDISCOVERYID_DESC
  ITEMID_ASC
  ITEMID_DESC
  PARENT_ITEMID_ASC
  PARENT_ITEMID_DESC
  KEY_ASC
  KEY_DESC
  LASTCHECK_ASC
  LASTCHECK_DESC
  TS_DELETE_ASC
  TS_DELETE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ItemDiscovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemdiscoveryid: BigInt!
  itemid: BigInt!
  parentItemid: BigInt!
  key_: String!
  lastcheck: Int!
  tsDelete: Int!

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByItemid: Item

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByParentItemid: Item
}

"""
A condition to be used against `ItemDiscovery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ItemDiscoveryCondition {
  """Checks for equality with the object’s `itemdiscoveryid` field."""
  itemdiscoveryid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `parentItemid` field."""
  parentItemid: BigInt

  """Checks for equality with the object’s `key_` field."""
  key_: String

  """Checks for equality with the object’s `lastcheck` field."""
  lastcheck: Int

  """Checks for equality with the object’s `tsDelete` field."""
  tsDelete: Int
}

"""An input for mutations affecting `ItemDiscovery`"""
input ItemDiscoveryInput {
  itemdiscoveryid: BigInt!
  itemid: BigInt!
  parentItemid: BigInt!
  key_: String
  lastcheck: Int
  tsDelete: Int
}

"""
Represents an update to a `ItemDiscovery`. Fields that are set will be updated.
"""
input ItemDiscoveryPatch {
  itemdiscoveryid: BigInt
  itemid: BigInt
  parentItemid: BigInt
  key_: String
  lastcheck: Int
  tsDelete: Int
}

"""An input for mutations affecting `Item`"""
input ItemInput {
  itemid: BigInt!
  type: Int
  snmpCommunity: String
  snmpOid: String
  hostid: BigInt!
  name: String
  key_: String
  delay: Int
  history: Int
  trends: Int
  status: Int
  valueType: Int
  trapperHosts: String
  units: String
  multiplier: Int
  delta: Int
  snmpv3Securityname: String
  snmpv3Securitylevel: Int
  snmpv3Authpassphrase: String
  snmpv3Privpassphrase: String
  formula: String
  error: String
  lastlogsize: BigFloat
  logtimefmt: String
  templateid: BigInt
  valuemapid: BigInt
  delayFlex: String
  params: String
  ipmiSensor: String
  dataType: Int
  authtype: Int
  username: String
  password: String
  publickey: String
  privatekey: String
  mtime: Int
  flags: Int
  interfaceid: BigInt
  port: String
  description: String
  inventoryLink: Int
  lifetime: String
  snmpv3Authprotocol: Int
  snmpv3Privprotocol: Int
  state: Int
  snmpv3Contextname: String
  evaltype: Int
}

"""
Represents an update to a `Item`. Fields that are set will be updated.
"""
input ItemPatch {
  itemid: BigInt
  type: Int
  snmpCommunity: String
  snmpOid: String
  hostid: BigInt
  name: String
  key_: String
  delay: Int
  history: Int
  trends: Int
  status: Int
  valueType: Int
  trapperHosts: String
  units: String
  multiplier: Int
  delta: Int
  snmpv3Securityname: String
  snmpv3Securitylevel: Int
  snmpv3Authpassphrase: String
  snmpv3Privpassphrase: String
  formula: String
  error: String
  lastlogsize: BigFloat
  logtimefmt: String
  templateid: BigInt
  valuemapid: BigInt
  delayFlex: String
  params: String
  ipmiSensor: String
  dataType: Int
  authtype: Int
  username: String
  password: String
  publickey: String
  privatekey: String
  mtime: Int
  flags: Int
  interfaceid: BigInt
  port: String
  description: String
  inventoryLink: Int
  lifetime: String
  snmpv3Authprotocol: Int
  snmpv3Privprotocol: Int
  state: Int
  snmpv3Contextname: String
  evaltype: Int
}

type ItemsApplication implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemappid: BigInt!
  applicationid: BigInt!
  itemid: BigInt!

  """
  Reads a single `Application` that is related to this `ItemsApplication`.
  """
  applicationByApplicationid: Application

  """Reads a single `Item` that is related to this `ItemsApplication`."""
  itemByItemid: Item
}

"""
A condition to be used against `ItemsApplication` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ItemsApplicationCondition {
  """Checks for equality with the object’s `itemappid` field."""
  itemappid: BigInt

  """Checks for equality with the object’s `applicationid` field."""
  applicationid: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt
}

"""An input for mutations affecting `ItemsApplication`"""
input ItemsApplicationInput {
  itemappid: BigInt!
  applicationid: BigInt!
  itemid: BigInt!
}

"""
Represents an update to a `ItemsApplication`. Fields that are set will be updated.
"""
input ItemsApplicationPatch {
  itemappid: BigInt
  applicationid: BigInt
  itemid: BigInt
}

"""A connection to a list of `ItemsApplication` values."""
type ItemsApplicationsConnection {
  """A list of `ItemsApplication` objects."""
  nodes: [ItemsApplication]!

  """
  A list of edges which contains the `ItemsApplication` and cursor to aid in pagination.
  """
  edges: [ItemsApplicationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ItemsApplication` you could get from the connection.
  """
  totalCount: Int
}

"""A `ItemsApplication` edge in the connection."""
type ItemsApplicationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ItemsApplication` at the end of the edge."""
  node: ItemsApplication
}

"""Methods to use when ordering `ItemsApplication`."""
enum ItemsApplicationsOrderBy {
  NATURAL
  ITEMAPPID_ASC
  ITEMAPPID_DESC
  APPLICATIONID_ASC
  APPLICATIONID_DESC
  ITEMID_ASC
  ITEMID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Item` values."""
type ItemsConnection {
  """A list of `Item` objects."""
  nodes: [Item]!

  """
  A list of edges which contains the `Item` and cursor to aid in pagination.
  """
  edges: [ItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Item` you could get from the connection."""
  totalCount: Int
}

"""A `Item` edge in the connection."""
type ItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Item` at the end of the edge."""
  node: Item
}

"""Methods to use when ordering `Item`."""
enum ItemsOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  TYPE_ASC
  TYPE_DESC
  SNMP_COMMUNITY_ASC
  SNMP_COMMUNITY_DESC
  SNMP_OID_ASC
  SNMP_OID_DESC
  HOSTID_ASC
  HOSTID_DESC
  NAME_ASC
  NAME_DESC
  KEY_ASC
  KEY_DESC
  DELAY_ASC
  DELAY_DESC
  HISTORY_ASC
  HISTORY_DESC
  TRENDS_ASC
  TRENDS_DESC
  STATUS_ASC
  STATUS_DESC
  VALUE_TYPE_ASC
  VALUE_TYPE_DESC
  TRAPPER_HOSTS_ASC
  TRAPPER_HOSTS_DESC
  UNITS_ASC
  UNITS_DESC
  MULTIPLIER_ASC
  MULTIPLIER_DESC
  DELTA_ASC
  DELTA_DESC
  SNMPV3_SECURITYNAME_ASC
  SNMPV3_SECURITYNAME_DESC
  SNMPV3_SECURITYLEVEL_ASC
  SNMPV3_SECURITYLEVEL_DESC
  SNMPV3_AUTHPASSPHRASE_ASC
  SNMPV3_AUTHPASSPHRASE_DESC
  SNMPV3_PRIVPASSPHRASE_ASC
  SNMPV3_PRIVPASSPHRASE_DESC
  FORMULA_ASC
  FORMULA_DESC
  ERROR_ASC
  ERROR_DESC
  LASTLOGSIZE_ASC
  LASTLOGSIZE_DESC
  LOGTIMEFMT_ASC
  LOGTIMEFMT_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  VALUEMAPID_ASC
  VALUEMAPID_DESC
  DELAY_FLEX_ASC
  DELAY_FLEX_DESC
  PARAMS_ASC
  PARAMS_DESC
  IPMI_SENSOR_ASC
  IPMI_SENSOR_DESC
  DATA_TYPE_ASC
  DATA_TYPE_DESC
  AUTHTYPE_ASC
  AUTHTYPE_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  PUBLICKEY_ASC
  PUBLICKEY_DESC
  PRIVATEKEY_ASC
  PRIVATEKEY_DESC
  MTIME_ASC
  MTIME_DESC
  FLAGS_ASC
  FLAGS_DESC
  INTERFACEID_ASC
  INTERFACEID_DESC
  PORT_ASC
  PORT_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  INVENTORY_LINK_ASC
  INVENTORY_LINK_DESC
  LIFETIME_ASC
  LIFETIME_DESC
  SNMPV3_AUTHPROTOCOL_ASC
  SNMPV3_AUTHPROTOCOL_DESC
  SNMPV3_PRIVPROTOCOL_ASC
  SNMPV3_PRIVPROTOCOL_DESC
  STATE_ASC
  STATE_DESC
  SNMPV3_CONTEXTNAME_ASC
  SNMPV3_CONTEXTNAME_DESC
  EVALTYPE_ASC
  EVALTYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A JavaScript object encoded in the JSON format as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Maintenance implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  maintenanceid: BigInt!
  name: String!
  maintenanceType: Int!
  description: String!
  activeSince: Int!
  activeTill: Int!

  """Reads and enables pagination through a set of `Host`."""
  hostsByMaintenanceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Host`."""
    orderBy: [HostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostCondition
  ): HostsConnection!

  """Reads and enables pagination through a set of `MaintenancesHost`."""
  maintenancesHostsByMaintenanceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesHost`."""
    orderBy: [MaintenancesHostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesHostCondition
  ): MaintenancesHostsConnection!

  """Reads and enables pagination through a set of `MaintenancesGroup`."""
  maintenancesGroupsByMaintenanceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesGroup`."""
    orderBy: [MaintenancesGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesGroupCondition
  ): MaintenancesGroupsConnection!

  """Reads and enables pagination through a set of `MaintenancesWindow`."""
  maintenancesWindowsByMaintenanceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesWindow`."""
    orderBy: [MaintenancesWindowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesWindowCondition
  ): MaintenancesWindowsConnection!
}

"""
A condition to be used against `Maintenance` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MaintenanceCondition {
  """Checks for equality with the object’s `maintenanceid` field."""
  maintenanceid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `maintenanceType` field."""
  maintenanceType: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `activeSince` field."""
  activeSince: Int

  """Checks for equality with the object’s `activeTill` field."""
  activeTill: Int
}

"""An input for mutations affecting `Maintenance`"""
input MaintenanceInput {
  maintenanceid: BigInt!
  name: String
  maintenanceType: Int
  description: String
  activeSince: Int
  activeTill: Int
}

"""
Represents an update to a `Maintenance`. Fields that are set will be updated.
"""
input MaintenancePatch {
  maintenanceid: BigInt
  name: String
  maintenanceType: Int
  description: String
  activeSince: Int
  activeTill: Int
}

"""A connection to a list of `Maintenance` values."""
type MaintenancesConnection {
  """A list of `Maintenance` objects."""
  nodes: [Maintenance]!

  """
  A list of edges which contains the `Maintenance` and cursor to aid in pagination.
  """
  edges: [MaintenancesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Maintenance` you could get from the connection."""
  totalCount: Int
}

"""A `Maintenance` edge in the connection."""
type MaintenancesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Maintenance` at the end of the edge."""
  node: Maintenance
}

type MaintenancesGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  maintenanceGroupid: BigInt!
  maintenanceid: BigInt!
  groupid: BigInt!

  """
  Reads a single `Maintenance` that is related to this `MaintenancesGroup`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Group` that is related to this `MaintenancesGroup`."""
  groupByGroupid: Group
}

"""
A condition to be used against `MaintenancesGroup` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MaintenancesGroupCondition {
  """Checks for equality with the object’s `maintenanceGroupid` field."""
  maintenanceGroupid: BigInt

  """Checks for equality with the object’s `maintenanceid` field."""
  maintenanceid: BigInt

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt
}

"""An input for mutations affecting `MaintenancesGroup`"""
input MaintenancesGroupInput {
  maintenanceGroupid: BigInt!
  maintenanceid: BigInt!
  groupid: BigInt!
}

"""
Represents an update to a `MaintenancesGroup`. Fields that are set will be updated.
"""
input MaintenancesGroupPatch {
  maintenanceGroupid: BigInt
  maintenanceid: BigInt
  groupid: BigInt
}

"""A connection to a list of `MaintenancesGroup` values."""
type MaintenancesGroupsConnection {
  """A list of `MaintenancesGroup` objects."""
  nodes: [MaintenancesGroup]!

  """
  A list of edges which contains the `MaintenancesGroup` and cursor to aid in pagination.
  """
  edges: [MaintenancesGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenancesGroup` you could get from the connection.
  """
  totalCount: Int
}

"""A `MaintenancesGroup` edge in the connection."""
type MaintenancesGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenancesGroup` at the end of the edge."""
  node: MaintenancesGroup
}

"""Methods to use when ordering `MaintenancesGroup`."""
enum MaintenancesGroupsOrderBy {
  NATURAL
  MAINTENANCE_GROUPID_ASC
  MAINTENANCE_GROUPID_DESC
  MAINTENANCEID_ASC
  MAINTENANCEID_DESC
  GROUPID_ASC
  GROUPID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MaintenancesHost implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  maintenanceHostid: BigInt!
  maintenanceid: BigInt!
  hostid: BigInt!

  """
  Reads a single `Maintenance` that is related to this `MaintenancesHost`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `MaintenancesHost`."""
  hostByHostid: Host
}

"""
A condition to be used against `MaintenancesHost` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MaintenancesHostCondition {
  """Checks for equality with the object’s `maintenanceHostid` field."""
  maintenanceHostid: BigInt

  """Checks for equality with the object’s `maintenanceid` field."""
  maintenanceid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt
}

"""An input for mutations affecting `MaintenancesHost`"""
input MaintenancesHostInput {
  maintenanceHostid: BigInt!
  maintenanceid: BigInt!
  hostid: BigInt!
}

"""
Represents an update to a `MaintenancesHost`. Fields that are set will be updated.
"""
input MaintenancesHostPatch {
  maintenanceHostid: BigInt
  maintenanceid: BigInt
  hostid: BigInt
}

"""A connection to a list of `MaintenancesHost` values."""
type MaintenancesHostsConnection {
  """A list of `MaintenancesHost` objects."""
  nodes: [MaintenancesHost]!

  """
  A list of edges which contains the `MaintenancesHost` and cursor to aid in pagination.
  """
  edges: [MaintenancesHostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenancesHost` you could get from the connection.
  """
  totalCount: Int
}

"""A `MaintenancesHost` edge in the connection."""
type MaintenancesHostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenancesHost` at the end of the edge."""
  node: MaintenancesHost
}

"""Methods to use when ordering `MaintenancesHost`."""
enum MaintenancesHostsOrderBy {
  NATURAL
  MAINTENANCE_HOSTID_ASC
  MAINTENANCE_HOSTID_DESC
  MAINTENANCEID_ASC
  MAINTENANCEID_DESC
  HOSTID_ASC
  HOSTID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Maintenance`."""
enum MaintenancesOrderBy {
  NATURAL
  MAINTENANCEID_ASC
  MAINTENANCEID_DESC
  NAME_ASC
  NAME_DESC
  MAINTENANCE_TYPE_ASC
  MAINTENANCE_TYPE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  ACTIVE_SINCE_ASC
  ACTIVE_SINCE_DESC
  ACTIVE_TILL_ASC
  ACTIVE_TILL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type MaintenancesWindow implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  maintenanceTimeperiodid: BigInt!
  maintenanceid: BigInt!
  timeperiodid: BigInt!

  """
  Reads a single `Maintenance` that is related to this `MaintenancesWindow`.
  """
  maintenanceByMaintenanceid: Maintenance

  """
  Reads a single `Timeperiod` that is related to this `MaintenancesWindow`.
  """
  timeperiodByTimeperiodid: Timeperiod
}

"""
A condition to be used against `MaintenancesWindow` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MaintenancesWindowCondition {
  """
  Checks for equality with the object’s `maintenanceTimeperiodid` field.
  """
  maintenanceTimeperiodid: BigInt

  """Checks for equality with the object’s `maintenanceid` field."""
  maintenanceid: BigInt

  """Checks for equality with the object’s `timeperiodid` field."""
  timeperiodid: BigInt
}

"""An input for mutations affecting `MaintenancesWindow`"""
input MaintenancesWindowInput {
  maintenanceTimeperiodid: BigInt!
  maintenanceid: BigInt!
  timeperiodid: BigInt!
}

"""
Represents an update to a `MaintenancesWindow`. Fields that are set will be updated.
"""
input MaintenancesWindowPatch {
  maintenanceTimeperiodid: BigInt
  maintenanceid: BigInt
  timeperiodid: BigInt
}

"""A connection to a list of `MaintenancesWindow` values."""
type MaintenancesWindowsConnection {
  """A list of `MaintenancesWindow` objects."""
  nodes: [MaintenancesWindow]!

  """
  A list of edges which contains the `MaintenancesWindow` and cursor to aid in pagination.
  """
  edges: [MaintenancesWindowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MaintenancesWindow` you could get from the connection.
  """
  totalCount: Int
}

"""A `MaintenancesWindow` edge in the connection."""
type MaintenancesWindowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MaintenancesWindow` at the end of the edge."""
  node: MaintenancesWindow
}

"""Methods to use when ordering `MaintenancesWindow`."""
enum MaintenancesWindowsOrderBy {
  NATURAL
  MAINTENANCE_TIMEPERIODID_ASC
  MAINTENANCE_TIMEPERIODID_DESC
  MAINTENANCEID_ASC
  MAINTENANCEID_DESC
  TIMEPERIODID_ASC
  TIMEPERIODID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Mapping implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  mappingid: BigInt!
  valuemapid: BigInt!
  value: String!
  newvalue: String!

  """Reads a single `Valuemap` that is related to this `Mapping`."""
  valuemapByValuemapid: Valuemap
}

"""
A condition to be used against `Mapping` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MappingCondition {
  """Checks for equality with the object’s `mappingid` field."""
  mappingid: BigInt

  """Checks for equality with the object’s `valuemapid` field."""
  valuemapid: BigInt

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `newvalue` field."""
  newvalue: String
}

"""An input for mutations affecting `Mapping`"""
input MappingInput {
  mappingid: BigInt!
  valuemapid: BigInt!
  value: String
  newvalue: String
}

"""
Represents an update to a `Mapping`. Fields that are set will be updated.
"""
input MappingPatch {
  mappingid: BigInt
  valuemapid: BigInt
  value: String
  newvalue: String
}

"""A connection to a list of `Mapping` values."""
type MappingsConnection {
  """A list of `Mapping` objects."""
  nodes: [Mapping]!

  """
  A list of edges which contains the `Mapping` and cursor to aid in pagination.
  """
  edges: [MappingsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Mapping` you could get from the connection."""
  totalCount: Int
}

"""A `Mapping` edge in the connection."""
type MappingsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Mapping` at the end of the edge."""
  node: Mapping
}

"""Methods to use when ordering `Mapping`."""
enum MappingsOrderBy {
  NATURAL
  MAPPINGID_ASC
  MAPPINGID_DESC
  VALUEMAPID_ASC
  VALUEMAPID_DESC
  VALUE_ASC
  VALUE_DESC
  NEWVALUE_ASC
  NEWVALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Media implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  mediaid: BigInt!
  userid: BigInt!
  mediatypeid: BigInt!
  sendto: String!
  active: Int!
  severity: Int!
  period: String!

  """Reads a single `User` that is related to this `Media`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Media`."""
  mediaTypeByMediatypeid: MediaType
}

"""
A condition to be used against `Media` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input MediaCondition {
  """Checks for equality with the object’s `mediaid` field."""
  mediaid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `mediatypeid` field."""
  mediatypeid: BigInt

  """Checks for equality with the object’s `sendto` field."""
  sendto: String

  """Checks for equality with the object’s `active` field."""
  active: Int

  """Checks for equality with the object’s `severity` field."""
  severity: Int

  """Checks for equality with the object’s `period` field."""
  period: String
}

"""A connection to a list of `Media` values."""
type MediaConnection {
  """A list of `Media` objects."""
  nodes: [Media]!

  """
  A list of edges which contains the `Media` and cursor to aid in pagination.
  """
  edges: [MediaEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Media` you could get from the connection."""
  totalCount: Int
}

"""A `Media` edge in the connection."""
type MediaEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Media` at the end of the edge."""
  node: Media
}

"""An input for mutations affecting `Media`"""
input MediaInput {
  mediaid: BigInt!
  userid: BigInt!
  mediatypeid: BigInt!
  sendto: String
  active: Int
  severity: Int
  period: String
}

"""Methods to use when ordering `Media`."""
enum MediaOrderBy {
  NATURAL
  MEDIAID_ASC
  MEDIAID_DESC
  USERID_ASC
  USERID_DESC
  MEDIATYPEID_ASC
  MEDIATYPEID_DESC
  SENDTO_ASC
  SENDTO_DESC
  ACTIVE_ASC
  ACTIVE_DESC
  SEVERITY_ASC
  SEVERITY_DESC
  PERIOD_ASC
  PERIOD_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
Represents an update to a `Media`. Fields that are set will be updated.
"""
input MediaPatch {
  mediaid: BigInt
  userid: BigInt
  mediatypeid: BigInt
  sendto: String
  active: Int
  severity: Int
  period: String
}

type MediaType implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  mediatypeid: BigInt!
  type: Int!
  description: String!
  smtpServer: String!
  smtpHelo: String!
  smtpEmail: String!
  execPath: String!
  gsmModem: String!
  username: String!
  passwd: String!
  status: Int!
  smtpPort: Int!
  smtpSecurity: Int!
  smtpVerifyPeer: Int!
  smtpVerifyHost: Int!
  smtpAuthentication: Int!
  execParams: String!

  """Reads and enables pagination through a set of `Opmessage`."""
  opmessagesByMediatypeid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opmessage`."""
    orderBy: [OpmessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageCondition
  ): OpmessagesConnection!

  """Reads and enables pagination through a set of `Media`."""
  mediaByMediatypeid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection!

  """Reads and enables pagination through a set of `Alert`."""
  alertsByMediatypeid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlertCondition
  ): AlertsConnection!
}

"""
A condition to be used against `MediaType` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input MediaTypeCondition {
  """Checks for equality with the object’s `mediatypeid` field."""
  mediatypeid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `smtpServer` field."""
  smtpServer: String

  """Checks for equality with the object’s `smtpHelo` field."""
  smtpHelo: String

  """Checks for equality with the object’s `smtpEmail` field."""
  smtpEmail: String

  """Checks for equality with the object’s `execPath` field."""
  execPath: String

  """Checks for equality with the object’s `gsmModem` field."""
  gsmModem: String

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `passwd` field."""
  passwd: String

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `smtpPort` field."""
  smtpPort: Int

  """Checks for equality with the object’s `smtpSecurity` field."""
  smtpSecurity: Int

  """Checks for equality with the object’s `smtpVerifyPeer` field."""
  smtpVerifyPeer: Int

  """Checks for equality with the object’s `smtpVerifyHost` field."""
  smtpVerifyHost: Int

  """Checks for equality with the object’s `smtpAuthentication` field."""
  smtpAuthentication: Int

  """Checks for equality with the object’s `execParams` field."""
  execParams: String
}

"""An input for mutations affecting `MediaType`"""
input MediaTypeInput {
  mediatypeid: BigInt!
  type: Int
  description: String
  smtpServer: String
  smtpHelo: String
  smtpEmail: String
  execPath: String
  gsmModem: String
  username: String
  passwd: String
  status: Int
  smtpPort: Int
  smtpSecurity: Int
  smtpVerifyPeer: Int
  smtpVerifyHost: Int
  smtpAuthentication: Int
  execParams: String
}

"""
Represents an update to a `MediaType`. Fields that are set will be updated.
"""
input MediaTypePatch {
  mediatypeid: BigInt
  type: Int
  description: String
  smtpServer: String
  smtpHelo: String
  smtpEmail: String
  execPath: String
  gsmModem: String
  username: String
  passwd: String
  status: Int
  smtpPort: Int
  smtpSecurity: Int
  smtpVerifyPeer: Int
  smtpVerifyHost: Int
  smtpAuthentication: Int
  execParams: String
}

"""A connection to a list of `MediaType` values."""
type MediaTypesConnection {
  """A list of `MediaType` objects."""
  nodes: [MediaType]!

  """
  A list of edges which contains the `MediaType` and cursor to aid in pagination.
  """
  edges: [MediaTypesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `MediaType` you could get from the connection."""
  totalCount: Int
}

"""A `MediaType` edge in the connection."""
type MediaTypesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MediaType` at the end of the edge."""
  node: MediaType
}

"""Methods to use when ordering `MediaType`."""
enum MediaTypesOrderBy {
  NATURAL
  MEDIATYPEID_ASC
  MEDIATYPEID_DESC
  TYPE_ASC
  TYPE_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  SMTP_SERVER_ASC
  SMTP_SERVER_DESC
  SMTP_HELO_ASC
  SMTP_HELO_DESC
  SMTP_EMAIL_ASC
  SMTP_EMAIL_DESC
  EXEC_PATH_ASC
  EXEC_PATH_DESC
  GSM_MODEM_ASC
  GSM_MODEM_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWD_ASC
  PASSWD_DESC
  STATUS_ASC
  STATUS_DESC
  SMTP_PORT_ASC
  SMTP_PORT_DESC
  SMTP_SECURITY_ASC
  SMTP_SECURITY_DESC
  SMTP_VERIFY_PEER_ASC
  SMTP_VERIFY_PEER_DESC
  SMTP_VERIFY_HOST_ASC
  SMTP_VERIFY_HOST_DESC
  SMTP_AUTHENTICATION_ASC
  SMTP_AUTHENTICATION_DESC
  EXEC_PARAMS_ASC
  EXEC_PARAMS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Acknowledge`."""
  createAcknowledge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAcknowledgeInput!
  ): CreateAcknowledgePayload

  """Creates a single `Action`."""
  createAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateActionInput!
  ): CreateActionPayload

  """Creates a single `Alert`."""
  createAlert(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAlertInput!
  ): CreateAlertPayload

  """Creates a single `ApplicationDiscovery`."""
  createApplicationDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationDiscoveryInput!
  ): CreateApplicationDiscoveryPayload

  """Creates a single `ApplicationPrototype`."""
  createApplicationPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationPrototypeInput!
  ): CreateApplicationPrototypePayload

  """Creates a single `ApplicationTemplate`."""
  createApplicationTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationTemplateInput!
  ): CreateApplicationTemplatePayload

  """Creates a single `Application`."""
  createApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateApplicationInput!
  ): CreateApplicationPayload

  """Creates a single `Auditlog`."""
  createAuditlog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAuditlogInput!
  ): CreateAuditlogPayload

  """Creates a single `AuditlogDetail`."""
  createAuditlogDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAuditlogDetailInput!
  ): CreateAuditlogDetailPayload

  """Creates a single `AutoregHost`."""
  createAutoregHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateAutoregHostInput!
  ): CreateAutoregHostPayload

  """Creates a single `Condition`."""
  createCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConditionInput!
  ): CreateConditionPayload

  """Creates a single `Config`."""
  createConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateConfigInput!
  ): CreateConfigPayload

  """Creates a single `CorrCondition`."""
  createCorrCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCorrConditionInput!
  ): CreateCorrConditionPayload

  """Creates a single `CorrConditionGroup`."""
  createCorrConditionGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCorrConditionGroupInput!
  ): CreateCorrConditionGroupPayload

  """Creates a single `CorrConditionTag`."""
  createCorrConditionTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCorrConditionTagInput!
  ): CreateCorrConditionTagPayload

  """Creates a single `CorrConditionTagpair`."""
  createCorrConditionTagpair(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCorrConditionTagpairInput!
  ): CreateCorrConditionTagpairPayload

  """Creates a single `CorrConditionTagvalue`."""
  createCorrConditionTagvalue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCorrConditionTagvalueInput!
  ): CreateCorrConditionTagvaluePayload

  """Creates a single `CorrOperation`."""
  createCorrOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCorrOperationInput!
  ): CreateCorrOperationPayload

  """Creates a single `Correlation`."""
  createCorrelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCorrelationInput!
  ): CreateCorrelationPayload

  """Creates a single `Dbversion`."""
  createDbversion(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDbversionInput!
  ): CreateDbversionPayload

  """Creates a single `Dcheck`."""
  createDcheck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDcheckInput!
  ): CreateDcheckPayload

  """Creates a single `Dhost`."""
  createDhost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDhostInput!
  ): CreateDhostPayload

  """Creates a single `Drule`."""
  createDrule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDruleInput!
  ): CreateDrulePayload

  """Creates a single `Dservice`."""
  createDservice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateDserviceInput!
  ): CreateDservicePayload

  """Creates a single `Escalation`."""
  createEscalation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEscalationInput!
  ): CreateEscalationPayload

  """Creates a single `EventRecovery`."""
  createEventRecovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventRecoveryInput!
  ): CreateEventRecoveryPayload

  """Creates a single `EventTag`."""
  createEventTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventTagInput!
  ): CreateEventTagPayload

  """Creates a single `Event`."""
  createEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateEventInput!
  ): CreateEventPayload

  """Creates a single `Expression`."""
  createExpression(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateExpressionInput!
  ): CreateExpressionPayload

  """Creates a single `Fact`."""
  createFact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFactInput!
  ): CreateFactPayload

  """Creates a single `Function`."""
  createFunction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateFunctionInput!
  ): CreateFunctionPayload

  """Creates a single `Globalmacro`."""
  createGlobalmacro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGlobalmacroInput!
  ): CreateGlobalmacroPayload

  """Creates a single `Globalvar`."""
  createGlobalvar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGlobalvarInput!
  ): CreateGlobalvarPayload

  """Creates a single `GraphDiscovery`."""
  createGraphDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGraphDiscoveryInput!
  ): CreateGraphDiscoveryPayload

  """Creates a single `GraphTheme`."""
  createGraphTheme(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGraphThemeInput!
  ): CreateGraphThemePayload

  """Creates a single `Graph`."""
  createGraph(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGraphInput!
  ): CreateGraphPayload

  """Creates a single `GraphsItem`."""
  createGraphsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGraphsItemInput!
  ): CreateGraphsItemPayload

  """Creates a single `GroupDiscovery`."""
  createGroupDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupDiscoveryInput!
  ): CreateGroupDiscoveryPayload

  """Creates a single `GroupPrototype`."""
  createGroupPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupPrototypeInput!
  ): CreateGroupPrototypePayload

  """Creates a single `Group`."""
  createGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateGroupInput!
  ): CreateGroupPayload

  """Creates a single `History`."""
  createHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHistoryInput!
  ): CreateHistoryPayload

  """Creates a single `HistoryLog`."""
  createHistoryLog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHistoryLogInput!
  ): CreateHistoryLogPayload

  """Creates a single `HistoryStr`."""
  createHistoryStr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHistoryStrInput!
  ): CreateHistoryStrPayload

  """Creates a single `HistoryText`."""
  createHistoryText(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHistoryTextInput!
  ): CreateHistoryTextPayload

  """Creates a single `HistoryUint`."""
  createHistoryUint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHistoryUintInput!
  ): CreateHistoryUintPayload

  """Creates a single `HostDiscovery`."""
  createHostDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHostDiscoveryInput!
  ): CreateHostDiscoveryPayload

  """Creates a single `HostInventory`."""
  createHostInventory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHostInventoryInput!
  ): CreateHostInventoryPayload

  """Creates a single `Hostmacro`."""
  createHostmacro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHostmacroInput!
  ): CreateHostmacroPayload

  """Creates a single `Host`."""
  createHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHostInput!
  ): CreateHostPayload

  """Creates a single `HostsGroup`."""
  createHostsGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHostsGroupInput!
  ): CreateHostsGroupPayload

  """Creates a single `HostsTemplate`."""
  createHostsTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHostsTemplateInput!
  ): CreateHostsTemplatePayload

  """Creates a single `Housekeeper`."""
  createHousekeeper(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHousekeeperInput!
  ): CreateHousekeeperPayload

  """Creates a single `Httpstep`."""
  createHttpstep(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHttpstepInput!
  ): CreateHttpstepPayload

  """Creates a single `Httpstepitem`."""
  createHttpstepitem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHttpstepitemInput!
  ): CreateHttpstepitemPayload

  """Creates a single `Httptest`."""
  createHttptest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHttptestInput!
  ): CreateHttptestPayload

  """Creates a single `Httptestitem`."""
  createHttptestitem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateHttptestitemInput!
  ): CreateHttptestitemPayload

  """Creates a single `IconMap`."""
  createIconMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIconMapInput!
  ): CreateIconMapPayload

  """Creates a single `IconMapping`."""
  createIconMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIconMappingInput!
  ): CreateIconMappingPayload

  """Creates a single `Id`."""
  createId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateIdInput!
  ): CreateIdPayload

  """Creates a single `Image`."""
  createImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateImageInput!
  ): CreateImagePayload

  """Creates a single `Interface`."""
  createInterface(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInterfaceInput!
  ): CreateInterfacePayload

  """Creates a single `InterfaceDiscovery`."""
  createInterfaceDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateInterfaceDiscoveryInput!
  ): CreateInterfaceDiscoveryPayload

  """Creates a single `ItemApplicationPrototype`."""
  createItemApplicationPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemApplicationPrototypeInput!
  ): CreateItemApplicationPrototypePayload

  """Creates a single `ItemConditionOrig`."""
  createItemConditionOrig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemConditionOrigInput!
  ): CreateItemConditionOrigPayload

  """Creates a single `ItemDiscovery`."""
  createItemDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemDiscoveryInput!
  ): CreateItemDiscoveryPayload

  """Creates a single `Item`."""
  createItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemInput!
  ): CreateItemPayload

  """Creates a single `ItemsApplication`."""
  createItemsApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateItemsApplicationInput!
  ): CreateItemsApplicationPayload

  """Creates a single `Maintenance`."""
  createMaintenance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMaintenanceInput!
  ): CreateMaintenancePayload

  """Creates a single `MaintenancesGroup`."""
  createMaintenancesGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMaintenancesGroupInput!
  ): CreateMaintenancesGroupPayload

  """Creates a single `MaintenancesHost`."""
  createMaintenancesHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMaintenancesHostInput!
  ): CreateMaintenancesHostPayload

  """Creates a single `MaintenancesWindow`."""
  createMaintenancesWindow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMaintenancesWindowInput!
  ): CreateMaintenancesWindowPayload

  """Creates a single `Mapping`."""
  createMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMappingInput!
  ): CreateMappingPayload

  """Creates a single `Media`."""
  createMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMediaInput!
  ): CreateMediaPayload

  """Creates a single `MediaType`."""
  createMediaType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMediaTypeInput!
  ): CreateMediaTypePayload

  """Creates a single `NetstatsFact`."""
  createNetstatsFact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNetstatsFactInput!
  ): CreateNetstatsFactPayload

  """Creates a single `NetstatsFactsBck`."""
  createNetstatsFactsBck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateNetstatsFactsBckInput!
  ): CreateNetstatsFactsBckPayload

  """Creates a single `Opcommand`."""
  createOpcommand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpcommandInput!
  ): CreateOpcommandPayload

  """Creates a single `OpcommandGrp`."""
  createOpcommandGrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpcommandGrpInput!
  ): CreateOpcommandGrpPayload

  """Creates a single `OpcommandHst`."""
  createOpcommandHst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpcommandHstInput!
  ): CreateOpcommandHstPayload

  """Creates a single `Opcondition`."""
  createOpcondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpconditionInput!
  ): CreateOpconditionPayload

  """Creates a single `Operation`."""
  createOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOperationInput!
  ): CreateOperationPayload

  """Creates a single `Opgroup`."""
  createOpgroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpgroupInput!
  ): CreateOpgroupPayload

  """Creates a single `Opinventory`."""
  createOpinventory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpinventoryInput!
  ): CreateOpinventoryPayload

  """Creates a single `Opmessage`."""
  createOpmessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpmessageInput!
  ): CreateOpmessagePayload

  """Creates a single `OpmessageGrp`."""
  createOpmessageGrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpmessageGrpInput!
  ): CreateOpmessageGrpPayload

  """Creates a single `OpmessageUsr`."""
  createOpmessageUsr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOpmessageUsrInput!
  ): CreateOpmessageUsrPayload

  """Creates a single `Optemplate`."""
  createOptemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateOptemplateInput!
  ): CreateOptemplatePayload

  """Creates a single `Problem`."""
  createProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProblemInput!
  ): CreateProblemPayload

  """Creates a single `ProblemTag`."""
  createProblemTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProblemTagInput!
  ): CreateProblemTagPayload

  """Creates a single `Profile`."""
  createProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProfileInput!
  ): CreateProfilePayload

  """Creates a single `ProxyAutoregHost`."""
  createProxyAutoregHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProxyAutoregHostInput!
  ): CreateProxyAutoregHostPayload

  """Creates a single `ProxyDhistory`."""
  createProxyDhistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProxyDhistoryInput!
  ): CreateProxyDhistoryPayload

  """Creates a single `ProxyHistory`."""
  createProxyHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateProxyHistoryInput!
  ): CreateProxyHistoryPayload

  """Creates a single `Regexp`."""
  createRegexp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRegexpInput!
  ): CreateRegexpPayload

  """Creates a single `Right`."""
  createRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateRightInput!
  ): CreateRightPayload

  """Creates a single `ScreenUser`."""
  createScreenUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScreenUserInput!
  ): CreateScreenUserPayload

  """Creates a single `ScreenUsrgrp`."""
  createScreenUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScreenUsrgrpInput!
  ): CreateScreenUsrgrpPayload

  """Creates a single `Screen`."""
  createScreen(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScreenInput!
  ): CreateScreenPayload

  """Creates a single `ScreensItem`."""
  createScreensItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScreensItemInput!
  ): CreateScreensItemPayload

  """Creates a single `Script`."""
  createScript(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateScriptInput!
  ): CreateScriptPayload

  """Creates a single `ServiceAlarm`."""
  createServiceAlarm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServiceAlarmInput!
  ): CreateServiceAlarmPayload

  """Creates a single `Service`."""
  createService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServiceInput!
  ): CreateServicePayload

  """Creates a single `ServicesLink`."""
  createServicesLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServicesLinkInput!
  ): CreateServicesLinkPayload

  """Creates a single `ServicesTime`."""
  createServicesTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateServicesTimeInput!
  ): CreateServicesTimePayload

  """Creates a single `Session`."""
  createSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSessionInput!
  ): CreateSessionPayload

  """Creates a single `Slide`."""
  createSlide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSlideInput!
  ): CreateSlidePayload

  """Creates a single `SlideshowUser`."""
  createSlideshowUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSlideshowUserInput!
  ): CreateSlideshowUserPayload

  """Creates a single `SlideshowUsrgrp`."""
  createSlideshowUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSlideshowUsrgrpInput!
  ): CreateSlideshowUsrgrpPayload

  """Creates a single `Slideshow`."""
  createSlideshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSlideshowInput!
  ): CreateSlideshowPayload

  """Creates a single `SysmapElementUrl`."""
  createSysmapElementUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapElementUrlInput!
  ): CreateSysmapElementUrlPayload

  """Creates a single `SysmapUrl`."""
  createSysmapUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapUrlInput!
  ): CreateSysmapUrlPayload

  """Creates a single `SysmapUser`."""
  createSysmapUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapUserInput!
  ): CreateSysmapUserPayload

  """Creates a single `SysmapUsrgrp`."""
  createSysmapUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapUsrgrpInput!
  ): CreateSysmapUsrgrpPayload

  """Creates a single `Sysmap`."""
  createSysmap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapInput!
  ): CreateSysmapPayload

  """Creates a single `SysmapsElement`."""
  createSysmapsElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapsElementInput!
  ): CreateSysmapsElementPayload

  """Creates a single `SysmapsLinkTrigger`."""
  createSysmapsLinkTrigger(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapsLinkTriggerInput!
  ): CreateSysmapsLinkTriggerPayload

  """Creates a single `SysmapsLink`."""
  createSysmapsLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateSysmapsLinkInput!
  ): CreateSysmapsLinkPayload

  """Creates a single `Task`."""
  createTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskInput!
  ): CreateTaskPayload

  """Creates a single `TaskCloseProblem`."""
  createTaskCloseProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTaskCloseProblemInput!
  ): CreateTaskCloseProblemPayload

  """Creates a single `Timeperiod`."""
  createTimeperiod(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTimeperiodInput!
  ): CreateTimeperiodPayload

  """Creates a single `Trend`."""
  createTrend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTrendInput!
  ): CreateTrendPayload

  """Creates a single `TrendsUint`."""
  createTrendsUint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTrendsUintInput!
  ): CreateTrendsUintPayload

  """Creates a single `TriggerDepend`."""
  createTriggerDepend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTriggerDependInput!
  ): CreateTriggerDependPayload

  """Creates a single `TriggerDiscovery`."""
  createTriggerDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTriggerDiscoveryInput!
  ): CreateTriggerDiscoveryPayload

  """Creates a single `TriggerTag`."""
  createTriggerTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTriggerTagInput!
  ): CreateTriggerTagPayload

  """Creates a single `Trigger`."""
  createTrigger(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateTriggerInput!
  ): CreateTriggerPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Creates a single `UsersGroup`."""
  createUsersGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUsersGroupInput!
  ): CreateUsersGroupPayload

  """Creates a single `Usrgrp`."""
  createUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUsrgrpInput!
  ): CreateUsrgrpPayload

  """Creates a single `Valuemap`."""
  createValuemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateValuemapInput!
  ): CreateValuemapPayload

  """
  Updates a single `Acknowledge` using its globally unique id and a patch.
  """
  updateAcknowledge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAcknowledgeInput!
  ): UpdateAcknowledgePayload

  """Updates a single `Acknowledge` using a unique key and a patch."""
  updateAcknowledgeByAcknowledgeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAcknowledgeByAcknowledgeidInput!
  ): UpdateAcknowledgePayload

  """Updates a single `Action` using its globally unique id and a patch."""
  updateAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionInput!
  ): UpdateActionPayload

  """Updates a single `Action` using a unique key and a patch."""
  updateActionByActionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateActionByActionidInput!
  ): UpdateActionPayload

  """Updates a single `Alert` using its globally unique id and a patch."""
  updateAlert(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAlertInput!
  ): UpdateAlertPayload

  """Updates a single `Alert` using a unique key and a patch."""
  updateAlertByAlertid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAlertByAlertidInput!
  ): UpdateAlertPayload

  """
  Updates a single `ApplicationDiscovery` using its globally unique id and a patch.
  """
  updateApplicationDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationDiscoveryInput!
  ): UpdateApplicationDiscoveryPayload

  """
  Updates a single `ApplicationDiscovery` using a unique key and a patch.
  """
  updateApplicationDiscoveryByApplicationDiscoveryid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationDiscoveryByApplicationDiscoveryidInput!
  ): UpdateApplicationDiscoveryPayload

  """
  Updates a single `ApplicationPrototype` using its globally unique id and a patch.
  """
  updateApplicationPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationPrototypeInput!
  ): UpdateApplicationPrototypePayload

  """
  Updates a single `ApplicationPrototype` using a unique key and a patch.
  """
  updateApplicationPrototypeByApplicationPrototypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationPrototypeByApplicationPrototypeidInput!
  ): UpdateApplicationPrototypePayload

  """
  Updates a single `ApplicationTemplate` using its globally unique id and a patch.
  """
  updateApplicationTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationTemplateInput!
  ): UpdateApplicationTemplatePayload

  """
  Updates a single `ApplicationTemplate` using a unique key and a patch.
  """
  updateApplicationTemplateByApplicationTemplateid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationTemplateByApplicationTemplateidInput!
  ): UpdateApplicationTemplatePayload

  """
  Updates a single `Application` using its globally unique id and a patch.
  """
  updateApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationInput!
  ): UpdateApplicationPayload

  """Updates a single `Application` using a unique key and a patch."""
  updateApplicationByApplicationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateApplicationByApplicationidInput!
  ): UpdateApplicationPayload

  """Updates a single `Auditlog` using its globally unique id and a patch."""
  updateAuditlog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuditlogInput!
  ): UpdateAuditlogPayload

  """Updates a single `Auditlog` using a unique key and a patch."""
  updateAuditlogByAuditid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuditlogByAuditidInput!
  ): UpdateAuditlogPayload

  """
  Updates a single `AuditlogDetail` using its globally unique id and a patch.
  """
  updateAuditlogDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuditlogDetailInput!
  ): UpdateAuditlogDetailPayload

  """Updates a single `AuditlogDetail` using a unique key and a patch."""
  updateAuditlogDetailByAuditdetailid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAuditlogDetailByAuditdetailidInput!
  ): UpdateAuditlogDetailPayload

  """
  Updates a single `AutoregHost` using its globally unique id and a patch.
  """
  updateAutoregHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAutoregHostInput!
  ): UpdateAutoregHostPayload

  """Updates a single `AutoregHost` using a unique key and a patch."""
  updateAutoregHostByAutoregHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateAutoregHostByAutoregHostidInput!
  ): UpdateAutoregHostPayload

  """
  Updates a single `Condition` using its globally unique id and a patch.
  """
  updateCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConditionInput!
  ): UpdateConditionPayload

  """Updates a single `Condition` using a unique key and a patch."""
  updateConditionByConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConditionByConditionidInput!
  ): UpdateConditionPayload

  """Updates a single `Config` using its globally unique id and a patch."""
  updateConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConfigInput!
  ): UpdateConfigPayload

  """Updates a single `Config` using a unique key and a patch."""
  updateConfigByConfigid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateConfigByConfigidInput!
  ): UpdateConfigPayload

  """
  Updates a single `CorrCondition` using its globally unique id and a patch.
  """
  updateCorrCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionInput!
  ): UpdateCorrConditionPayload

  """Updates a single `CorrCondition` using a unique key and a patch."""
  updateCorrConditionByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionByCorrConditionidInput!
  ): UpdateCorrConditionPayload

  """
  Updates a single `CorrConditionGroup` using its globally unique id and a patch.
  """
  updateCorrConditionGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionGroupInput!
  ): UpdateCorrConditionGroupPayload

  """Updates a single `CorrConditionGroup` using a unique key and a patch."""
  updateCorrConditionGroupByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionGroupByCorrConditionidInput!
  ): UpdateCorrConditionGroupPayload

  """
  Updates a single `CorrConditionTag` using its globally unique id and a patch.
  """
  updateCorrConditionTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionTagInput!
  ): UpdateCorrConditionTagPayload

  """Updates a single `CorrConditionTag` using a unique key and a patch."""
  updateCorrConditionTagByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionTagByCorrConditionidInput!
  ): UpdateCorrConditionTagPayload

  """
  Updates a single `CorrConditionTagpair` using its globally unique id and a patch.
  """
  updateCorrConditionTagpair(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionTagpairInput!
  ): UpdateCorrConditionTagpairPayload

  """
  Updates a single `CorrConditionTagpair` using a unique key and a patch.
  """
  updateCorrConditionTagpairByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionTagpairByCorrConditionidInput!
  ): UpdateCorrConditionTagpairPayload

  """
  Updates a single `CorrConditionTagvalue` using its globally unique id and a patch.
  """
  updateCorrConditionTagvalue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionTagvalueInput!
  ): UpdateCorrConditionTagvaluePayload

  """
  Updates a single `CorrConditionTagvalue` using a unique key and a patch.
  """
  updateCorrConditionTagvalueByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrConditionTagvalueByCorrConditionidInput!
  ): UpdateCorrConditionTagvaluePayload

  """
  Updates a single `CorrOperation` using its globally unique id and a patch.
  """
  updateCorrOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrOperationInput!
  ): UpdateCorrOperationPayload

  """Updates a single `CorrOperation` using a unique key and a patch."""
  updateCorrOperationByCorrOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrOperationByCorrOperationidInput!
  ): UpdateCorrOperationPayload

  """
  Updates a single `Correlation` using its globally unique id and a patch.
  """
  updateCorrelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrelationInput!
  ): UpdateCorrelationPayload

  """Updates a single `Correlation` using a unique key and a patch."""
  updateCorrelationByCorrelationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCorrelationByCorrelationidInput!
  ): UpdateCorrelationPayload

  """Updates a single `Dcheck` using its globally unique id and a patch."""
  updateDcheck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDcheckInput!
  ): UpdateDcheckPayload

  """Updates a single `Dcheck` using a unique key and a patch."""
  updateDcheckByDcheckid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDcheckByDcheckidInput!
  ): UpdateDcheckPayload

  """Updates a single `Dhost` using its globally unique id and a patch."""
  updateDhost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDhostInput!
  ): UpdateDhostPayload

  """Updates a single `Dhost` using a unique key and a patch."""
  updateDhostByDhostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDhostByDhostidInput!
  ): UpdateDhostPayload

  """Updates a single `Drule` using its globally unique id and a patch."""
  updateDrule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDruleInput!
  ): UpdateDrulePayload

  """Updates a single `Drule` using a unique key and a patch."""
  updateDruleByDruleid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDruleByDruleidInput!
  ): UpdateDrulePayload

  """Updates a single `Dservice` using its globally unique id and a patch."""
  updateDservice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDserviceInput!
  ): UpdateDservicePayload

  """Updates a single `Dservice` using a unique key and a patch."""
  updateDserviceByDserviceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateDserviceByDserviceidInput!
  ): UpdateDservicePayload

  """
  Updates a single `Escalation` using its globally unique id and a patch.
  """
  updateEscalation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEscalationInput!
  ): UpdateEscalationPayload

  """Updates a single `Escalation` using a unique key and a patch."""
  updateEscalationByEscalationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEscalationByEscalationidInput!
  ): UpdateEscalationPayload

  """
  Updates a single `EventRecovery` using its globally unique id and a patch.
  """
  updateEventRecovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventRecoveryInput!
  ): UpdateEventRecoveryPayload

  """Updates a single `EventRecovery` using a unique key and a patch."""
  updateEventRecoveryByEventid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventRecoveryByEventidInput!
  ): UpdateEventRecoveryPayload

  """Updates a single `EventTag` using its globally unique id and a patch."""
  updateEventTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventTagInput!
  ): UpdateEventTagPayload

  """Updates a single `EventTag` using a unique key and a patch."""
  updateEventTagByEventtagid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventTagByEventtagidInput!
  ): UpdateEventTagPayload

  """Updates a single `Event` using its globally unique id and a patch."""
  updateEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventInput!
  ): UpdateEventPayload

  """Updates a single `Event` using a unique key and a patch."""
  updateEventByEventid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateEventByEventidInput!
  ): UpdateEventPayload

  """
  Updates a single `Expression` using its globally unique id and a patch.
  """
  updateExpression(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateExpressionInput!
  ): UpdateExpressionPayload

  """Updates a single `Expression` using a unique key and a patch."""
  updateExpressionByExpressionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateExpressionByExpressionidInput!
  ): UpdateExpressionPayload

  """Updates a single `Fact` using its globally unique id and a patch."""
  updateFact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactInput!
  ): UpdateFactPayload

  """Updates a single `Fact` using a unique key and a patch."""
  updateFactById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFactByIdInput!
  ): UpdateFactPayload

  """Updates a single `Function` using its globally unique id and a patch."""
  updateFunction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFunctionInput!
  ): UpdateFunctionPayload

  """Updates a single `Function` using a unique key and a patch."""
  updateFunctionByFunctionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateFunctionByFunctionidInput!
  ): UpdateFunctionPayload

  """
  Updates a single `Globalmacro` using its globally unique id and a patch.
  """
  updateGlobalmacro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGlobalmacroInput!
  ): UpdateGlobalmacroPayload

  """Updates a single `Globalmacro` using a unique key and a patch."""
  updateGlobalmacroByGlobalmacroid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGlobalmacroByGlobalmacroidInput!
  ): UpdateGlobalmacroPayload

  """
  Updates a single `Globalvar` using its globally unique id and a patch.
  """
  updateGlobalvar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGlobalvarInput!
  ): UpdateGlobalvarPayload

  """Updates a single `Globalvar` using a unique key and a patch."""
  updateGlobalvarByGlobalvarid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGlobalvarByGlobalvaridInput!
  ): UpdateGlobalvarPayload

  """
  Updates a single `GraphDiscovery` using its globally unique id and a patch.
  """
  updateGraphDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphDiscoveryInput!
  ): UpdateGraphDiscoveryPayload

  """Updates a single `GraphDiscovery` using a unique key and a patch."""
  updateGraphDiscoveryByGraphid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphDiscoveryByGraphidInput!
  ): UpdateGraphDiscoveryPayload

  """
  Updates a single `GraphTheme` using its globally unique id and a patch.
  """
  updateGraphTheme(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphThemeInput!
  ): UpdateGraphThemePayload

  """Updates a single `GraphTheme` using a unique key and a patch."""
  updateGraphThemeByGraphthemeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphThemeByGraphthemeidInput!
  ): UpdateGraphThemePayload

  """Updates a single `Graph` using its globally unique id and a patch."""
  updateGraph(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphInput!
  ): UpdateGraphPayload

  """Updates a single `Graph` using a unique key and a patch."""
  updateGraphByGraphid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphByGraphidInput!
  ): UpdateGraphPayload

  """
  Updates a single `GraphsItem` using its globally unique id and a patch.
  """
  updateGraphsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphsItemInput!
  ): UpdateGraphsItemPayload

  """Updates a single `GraphsItem` using a unique key and a patch."""
  updateGraphsItemByGitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGraphsItemByGitemidInput!
  ): UpdateGraphsItemPayload

  """
  Updates a single `GroupDiscovery` using its globally unique id and a patch.
  """
  updateGroupDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupDiscoveryInput!
  ): UpdateGroupDiscoveryPayload

  """Updates a single `GroupDiscovery` using a unique key and a patch."""
  updateGroupDiscoveryByGroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupDiscoveryByGroupidInput!
  ): UpdateGroupDiscoveryPayload

  """
  Updates a single `GroupPrototype` using its globally unique id and a patch.
  """
  updateGroupPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupPrototypeInput!
  ): UpdateGroupPrototypePayload

  """Updates a single `GroupPrototype` using a unique key and a patch."""
  updateGroupPrototypeByGroupPrototypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupPrototypeByGroupPrototypeidInput!
  ): UpdateGroupPrototypePayload

  """Updates a single `Group` using its globally unique id and a patch."""
  updateGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupInput!
  ): UpdateGroupPayload

  """Updates a single `Group` using a unique key and a patch."""
  updateGroupByGroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateGroupByGroupidInput!
  ): UpdateGroupPayload

  """
  Updates a single `HostDiscovery` using its globally unique id and a patch.
  """
  updateHostDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostDiscoveryInput!
  ): UpdateHostDiscoveryPayload

  """Updates a single `HostDiscovery` using a unique key and a patch."""
  updateHostDiscoveryByHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostDiscoveryByHostidInput!
  ): UpdateHostDiscoveryPayload

  """
  Updates a single `HostInventory` using its globally unique id and a patch.
  """
  updateHostInventory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostInventoryInput!
  ): UpdateHostInventoryPayload

  """Updates a single `HostInventory` using a unique key and a patch."""
  updateHostInventoryByHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostInventoryByHostidInput!
  ): UpdateHostInventoryPayload

  """
  Updates a single `Hostmacro` using its globally unique id and a patch.
  """
  updateHostmacro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostmacroInput!
  ): UpdateHostmacroPayload

  """Updates a single `Hostmacro` using a unique key and a patch."""
  updateHostmacroByHostmacroid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostmacroByHostmacroidInput!
  ): UpdateHostmacroPayload

  """Updates a single `Host` using its globally unique id and a patch."""
  updateHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostInput!
  ): UpdateHostPayload

  """Updates a single `Host` using a unique key and a patch."""
  updateHostByHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostByHostidInput!
  ): UpdateHostPayload

  """
  Updates a single `HostsGroup` using its globally unique id and a patch.
  """
  updateHostsGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostsGroupInput!
  ): UpdateHostsGroupPayload

  """Updates a single `HostsGroup` using a unique key and a patch."""
  updateHostsGroupByHostgroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostsGroupByHostgroupidInput!
  ): UpdateHostsGroupPayload

  """
  Updates a single `HostsTemplate` using its globally unique id and a patch.
  """
  updateHostsTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostsTemplateInput!
  ): UpdateHostsTemplatePayload

  """Updates a single `HostsTemplate` using a unique key and a patch."""
  updateHostsTemplateByHosttemplateid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHostsTemplateByHosttemplateidInput!
  ): UpdateHostsTemplatePayload

  """
  Updates a single `Housekeeper` using its globally unique id and a patch.
  """
  updateHousekeeper(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHousekeeperInput!
  ): UpdateHousekeeperPayload

  """Updates a single `Housekeeper` using a unique key and a patch."""
  updateHousekeeperByHousekeeperid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHousekeeperByHousekeeperidInput!
  ): UpdateHousekeeperPayload

  """Updates a single `Httpstep` using its globally unique id and a patch."""
  updateHttpstep(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttpstepInput!
  ): UpdateHttpstepPayload

  """Updates a single `Httpstep` using a unique key and a patch."""
  updateHttpstepByHttpstepid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttpstepByHttpstepidInput!
  ): UpdateHttpstepPayload

  """
  Updates a single `Httpstepitem` using its globally unique id and a patch.
  """
  updateHttpstepitem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttpstepitemInput!
  ): UpdateHttpstepitemPayload

  """Updates a single `Httpstepitem` using a unique key and a patch."""
  updateHttpstepitemByHttpstepitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttpstepitemByHttpstepitemidInput!
  ): UpdateHttpstepitemPayload

  """Updates a single `Httptest` using its globally unique id and a patch."""
  updateHttptest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttptestInput!
  ): UpdateHttptestPayload

  """Updates a single `Httptest` using a unique key and a patch."""
  updateHttptestByHttptestid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttptestByHttptestidInput!
  ): UpdateHttptestPayload

  """
  Updates a single `Httptestitem` using its globally unique id and a patch.
  """
  updateHttptestitem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttptestitemInput!
  ): UpdateHttptestitemPayload

  """Updates a single `Httptestitem` using a unique key and a patch."""
  updateHttptestitemByHttptestitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateHttptestitemByHttptestitemidInput!
  ): UpdateHttptestitemPayload

  """Updates a single `IconMap` using its globally unique id and a patch."""
  updateIconMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIconMapInput!
  ): UpdateIconMapPayload

  """Updates a single `IconMap` using a unique key and a patch."""
  updateIconMapByIconmapid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIconMapByIconmapidInput!
  ): UpdateIconMapPayload

  """
  Updates a single `IconMapping` using its globally unique id and a patch.
  """
  updateIconMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIconMappingInput!
  ): UpdateIconMappingPayload

  """Updates a single `IconMapping` using a unique key and a patch."""
  updateIconMappingByIconmappingid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIconMappingByIconmappingidInput!
  ): UpdateIconMappingPayload

  """Updates a single `Id` using its globally unique id and a patch."""
  updateId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIdInput!
  ): UpdateIdPayload

  """Updates a single `Id` using a unique key and a patch."""
  updateIdByTableNameAndFieldName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateIdByTableNameAndFieldNameInput!
  ): UpdateIdPayload

  """Updates a single `Image` using its globally unique id and a patch."""
  updateImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageInput!
  ): UpdateImagePayload

  """Updates a single `Image` using a unique key and a patch."""
  updateImageByImageid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateImageByImageidInput!
  ): UpdateImagePayload

  """
  Updates a single `Interface` using its globally unique id and a patch.
  """
  updateInterface(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInterfaceInput!
  ): UpdateInterfacePayload

  """Updates a single `Interface` using a unique key and a patch."""
  updateInterfaceByInterfaceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInterfaceByInterfaceidInput!
  ): UpdateInterfacePayload

  """
  Updates a single `InterfaceDiscovery` using its globally unique id and a patch.
  """
  updateInterfaceDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInterfaceDiscoveryInput!
  ): UpdateInterfaceDiscoveryPayload

  """Updates a single `InterfaceDiscovery` using a unique key and a patch."""
  updateInterfaceDiscoveryByInterfaceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateInterfaceDiscoveryByInterfaceidInput!
  ): UpdateInterfaceDiscoveryPayload

  """
  Updates a single `ItemApplicationPrototype` using its globally unique id and a patch.
  """
  updateItemApplicationPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemApplicationPrototypeInput!
  ): UpdateItemApplicationPrototypePayload

  """
  Updates a single `ItemApplicationPrototype` using a unique key and a patch.
  """
  updateItemApplicationPrototypeByItemApplicationPrototypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemApplicationPrototypeByItemApplicationPrototypeidInput!
  ): UpdateItemApplicationPrototypePayload

  """
  Updates a single `ItemConditionOrig` using its globally unique id and a patch.
  """
  updateItemConditionOrig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemConditionOrigInput!
  ): UpdateItemConditionOrigPayload

  """Updates a single `ItemConditionOrig` using a unique key and a patch."""
  updateItemConditionOrigByItemConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemConditionOrigByItemConditionidInput!
  ): UpdateItemConditionOrigPayload

  """
  Updates a single `ItemDiscovery` using its globally unique id and a patch.
  """
  updateItemDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemDiscoveryInput!
  ): UpdateItemDiscoveryPayload

  """Updates a single `ItemDiscovery` using a unique key and a patch."""
  updateItemDiscoveryByItemdiscoveryid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemDiscoveryByItemdiscoveryidInput!
  ): UpdateItemDiscoveryPayload

  """Updates a single `Item` using its globally unique id and a patch."""
  updateItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemInput!
  ): UpdateItemPayload

  """Updates a single `Item` using a unique key and a patch."""
  updateItemByItemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemByItemidInput!
  ): UpdateItemPayload

  """
  Updates a single `ItemsApplication` using its globally unique id and a patch.
  """
  updateItemsApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemsApplicationInput!
  ): UpdateItemsApplicationPayload

  """Updates a single `ItemsApplication` using a unique key and a patch."""
  updateItemsApplicationByItemappid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateItemsApplicationByItemappidInput!
  ): UpdateItemsApplicationPayload

  """
  Updates a single `Maintenance` using its globally unique id and a patch.
  """
  updateMaintenance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceInput!
  ): UpdateMaintenancePayload

  """Updates a single `Maintenance` using a unique key and a patch."""
  updateMaintenanceByMaintenanceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenanceByMaintenanceidInput!
  ): UpdateMaintenancePayload

  """
  Updates a single `MaintenancesGroup` using its globally unique id and a patch.
  """
  updateMaintenancesGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenancesGroupInput!
  ): UpdateMaintenancesGroupPayload

  """Updates a single `MaintenancesGroup` using a unique key and a patch."""
  updateMaintenancesGroupByMaintenanceGroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenancesGroupByMaintenanceGroupidInput!
  ): UpdateMaintenancesGroupPayload

  """
  Updates a single `MaintenancesHost` using its globally unique id and a patch.
  """
  updateMaintenancesHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenancesHostInput!
  ): UpdateMaintenancesHostPayload

  """Updates a single `MaintenancesHost` using a unique key and a patch."""
  updateMaintenancesHostByMaintenanceHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenancesHostByMaintenanceHostidInput!
  ): UpdateMaintenancesHostPayload

  """
  Updates a single `MaintenancesWindow` using its globally unique id and a patch.
  """
  updateMaintenancesWindow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenancesWindowInput!
  ): UpdateMaintenancesWindowPayload

  """Updates a single `MaintenancesWindow` using a unique key and a patch."""
  updateMaintenancesWindowByMaintenanceTimeperiodid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMaintenancesWindowByMaintenanceTimeperiodidInput!
  ): UpdateMaintenancesWindowPayload

  """Updates a single `Mapping` using its globally unique id and a patch."""
  updateMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMappingInput!
  ): UpdateMappingPayload

  """Updates a single `Mapping` using a unique key and a patch."""
  updateMappingByMappingid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMappingByMappingidInput!
  ): UpdateMappingPayload

  """Updates a single `Media` using its globally unique id and a patch."""
  updateMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaInput!
  ): UpdateMediaPayload

  """Updates a single `Media` using a unique key and a patch."""
  updateMediaByMediaid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaByMediaidInput!
  ): UpdateMediaPayload

  """
  Updates a single `MediaType` using its globally unique id and a patch.
  """
  updateMediaType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaTypeInput!
  ): UpdateMediaTypePayload

  """Updates a single `MediaType` using a unique key and a patch."""
  updateMediaTypeByMediatypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMediaTypeByMediatypeidInput!
  ): UpdateMediaTypePayload

  """
  Updates a single `Opcommand` using its globally unique id and a patch.
  """
  updateOpcommand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpcommandInput!
  ): UpdateOpcommandPayload

  """Updates a single `Opcommand` using a unique key and a patch."""
  updateOpcommandByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpcommandByOperationidInput!
  ): UpdateOpcommandPayload

  """
  Updates a single `OpcommandGrp` using its globally unique id and a patch.
  """
  updateOpcommandGrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpcommandGrpInput!
  ): UpdateOpcommandGrpPayload

  """Updates a single `OpcommandGrp` using a unique key and a patch."""
  updateOpcommandGrpByOpcommandGrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpcommandGrpByOpcommandGrpidInput!
  ): UpdateOpcommandGrpPayload

  """
  Updates a single `OpcommandHst` using its globally unique id and a patch.
  """
  updateOpcommandHst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpcommandHstInput!
  ): UpdateOpcommandHstPayload

  """Updates a single `OpcommandHst` using a unique key and a patch."""
  updateOpcommandHstByOpcommandHstid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpcommandHstByOpcommandHstidInput!
  ): UpdateOpcommandHstPayload

  """
  Updates a single `Opcondition` using its globally unique id and a patch.
  """
  updateOpcondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpconditionInput!
  ): UpdateOpconditionPayload

  """Updates a single `Opcondition` using a unique key and a patch."""
  updateOpconditionByOpconditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpconditionByOpconditionidInput!
  ): UpdateOpconditionPayload

  """
  Updates a single `Operation` using its globally unique id and a patch.
  """
  updateOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperationInput!
  ): UpdateOperationPayload

  """Updates a single `Operation` using a unique key and a patch."""
  updateOperationByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOperationByOperationidInput!
  ): UpdateOperationPayload

  """Updates a single `Opgroup` using its globally unique id and a patch."""
  updateOpgroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpgroupInput!
  ): UpdateOpgroupPayload

  """Updates a single `Opgroup` using a unique key and a patch."""
  updateOpgroupByOpgroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpgroupByOpgroupidInput!
  ): UpdateOpgroupPayload

  """
  Updates a single `Opinventory` using its globally unique id and a patch.
  """
  updateOpinventory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpinventoryInput!
  ): UpdateOpinventoryPayload

  """Updates a single `Opinventory` using a unique key and a patch."""
  updateOpinventoryByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpinventoryByOperationidInput!
  ): UpdateOpinventoryPayload

  """
  Updates a single `Opmessage` using its globally unique id and a patch.
  """
  updateOpmessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpmessageInput!
  ): UpdateOpmessagePayload

  """Updates a single `Opmessage` using a unique key and a patch."""
  updateOpmessageByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpmessageByOperationidInput!
  ): UpdateOpmessagePayload

  """
  Updates a single `OpmessageGrp` using its globally unique id and a patch.
  """
  updateOpmessageGrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpmessageGrpInput!
  ): UpdateOpmessageGrpPayload

  """Updates a single `OpmessageGrp` using a unique key and a patch."""
  updateOpmessageGrpByOpmessageGrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpmessageGrpByOpmessageGrpidInput!
  ): UpdateOpmessageGrpPayload

  """
  Updates a single `OpmessageUsr` using its globally unique id and a patch.
  """
  updateOpmessageUsr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpmessageUsrInput!
  ): UpdateOpmessageUsrPayload

  """Updates a single `OpmessageUsr` using a unique key and a patch."""
  updateOpmessageUsrByOpmessageUsrid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOpmessageUsrByOpmessageUsridInput!
  ): UpdateOpmessageUsrPayload

  """
  Updates a single `Optemplate` using its globally unique id and a patch.
  """
  updateOptemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptemplateInput!
  ): UpdateOptemplatePayload

  """Updates a single `Optemplate` using a unique key and a patch."""
  updateOptemplateByOptemplateid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateOptemplateByOptemplateidInput!
  ): UpdateOptemplatePayload

  """Updates a single `Problem` using its globally unique id and a patch."""
  updateProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemInput!
  ): UpdateProblemPayload

  """Updates a single `Problem` using a unique key and a patch."""
  updateProblemByEventid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemByEventidInput!
  ): UpdateProblemPayload

  """
  Updates a single `ProblemTag` using its globally unique id and a patch.
  """
  updateProblemTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemTagInput!
  ): UpdateProblemTagPayload

  """Updates a single `ProblemTag` using a unique key and a patch."""
  updateProblemTagByProblemtagid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProblemTagByProblemtagidInput!
  ): UpdateProblemTagPayload

  """Updates a single `Profile` using its globally unique id and a patch."""
  updateProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileInput!
  ): UpdateProfilePayload

  """Updates a single `Profile` using a unique key and a patch."""
  updateProfileByProfileid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProfileByProfileidInput!
  ): UpdateProfilePayload

  """
  Updates a single `ProxyAutoregHost` using its globally unique id and a patch.
  """
  updateProxyAutoregHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyAutoregHostInput!
  ): UpdateProxyAutoregHostPayload

  """Updates a single `ProxyAutoregHost` using a unique key and a patch."""
  updateProxyAutoregHostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyAutoregHostByIdInput!
  ): UpdateProxyAutoregHostPayload

  """
  Updates a single `ProxyDhistory` using its globally unique id and a patch.
  """
  updateProxyDhistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyDhistoryInput!
  ): UpdateProxyDhistoryPayload

  """Updates a single `ProxyDhistory` using a unique key and a patch."""
  updateProxyDhistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyDhistoryByIdInput!
  ): UpdateProxyDhistoryPayload

  """
  Updates a single `ProxyHistory` using its globally unique id and a patch.
  """
  updateProxyHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyHistoryInput!
  ): UpdateProxyHistoryPayload

  """Updates a single `ProxyHistory` using a unique key and a patch."""
  updateProxyHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateProxyHistoryByIdInput!
  ): UpdateProxyHistoryPayload

  """Updates a single `Regexp` using its globally unique id and a patch."""
  updateRegexp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegexpInput!
  ): UpdateRegexpPayload

  """Updates a single `Regexp` using a unique key and a patch."""
  updateRegexpByRegexpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRegexpByRegexpidInput!
  ): UpdateRegexpPayload

  """Updates a single `Right` using its globally unique id and a patch."""
  updateRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRightInput!
  ): UpdateRightPayload

  """Updates a single `Right` using a unique key and a patch."""
  updateRightByRightid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateRightByRightidInput!
  ): UpdateRightPayload

  """
  Updates a single `ScreenUser` using its globally unique id and a patch.
  """
  updateScreenUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreenUserInput!
  ): UpdateScreenUserPayload

  """Updates a single `ScreenUser` using a unique key and a patch."""
  updateScreenUserByScreenuserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreenUserByScreenuseridInput!
  ): UpdateScreenUserPayload

  """
  Updates a single `ScreenUsrgrp` using its globally unique id and a patch.
  """
  updateScreenUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreenUsrgrpInput!
  ): UpdateScreenUsrgrpPayload

  """Updates a single `ScreenUsrgrp` using a unique key and a patch."""
  updateScreenUsrgrpByScreenusrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreenUsrgrpByScreenusrgrpidInput!
  ): UpdateScreenUsrgrpPayload

  """Updates a single `Screen` using its globally unique id and a patch."""
  updateScreen(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreenInput!
  ): UpdateScreenPayload

  """Updates a single `Screen` using a unique key and a patch."""
  updateScreenByScreenid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreenByScreenidInput!
  ): UpdateScreenPayload

  """
  Updates a single `ScreensItem` using its globally unique id and a patch.
  """
  updateScreensItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreensItemInput!
  ): UpdateScreensItemPayload

  """Updates a single `ScreensItem` using a unique key and a patch."""
  updateScreensItemByScreenitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScreensItemByScreenitemidInput!
  ): UpdateScreensItemPayload

  """Updates a single `Script` using its globally unique id and a patch."""
  updateScript(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScriptInput!
  ): UpdateScriptPayload

  """Updates a single `Script` using a unique key and a patch."""
  updateScriptByScriptid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateScriptByScriptidInput!
  ): UpdateScriptPayload

  """
  Updates a single `ServiceAlarm` using its globally unique id and a patch.
  """
  updateServiceAlarm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceAlarmInput!
  ): UpdateServiceAlarmPayload

  """Updates a single `ServiceAlarm` using a unique key and a patch."""
  updateServiceAlarmByServicealarmid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceAlarmByServicealarmidInput!
  ): UpdateServiceAlarmPayload

  """Updates a single `Service` using its globally unique id and a patch."""
  updateService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceInput!
  ): UpdateServicePayload

  """Updates a single `Service` using a unique key and a patch."""
  updateServiceByServiceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServiceByServiceidInput!
  ): UpdateServicePayload

  """
  Updates a single `ServicesLink` using its globally unique id and a patch.
  """
  updateServicesLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServicesLinkInput!
  ): UpdateServicesLinkPayload

  """Updates a single `ServicesLink` using a unique key and a patch."""
  updateServicesLinkByLinkid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServicesLinkByLinkidInput!
  ): UpdateServicesLinkPayload

  """
  Updates a single `ServicesTime` using its globally unique id and a patch.
  """
  updateServicesTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServicesTimeInput!
  ): UpdateServicesTimePayload

  """Updates a single `ServicesTime` using a unique key and a patch."""
  updateServicesTimeByTimeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateServicesTimeByTimeidInput!
  ): UpdateServicesTimePayload

  """Updates a single `Session` using its globally unique id and a patch."""
  updateSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSessionInput!
  ): UpdateSessionPayload

  """Updates a single `Session` using a unique key and a patch."""
  updateSessionBySessionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSessionBySessionidInput!
  ): UpdateSessionPayload

  """Updates a single `Slide` using its globally unique id and a patch."""
  updateSlide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideInput!
  ): UpdateSlidePayload

  """Updates a single `Slide` using a unique key and a patch."""
  updateSlideBySlideid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideBySlideidInput!
  ): UpdateSlidePayload

  """
  Updates a single `SlideshowUser` using its globally unique id and a patch.
  """
  updateSlideshowUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideshowUserInput!
  ): UpdateSlideshowUserPayload

  """Updates a single `SlideshowUser` using a unique key and a patch."""
  updateSlideshowUserBySlideshowuserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideshowUserBySlideshowuseridInput!
  ): UpdateSlideshowUserPayload

  """
  Updates a single `SlideshowUsrgrp` using its globally unique id and a patch.
  """
  updateSlideshowUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideshowUsrgrpInput!
  ): UpdateSlideshowUsrgrpPayload

  """Updates a single `SlideshowUsrgrp` using a unique key and a patch."""
  updateSlideshowUsrgrpBySlideshowusrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideshowUsrgrpBySlideshowusrgrpidInput!
  ): UpdateSlideshowUsrgrpPayload

  """
  Updates a single `Slideshow` using its globally unique id and a patch.
  """
  updateSlideshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideshowInput!
  ): UpdateSlideshowPayload

  """Updates a single `Slideshow` using a unique key and a patch."""
  updateSlideshowBySlideshowid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSlideshowBySlideshowidInput!
  ): UpdateSlideshowPayload

  """
  Updates a single `SysmapElementUrl` using its globally unique id and a patch.
  """
  updateSysmapElementUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapElementUrlInput!
  ): UpdateSysmapElementUrlPayload

  """Updates a single `SysmapElementUrl` using a unique key and a patch."""
  updateSysmapElementUrlBySysmapelementurlid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapElementUrlBySysmapelementurlidInput!
  ): UpdateSysmapElementUrlPayload

  """
  Updates a single `SysmapUrl` using its globally unique id and a patch.
  """
  updateSysmapUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapUrlInput!
  ): UpdateSysmapUrlPayload

  """Updates a single `SysmapUrl` using a unique key and a patch."""
  updateSysmapUrlBySysmapurlid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapUrlBySysmapurlidInput!
  ): UpdateSysmapUrlPayload

  """
  Updates a single `SysmapUser` using its globally unique id and a patch.
  """
  updateSysmapUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapUserInput!
  ): UpdateSysmapUserPayload

  """Updates a single `SysmapUser` using a unique key and a patch."""
  updateSysmapUserBySysmapuserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapUserBySysmapuseridInput!
  ): UpdateSysmapUserPayload

  """
  Updates a single `SysmapUsrgrp` using its globally unique id and a patch.
  """
  updateSysmapUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapUsrgrpInput!
  ): UpdateSysmapUsrgrpPayload

  """Updates a single `SysmapUsrgrp` using a unique key and a patch."""
  updateSysmapUsrgrpBySysmapusrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapUsrgrpBySysmapusrgrpidInput!
  ): UpdateSysmapUsrgrpPayload

  """Updates a single `Sysmap` using its globally unique id and a patch."""
  updateSysmap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapInput!
  ): UpdateSysmapPayload

  """Updates a single `Sysmap` using a unique key and a patch."""
  updateSysmapBySysmapid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapBySysmapidInput!
  ): UpdateSysmapPayload

  """
  Updates a single `SysmapsElement` using its globally unique id and a patch.
  """
  updateSysmapsElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapsElementInput!
  ): UpdateSysmapsElementPayload

  """Updates a single `SysmapsElement` using a unique key and a patch."""
  updateSysmapsElementBySelementid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapsElementBySelementidInput!
  ): UpdateSysmapsElementPayload

  """
  Updates a single `SysmapsLinkTrigger` using its globally unique id and a patch.
  """
  updateSysmapsLinkTrigger(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapsLinkTriggerInput!
  ): UpdateSysmapsLinkTriggerPayload

  """Updates a single `SysmapsLinkTrigger` using a unique key and a patch."""
  updateSysmapsLinkTriggerByLinktriggerid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapsLinkTriggerByLinktriggeridInput!
  ): UpdateSysmapsLinkTriggerPayload

  """
  Updates a single `SysmapsLink` using its globally unique id and a patch.
  """
  updateSysmapsLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapsLinkInput!
  ): UpdateSysmapsLinkPayload

  """Updates a single `SysmapsLink` using a unique key and a patch."""
  updateSysmapsLinkByLinkid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateSysmapsLinkByLinkidInput!
  ): UpdateSysmapsLinkPayload

  """Updates a single `Task` using its globally unique id and a patch."""
  updateTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskInput!
  ): UpdateTaskPayload

  """Updates a single `Task` using a unique key and a patch."""
  updateTaskByTaskid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskByTaskidInput!
  ): UpdateTaskPayload

  """
  Updates a single `TaskCloseProblem` using its globally unique id and a patch.
  """
  updateTaskCloseProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskCloseProblemInput!
  ): UpdateTaskCloseProblemPayload

  """Updates a single `TaskCloseProblem` using a unique key and a patch."""
  updateTaskCloseProblemByTaskid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTaskCloseProblemByTaskidInput!
  ): UpdateTaskCloseProblemPayload

  """
  Updates a single `Timeperiod` using its globally unique id and a patch.
  """
  updateTimeperiod(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTimeperiodInput!
  ): UpdateTimeperiodPayload

  """Updates a single `Timeperiod` using a unique key and a patch."""
  updateTimeperiodByTimeperiodid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTimeperiodByTimeperiodidInput!
  ): UpdateTimeperiodPayload

  """Updates a single `Trend` using its globally unique id and a patch."""
  updateTrend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrendInput!
  ): UpdateTrendPayload

  """Updates a single `Trend` using a unique key and a patch."""
  updateTrendByItemidAndClock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrendByItemidAndClockInput!
  ): UpdateTrendPayload

  """
  Updates a single `TrendsUint` using its globally unique id and a patch.
  """
  updateTrendsUint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrendsUintInput!
  ): UpdateTrendsUintPayload

  """Updates a single `TrendsUint` using a unique key and a patch."""
  updateTrendsUintByItemidAndClock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTrendsUintByItemidAndClockInput!
  ): UpdateTrendsUintPayload

  """
  Updates a single `TriggerDepend` using its globally unique id and a patch.
  """
  updateTriggerDepend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerDependInput!
  ): UpdateTriggerDependPayload

  """Updates a single `TriggerDepend` using a unique key and a patch."""
  updateTriggerDependByTriggerdepid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerDependByTriggerdepidInput!
  ): UpdateTriggerDependPayload

  """
  Updates a single `TriggerDiscovery` using its globally unique id and a patch.
  """
  updateTriggerDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerDiscoveryInput!
  ): UpdateTriggerDiscoveryPayload

  """Updates a single `TriggerDiscovery` using a unique key and a patch."""
  updateTriggerDiscoveryByTriggerid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerDiscoveryByTriggeridInput!
  ): UpdateTriggerDiscoveryPayload

  """
  Updates a single `TriggerTag` using its globally unique id and a patch.
  """
  updateTriggerTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerTagInput!
  ): UpdateTriggerTagPayload

  """Updates a single `TriggerTag` using a unique key and a patch."""
  updateTriggerTagByTriggertagid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerTagByTriggertagidInput!
  ): UpdateTriggerTagPayload

  """Updates a single `Trigger` using its globally unique id and a patch."""
  updateTrigger(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerInput!
  ): UpdateTriggerPayload

  """Updates a single `Trigger` using a unique key and a patch."""
  updateTriggerByTriggerid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateTriggerByTriggeridInput!
  ): UpdateTriggerPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUserByUserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByUseridInput!
  ): UpdateUserPayload

  """
  Updates a single `UsersGroup` using its globally unique id and a patch.
  """
  updateUsersGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUsersGroupInput!
  ): UpdateUsersGroupPayload

  """Updates a single `UsersGroup` using a unique key and a patch."""
  updateUsersGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUsersGroupByIdInput!
  ): UpdateUsersGroupPayload

  """Updates a single `Usrgrp` using its globally unique id and a patch."""
  updateUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUsrgrpInput!
  ): UpdateUsrgrpPayload

  """Updates a single `Usrgrp` using a unique key and a patch."""
  updateUsrgrpByUsrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUsrgrpByUsrgrpidInput!
  ): UpdateUsrgrpPayload

  """Updates a single `Valuemap` using its globally unique id and a patch."""
  updateValuemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateValuemapInput!
  ): UpdateValuemapPayload

  """Updates a single `Valuemap` using a unique key and a patch."""
  updateValuemapByValuemapid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateValuemapByValuemapidInput!
  ): UpdateValuemapPayload

  """Deletes a single `Acknowledge` using its globally unique id."""
  deleteAcknowledge(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAcknowledgeInput!
  ): DeleteAcknowledgePayload

  """Deletes a single `Acknowledge` using a unique key."""
  deleteAcknowledgeByAcknowledgeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAcknowledgeByAcknowledgeidInput!
  ): DeleteAcknowledgePayload

  """Deletes a single `Action` using its globally unique id."""
  deleteAction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionInput!
  ): DeleteActionPayload

  """Deletes a single `Action` using a unique key."""
  deleteActionByActionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteActionByActionidInput!
  ): DeleteActionPayload

  """Deletes a single `Alert` using its globally unique id."""
  deleteAlert(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAlertInput!
  ): DeleteAlertPayload

  """Deletes a single `Alert` using a unique key."""
  deleteAlertByAlertid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAlertByAlertidInput!
  ): DeleteAlertPayload

  """Deletes a single `ApplicationDiscovery` using its globally unique id."""
  deleteApplicationDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationDiscoveryInput!
  ): DeleteApplicationDiscoveryPayload

  """Deletes a single `ApplicationDiscovery` using a unique key."""
  deleteApplicationDiscoveryByApplicationDiscoveryid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationDiscoveryByApplicationDiscoveryidInput!
  ): DeleteApplicationDiscoveryPayload

  """Deletes a single `ApplicationPrototype` using its globally unique id."""
  deleteApplicationPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationPrototypeInput!
  ): DeleteApplicationPrototypePayload

  """Deletes a single `ApplicationPrototype` using a unique key."""
  deleteApplicationPrototypeByApplicationPrototypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationPrototypeByApplicationPrototypeidInput!
  ): DeleteApplicationPrototypePayload

  """Deletes a single `ApplicationTemplate` using its globally unique id."""
  deleteApplicationTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationTemplateInput!
  ): DeleteApplicationTemplatePayload

  """Deletes a single `ApplicationTemplate` using a unique key."""
  deleteApplicationTemplateByApplicationTemplateid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationTemplateByApplicationTemplateidInput!
  ): DeleteApplicationTemplatePayload

  """Deletes a single `Application` using its globally unique id."""
  deleteApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationInput!
  ): DeleteApplicationPayload

  """Deletes a single `Application` using a unique key."""
  deleteApplicationByApplicationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteApplicationByApplicationidInput!
  ): DeleteApplicationPayload

  """Deletes a single `Auditlog` using its globally unique id."""
  deleteAuditlog(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuditlogInput!
  ): DeleteAuditlogPayload

  """Deletes a single `Auditlog` using a unique key."""
  deleteAuditlogByAuditid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuditlogByAuditidInput!
  ): DeleteAuditlogPayload

  """Deletes a single `AuditlogDetail` using its globally unique id."""
  deleteAuditlogDetail(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuditlogDetailInput!
  ): DeleteAuditlogDetailPayload

  """Deletes a single `AuditlogDetail` using a unique key."""
  deleteAuditlogDetailByAuditdetailid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAuditlogDetailByAuditdetailidInput!
  ): DeleteAuditlogDetailPayload

  """Deletes a single `AutoregHost` using its globally unique id."""
  deleteAutoregHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAutoregHostInput!
  ): DeleteAutoregHostPayload

  """Deletes a single `AutoregHost` using a unique key."""
  deleteAutoregHostByAutoregHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteAutoregHostByAutoregHostidInput!
  ): DeleteAutoregHostPayload

  """Deletes a single `Condition` using its globally unique id."""
  deleteCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConditionInput!
  ): DeleteConditionPayload

  """Deletes a single `Condition` using a unique key."""
  deleteConditionByConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConditionByConditionidInput!
  ): DeleteConditionPayload

  """Deletes a single `Config` using its globally unique id."""
  deleteConfig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConfigInput!
  ): DeleteConfigPayload

  """Deletes a single `Config` using a unique key."""
  deleteConfigByConfigid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteConfigByConfigidInput!
  ): DeleteConfigPayload

  """Deletes a single `CorrCondition` using its globally unique id."""
  deleteCorrCondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionInput!
  ): DeleteCorrConditionPayload

  """Deletes a single `CorrCondition` using a unique key."""
  deleteCorrConditionByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionByCorrConditionidInput!
  ): DeleteCorrConditionPayload

  """Deletes a single `CorrConditionGroup` using its globally unique id."""
  deleteCorrConditionGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionGroupInput!
  ): DeleteCorrConditionGroupPayload

  """Deletes a single `CorrConditionGroup` using a unique key."""
  deleteCorrConditionGroupByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionGroupByCorrConditionidInput!
  ): DeleteCorrConditionGroupPayload

  """Deletes a single `CorrConditionTag` using its globally unique id."""
  deleteCorrConditionTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionTagInput!
  ): DeleteCorrConditionTagPayload

  """Deletes a single `CorrConditionTag` using a unique key."""
  deleteCorrConditionTagByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionTagByCorrConditionidInput!
  ): DeleteCorrConditionTagPayload

  """Deletes a single `CorrConditionTagpair` using its globally unique id."""
  deleteCorrConditionTagpair(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionTagpairInput!
  ): DeleteCorrConditionTagpairPayload

  """Deletes a single `CorrConditionTagpair` using a unique key."""
  deleteCorrConditionTagpairByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionTagpairByCorrConditionidInput!
  ): DeleteCorrConditionTagpairPayload

  """
  Deletes a single `CorrConditionTagvalue` using its globally unique id.
  """
  deleteCorrConditionTagvalue(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionTagvalueInput!
  ): DeleteCorrConditionTagvaluePayload

  """Deletes a single `CorrConditionTagvalue` using a unique key."""
  deleteCorrConditionTagvalueByCorrConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrConditionTagvalueByCorrConditionidInput!
  ): DeleteCorrConditionTagvaluePayload

  """Deletes a single `CorrOperation` using its globally unique id."""
  deleteCorrOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrOperationInput!
  ): DeleteCorrOperationPayload

  """Deletes a single `CorrOperation` using a unique key."""
  deleteCorrOperationByCorrOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrOperationByCorrOperationidInput!
  ): DeleteCorrOperationPayload

  """Deletes a single `Correlation` using its globally unique id."""
  deleteCorrelation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrelationInput!
  ): DeleteCorrelationPayload

  """Deletes a single `Correlation` using a unique key."""
  deleteCorrelationByCorrelationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCorrelationByCorrelationidInput!
  ): DeleteCorrelationPayload

  """Deletes a single `Dcheck` using its globally unique id."""
  deleteDcheck(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDcheckInput!
  ): DeleteDcheckPayload

  """Deletes a single `Dcheck` using a unique key."""
  deleteDcheckByDcheckid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDcheckByDcheckidInput!
  ): DeleteDcheckPayload

  """Deletes a single `Dhost` using its globally unique id."""
  deleteDhost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDhostInput!
  ): DeleteDhostPayload

  """Deletes a single `Dhost` using a unique key."""
  deleteDhostByDhostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDhostByDhostidInput!
  ): DeleteDhostPayload

  """Deletes a single `Drule` using its globally unique id."""
  deleteDrule(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDruleInput!
  ): DeleteDrulePayload

  """Deletes a single `Drule` using a unique key."""
  deleteDruleByDruleid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDruleByDruleidInput!
  ): DeleteDrulePayload

  """Deletes a single `Dservice` using its globally unique id."""
  deleteDservice(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDserviceInput!
  ): DeleteDservicePayload

  """Deletes a single `Dservice` using a unique key."""
  deleteDserviceByDserviceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteDserviceByDserviceidInput!
  ): DeleteDservicePayload

  """Deletes a single `Escalation` using its globally unique id."""
  deleteEscalation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEscalationInput!
  ): DeleteEscalationPayload

  """Deletes a single `Escalation` using a unique key."""
  deleteEscalationByEscalationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEscalationByEscalationidInput!
  ): DeleteEscalationPayload

  """Deletes a single `EventRecovery` using its globally unique id."""
  deleteEventRecovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventRecoveryInput!
  ): DeleteEventRecoveryPayload

  """Deletes a single `EventRecovery` using a unique key."""
  deleteEventRecoveryByEventid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventRecoveryByEventidInput!
  ): DeleteEventRecoveryPayload

  """Deletes a single `EventTag` using its globally unique id."""
  deleteEventTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventTagInput!
  ): DeleteEventTagPayload

  """Deletes a single `EventTag` using a unique key."""
  deleteEventTagByEventtagid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventTagByEventtagidInput!
  ): DeleteEventTagPayload

  """Deletes a single `Event` using its globally unique id."""
  deleteEvent(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventInput!
  ): DeleteEventPayload

  """Deletes a single `Event` using a unique key."""
  deleteEventByEventid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteEventByEventidInput!
  ): DeleteEventPayload

  """Deletes a single `Expression` using its globally unique id."""
  deleteExpression(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteExpressionInput!
  ): DeleteExpressionPayload

  """Deletes a single `Expression` using a unique key."""
  deleteExpressionByExpressionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteExpressionByExpressionidInput!
  ): DeleteExpressionPayload

  """Deletes a single `Fact` using its globally unique id."""
  deleteFact(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactInput!
  ): DeleteFactPayload

  """Deletes a single `Fact` using a unique key."""
  deleteFactById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFactByIdInput!
  ): DeleteFactPayload

  """Deletes a single `Function` using its globally unique id."""
  deleteFunction(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFunctionInput!
  ): DeleteFunctionPayload

  """Deletes a single `Function` using a unique key."""
  deleteFunctionByFunctionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteFunctionByFunctionidInput!
  ): DeleteFunctionPayload

  """Deletes a single `Globalmacro` using its globally unique id."""
  deleteGlobalmacro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGlobalmacroInput!
  ): DeleteGlobalmacroPayload

  """Deletes a single `Globalmacro` using a unique key."""
  deleteGlobalmacroByGlobalmacroid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGlobalmacroByGlobalmacroidInput!
  ): DeleteGlobalmacroPayload

  """Deletes a single `Globalvar` using its globally unique id."""
  deleteGlobalvar(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGlobalvarInput!
  ): DeleteGlobalvarPayload

  """Deletes a single `Globalvar` using a unique key."""
  deleteGlobalvarByGlobalvarid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGlobalvarByGlobalvaridInput!
  ): DeleteGlobalvarPayload

  """Deletes a single `GraphDiscovery` using its globally unique id."""
  deleteGraphDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphDiscoveryInput!
  ): DeleteGraphDiscoveryPayload

  """Deletes a single `GraphDiscovery` using a unique key."""
  deleteGraphDiscoveryByGraphid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphDiscoveryByGraphidInput!
  ): DeleteGraphDiscoveryPayload

  """Deletes a single `GraphTheme` using its globally unique id."""
  deleteGraphTheme(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphThemeInput!
  ): DeleteGraphThemePayload

  """Deletes a single `GraphTheme` using a unique key."""
  deleteGraphThemeByGraphthemeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphThemeByGraphthemeidInput!
  ): DeleteGraphThemePayload

  """Deletes a single `Graph` using its globally unique id."""
  deleteGraph(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphInput!
  ): DeleteGraphPayload

  """Deletes a single `Graph` using a unique key."""
  deleteGraphByGraphid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphByGraphidInput!
  ): DeleteGraphPayload

  """Deletes a single `GraphsItem` using its globally unique id."""
  deleteGraphsItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphsItemInput!
  ): DeleteGraphsItemPayload

  """Deletes a single `GraphsItem` using a unique key."""
  deleteGraphsItemByGitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGraphsItemByGitemidInput!
  ): DeleteGraphsItemPayload

  """Deletes a single `GroupDiscovery` using its globally unique id."""
  deleteGroupDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupDiscoveryInput!
  ): DeleteGroupDiscoveryPayload

  """Deletes a single `GroupDiscovery` using a unique key."""
  deleteGroupDiscoveryByGroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupDiscoveryByGroupidInput!
  ): DeleteGroupDiscoveryPayload

  """Deletes a single `GroupPrototype` using its globally unique id."""
  deleteGroupPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupPrototypeInput!
  ): DeleteGroupPrototypePayload

  """Deletes a single `GroupPrototype` using a unique key."""
  deleteGroupPrototypeByGroupPrototypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupPrototypeByGroupPrototypeidInput!
  ): DeleteGroupPrototypePayload

  """Deletes a single `Group` using its globally unique id."""
  deleteGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupInput!
  ): DeleteGroupPayload

  """Deletes a single `Group` using a unique key."""
  deleteGroupByGroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteGroupByGroupidInput!
  ): DeleteGroupPayload

  """Deletes a single `HostDiscovery` using its globally unique id."""
  deleteHostDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostDiscoveryInput!
  ): DeleteHostDiscoveryPayload

  """Deletes a single `HostDiscovery` using a unique key."""
  deleteHostDiscoveryByHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostDiscoveryByHostidInput!
  ): DeleteHostDiscoveryPayload

  """Deletes a single `HostInventory` using its globally unique id."""
  deleteHostInventory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostInventoryInput!
  ): DeleteHostInventoryPayload

  """Deletes a single `HostInventory` using a unique key."""
  deleteHostInventoryByHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostInventoryByHostidInput!
  ): DeleteHostInventoryPayload

  """Deletes a single `Hostmacro` using its globally unique id."""
  deleteHostmacro(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostmacroInput!
  ): DeleteHostmacroPayload

  """Deletes a single `Hostmacro` using a unique key."""
  deleteHostmacroByHostmacroid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostmacroByHostmacroidInput!
  ): DeleteHostmacroPayload

  """Deletes a single `Host` using its globally unique id."""
  deleteHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostInput!
  ): DeleteHostPayload

  """Deletes a single `Host` using a unique key."""
  deleteHostByHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostByHostidInput!
  ): DeleteHostPayload

  """Deletes a single `HostsGroup` using its globally unique id."""
  deleteHostsGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostsGroupInput!
  ): DeleteHostsGroupPayload

  """Deletes a single `HostsGroup` using a unique key."""
  deleteHostsGroupByHostgroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostsGroupByHostgroupidInput!
  ): DeleteHostsGroupPayload

  """Deletes a single `HostsTemplate` using its globally unique id."""
  deleteHostsTemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostsTemplateInput!
  ): DeleteHostsTemplatePayload

  """Deletes a single `HostsTemplate` using a unique key."""
  deleteHostsTemplateByHosttemplateid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHostsTemplateByHosttemplateidInput!
  ): DeleteHostsTemplatePayload

  """Deletes a single `Housekeeper` using its globally unique id."""
  deleteHousekeeper(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHousekeeperInput!
  ): DeleteHousekeeperPayload

  """Deletes a single `Housekeeper` using a unique key."""
  deleteHousekeeperByHousekeeperid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHousekeeperByHousekeeperidInput!
  ): DeleteHousekeeperPayload

  """Deletes a single `Httpstep` using its globally unique id."""
  deleteHttpstep(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttpstepInput!
  ): DeleteHttpstepPayload

  """Deletes a single `Httpstep` using a unique key."""
  deleteHttpstepByHttpstepid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttpstepByHttpstepidInput!
  ): DeleteHttpstepPayload

  """Deletes a single `Httpstepitem` using its globally unique id."""
  deleteHttpstepitem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttpstepitemInput!
  ): DeleteHttpstepitemPayload

  """Deletes a single `Httpstepitem` using a unique key."""
  deleteHttpstepitemByHttpstepitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttpstepitemByHttpstepitemidInput!
  ): DeleteHttpstepitemPayload

  """Deletes a single `Httptest` using its globally unique id."""
  deleteHttptest(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttptestInput!
  ): DeleteHttptestPayload

  """Deletes a single `Httptest` using a unique key."""
  deleteHttptestByHttptestid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttptestByHttptestidInput!
  ): DeleteHttptestPayload

  """Deletes a single `Httptestitem` using its globally unique id."""
  deleteHttptestitem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttptestitemInput!
  ): DeleteHttptestitemPayload

  """Deletes a single `Httptestitem` using a unique key."""
  deleteHttptestitemByHttptestitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteHttptestitemByHttptestitemidInput!
  ): DeleteHttptestitemPayload

  """Deletes a single `IconMap` using its globally unique id."""
  deleteIconMap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIconMapInput!
  ): DeleteIconMapPayload

  """Deletes a single `IconMap` using a unique key."""
  deleteIconMapByIconmapid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIconMapByIconmapidInput!
  ): DeleteIconMapPayload

  """Deletes a single `IconMapping` using its globally unique id."""
  deleteIconMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIconMappingInput!
  ): DeleteIconMappingPayload

  """Deletes a single `IconMapping` using a unique key."""
  deleteIconMappingByIconmappingid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIconMappingByIconmappingidInput!
  ): DeleteIconMappingPayload

  """Deletes a single `Id` using its globally unique id."""
  deleteId(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIdInput!
  ): DeleteIdPayload

  """Deletes a single `Id` using a unique key."""
  deleteIdByTableNameAndFieldName(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteIdByTableNameAndFieldNameInput!
  ): DeleteIdPayload

  """Deletes a single `Image` using its globally unique id."""
  deleteImage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageInput!
  ): DeleteImagePayload

  """Deletes a single `Image` using a unique key."""
  deleteImageByImageid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteImageByImageidInput!
  ): DeleteImagePayload

  """Deletes a single `Interface` using its globally unique id."""
  deleteInterface(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInterfaceInput!
  ): DeleteInterfacePayload

  """Deletes a single `Interface` using a unique key."""
  deleteInterfaceByInterfaceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInterfaceByInterfaceidInput!
  ): DeleteInterfacePayload

  """Deletes a single `InterfaceDiscovery` using its globally unique id."""
  deleteInterfaceDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInterfaceDiscoveryInput!
  ): DeleteInterfaceDiscoveryPayload

  """Deletes a single `InterfaceDiscovery` using a unique key."""
  deleteInterfaceDiscoveryByInterfaceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteInterfaceDiscoveryByInterfaceidInput!
  ): DeleteInterfaceDiscoveryPayload

  """
  Deletes a single `ItemApplicationPrototype` using its globally unique id.
  """
  deleteItemApplicationPrototype(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemApplicationPrototypeInput!
  ): DeleteItemApplicationPrototypePayload

  """Deletes a single `ItemApplicationPrototype` using a unique key."""
  deleteItemApplicationPrototypeByItemApplicationPrototypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemApplicationPrototypeByItemApplicationPrototypeidInput!
  ): DeleteItemApplicationPrototypePayload

  """Deletes a single `ItemConditionOrig` using its globally unique id."""
  deleteItemConditionOrig(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemConditionOrigInput!
  ): DeleteItemConditionOrigPayload

  """Deletes a single `ItemConditionOrig` using a unique key."""
  deleteItemConditionOrigByItemConditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemConditionOrigByItemConditionidInput!
  ): DeleteItemConditionOrigPayload

  """Deletes a single `ItemDiscovery` using its globally unique id."""
  deleteItemDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemDiscoveryInput!
  ): DeleteItemDiscoveryPayload

  """Deletes a single `ItemDiscovery` using a unique key."""
  deleteItemDiscoveryByItemdiscoveryid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemDiscoveryByItemdiscoveryidInput!
  ): DeleteItemDiscoveryPayload

  """Deletes a single `Item` using its globally unique id."""
  deleteItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemInput!
  ): DeleteItemPayload

  """Deletes a single `Item` using a unique key."""
  deleteItemByItemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemByItemidInput!
  ): DeleteItemPayload

  """Deletes a single `ItemsApplication` using its globally unique id."""
  deleteItemsApplication(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemsApplicationInput!
  ): DeleteItemsApplicationPayload

  """Deletes a single `ItemsApplication` using a unique key."""
  deleteItemsApplicationByItemappid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteItemsApplicationByItemappidInput!
  ): DeleteItemsApplicationPayload

  """Deletes a single `Maintenance` using its globally unique id."""
  deleteMaintenance(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceInput!
  ): DeleteMaintenancePayload

  """Deletes a single `Maintenance` using a unique key."""
  deleteMaintenanceByMaintenanceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenanceByMaintenanceidInput!
  ): DeleteMaintenancePayload

  """Deletes a single `MaintenancesGroup` using its globally unique id."""
  deleteMaintenancesGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenancesGroupInput!
  ): DeleteMaintenancesGroupPayload

  """Deletes a single `MaintenancesGroup` using a unique key."""
  deleteMaintenancesGroupByMaintenanceGroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenancesGroupByMaintenanceGroupidInput!
  ): DeleteMaintenancesGroupPayload

  """Deletes a single `MaintenancesHost` using its globally unique id."""
  deleteMaintenancesHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenancesHostInput!
  ): DeleteMaintenancesHostPayload

  """Deletes a single `MaintenancesHost` using a unique key."""
  deleteMaintenancesHostByMaintenanceHostid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenancesHostByMaintenanceHostidInput!
  ): DeleteMaintenancesHostPayload

  """Deletes a single `MaintenancesWindow` using its globally unique id."""
  deleteMaintenancesWindow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenancesWindowInput!
  ): DeleteMaintenancesWindowPayload

  """Deletes a single `MaintenancesWindow` using a unique key."""
  deleteMaintenancesWindowByMaintenanceTimeperiodid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMaintenancesWindowByMaintenanceTimeperiodidInput!
  ): DeleteMaintenancesWindowPayload

  """Deletes a single `Mapping` using its globally unique id."""
  deleteMapping(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMappingInput!
  ): DeleteMappingPayload

  """Deletes a single `Mapping` using a unique key."""
  deleteMappingByMappingid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMappingByMappingidInput!
  ): DeleteMappingPayload

  """Deletes a single `Media` using its globally unique id."""
  deleteMedia(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaInput!
  ): DeleteMediaPayload

  """Deletes a single `Media` using a unique key."""
  deleteMediaByMediaid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaByMediaidInput!
  ): DeleteMediaPayload

  """Deletes a single `MediaType` using its globally unique id."""
  deleteMediaType(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaTypeInput!
  ): DeleteMediaTypePayload

  """Deletes a single `MediaType` using a unique key."""
  deleteMediaTypeByMediatypeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMediaTypeByMediatypeidInput!
  ): DeleteMediaTypePayload

  """Deletes a single `Opcommand` using its globally unique id."""
  deleteOpcommand(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpcommandInput!
  ): DeleteOpcommandPayload

  """Deletes a single `Opcommand` using a unique key."""
  deleteOpcommandByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpcommandByOperationidInput!
  ): DeleteOpcommandPayload

  """Deletes a single `OpcommandGrp` using its globally unique id."""
  deleteOpcommandGrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpcommandGrpInput!
  ): DeleteOpcommandGrpPayload

  """Deletes a single `OpcommandGrp` using a unique key."""
  deleteOpcommandGrpByOpcommandGrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpcommandGrpByOpcommandGrpidInput!
  ): DeleteOpcommandGrpPayload

  """Deletes a single `OpcommandHst` using its globally unique id."""
  deleteOpcommandHst(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpcommandHstInput!
  ): DeleteOpcommandHstPayload

  """Deletes a single `OpcommandHst` using a unique key."""
  deleteOpcommandHstByOpcommandHstid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpcommandHstByOpcommandHstidInput!
  ): DeleteOpcommandHstPayload

  """Deletes a single `Opcondition` using its globally unique id."""
  deleteOpcondition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpconditionInput!
  ): DeleteOpconditionPayload

  """Deletes a single `Opcondition` using a unique key."""
  deleteOpconditionByOpconditionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpconditionByOpconditionidInput!
  ): DeleteOpconditionPayload

  """Deletes a single `Operation` using its globally unique id."""
  deleteOperation(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperationInput!
  ): DeleteOperationPayload

  """Deletes a single `Operation` using a unique key."""
  deleteOperationByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOperationByOperationidInput!
  ): DeleteOperationPayload

  """Deletes a single `Opgroup` using its globally unique id."""
  deleteOpgroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpgroupInput!
  ): DeleteOpgroupPayload

  """Deletes a single `Opgroup` using a unique key."""
  deleteOpgroupByOpgroupid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpgroupByOpgroupidInput!
  ): DeleteOpgroupPayload

  """Deletes a single `Opinventory` using its globally unique id."""
  deleteOpinventory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpinventoryInput!
  ): DeleteOpinventoryPayload

  """Deletes a single `Opinventory` using a unique key."""
  deleteOpinventoryByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpinventoryByOperationidInput!
  ): DeleteOpinventoryPayload

  """Deletes a single `Opmessage` using its globally unique id."""
  deleteOpmessage(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpmessageInput!
  ): DeleteOpmessagePayload

  """Deletes a single `Opmessage` using a unique key."""
  deleteOpmessageByOperationid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpmessageByOperationidInput!
  ): DeleteOpmessagePayload

  """Deletes a single `OpmessageGrp` using its globally unique id."""
  deleteOpmessageGrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpmessageGrpInput!
  ): DeleteOpmessageGrpPayload

  """Deletes a single `OpmessageGrp` using a unique key."""
  deleteOpmessageGrpByOpmessageGrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpmessageGrpByOpmessageGrpidInput!
  ): DeleteOpmessageGrpPayload

  """Deletes a single `OpmessageUsr` using its globally unique id."""
  deleteOpmessageUsr(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpmessageUsrInput!
  ): DeleteOpmessageUsrPayload

  """Deletes a single `OpmessageUsr` using a unique key."""
  deleteOpmessageUsrByOpmessageUsrid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOpmessageUsrByOpmessageUsridInput!
  ): DeleteOpmessageUsrPayload

  """Deletes a single `Optemplate` using its globally unique id."""
  deleteOptemplate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptemplateInput!
  ): DeleteOptemplatePayload

  """Deletes a single `Optemplate` using a unique key."""
  deleteOptemplateByOptemplateid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteOptemplateByOptemplateidInput!
  ): DeleteOptemplatePayload

  """Deletes a single `Problem` using its globally unique id."""
  deleteProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemInput!
  ): DeleteProblemPayload

  """Deletes a single `Problem` using a unique key."""
  deleteProblemByEventid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemByEventidInput!
  ): DeleteProblemPayload

  """Deletes a single `ProblemTag` using its globally unique id."""
  deleteProblemTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemTagInput!
  ): DeleteProblemTagPayload

  """Deletes a single `ProblemTag` using a unique key."""
  deleteProblemTagByProblemtagid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProblemTagByProblemtagidInput!
  ): DeleteProblemTagPayload

  """Deletes a single `Profile` using its globally unique id."""
  deleteProfile(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileInput!
  ): DeleteProfilePayload

  """Deletes a single `Profile` using a unique key."""
  deleteProfileByProfileid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProfileByProfileidInput!
  ): DeleteProfilePayload

  """Deletes a single `ProxyAutoregHost` using its globally unique id."""
  deleteProxyAutoregHost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyAutoregHostInput!
  ): DeleteProxyAutoregHostPayload

  """Deletes a single `ProxyAutoregHost` using a unique key."""
  deleteProxyAutoregHostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyAutoregHostByIdInput!
  ): DeleteProxyAutoregHostPayload

  """Deletes a single `ProxyDhistory` using its globally unique id."""
  deleteProxyDhistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyDhistoryInput!
  ): DeleteProxyDhistoryPayload

  """Deletes a single `ProxyDhistory` using a unique key."""
  deleteProxyDhistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyDhistoryByIdInput!
  ): DeleteProxyDhistoryPayload

  """Deletes a single `ProxyHistory` using its globally unique id."""
  deleteProxyHistory(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyHistoryInput!
  ): DeleteProxyHistoryPayload

  """Deletes a single `ProxyHistory` using a unique key."""
  deleteProxyHistoryById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteProxyHistoryByIdInput!
  ): DeleteProxyHistoryPayload

  """Deletes a single `Regexp` using its globally unique id."""
  deleteRegexp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegexpInput!
  ): DeleteRegexpPayload

  """Deletes a single `Regexp` using a unique key."""
  deleteRegexpByRegexpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRegexpByRegexpidInput!
  ): DeleteRegexpPayload

  """Deletes a single `Right` using its globally unique id."""
  deleteRight(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRightInput!
  ): DeleteRightPayload

  """Deletes a single `Right` using a unique key."""
  deleteRightByRightid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteRightByRightidInput!
  ): DeleteRightPayload

  """Deletes a single `ScreenUser` using its globally unique id."""
  deleteScreenUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreenUserInput!
  ): DeleteScreenUserPayload

  """Deletes a single `ScreenUser` using a unique key."""
  deleteScreenUserByScreenuserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreenUserByScreenuseridInput!
  ): DeleteScreenUserPayload

  """Deletes a single `ScreenUsrgrp` using its globally unique id."""
  deleteScreenUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreenUsrgrpInput!
  ): DeleteScreenUsrgrpPayload

  """Deletes a single `ScreenUsrgrp` using a unique key."""
  deleteScreenUsrgrpByScreenusrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreenUsrgrpByScreenusrgrpidInput!
  ): DeleteScreenUsrgrpPayload

  """Deletes a single `Screen` using its globally unique id."""
  deleteScreen(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreenInput!
  ): DeleteScreenPayload

  """Deletes a single `Screen` using a unique key."""
  deleteScreenByScreenid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreenByScreenidInput!
  ): DeleteScreenPayload

  """Deletes a single `ScreensItem` using its globally unique id."""
  deleteScreensItem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreensItemInput!
  ): DeleteScreensItemPayload

  """Deletes a single `ScreensItem` using a unique key."""
  deleteScreensItemByScreenitemid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScreensItemByScreenitemidInput!
  ): DeleteScreensItemPayload

  """Deletes a single `Script` using its globally unique id."""
  deleteScript(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScriptInput!
  ): DeleteScriptPayload

  """Deletes a single `Script` using a unique key."""
  deleteScriptByScriptid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteScriptByScriptidInput!
  ): DeleteScriptPayload

  """Deletes a single `ServiceAlarm` using its globally unique id."""
  deleteServiceAlarm(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceAlarmInput!
  ): DeleteServiceAlarmPayload

  """Deletes a single `ServiceAlarm` using a unique key."""
  deleteServiceAlarmByServicealarmid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceAlarmByServicealarmidInput!
  ): DeleteServiceAlarmPayload

  """Deletes a single `Service` using its globally unique id."""
  deleteService(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceInput!
  ): DeleteServicePayload

  """Deletes a single `Service` using a unique key."""
  deleteServiceByServiceid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServiceByServiceidInput!
  ): DeleteServicePayload

  """Deletes a single `ServicesLink` using its globally unique id."""
  deleteServicesLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServicesLinkInput!
  ): DeleteServicesLinkPayload

  """Deletes a single `ServicesLink` using a unique key."""
  deleteServicesLinkByLinkid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServicesLinkByLinkidInput!
  ): DeleteServicesLinkPayload

  """Deletes a single `ServicesTime` using its globally unique id."""
  deleteServicesTime(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServicesTimeInput!
  ): DeleteServicesTimePayload

  """Deletes a single `ServicesTime` using a unique key."""
  deleteServicesTimeByTimeid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteServicesTimeByTimeidInput!
  ): DeleteServicesTimePayload

  """Deletes a single `Session` using its globally unique id."""
  deleteSession(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSessionInput!
  ): DeleteSessionPayload

  """Deletes a single `Session` using a unique key."""
  deleteSessionBySessionid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSessionBySessionidInput!
  ): DeleteSessionPayload

  """Deletes a single `Slide` using its globally unique id."""
  deleteSlide(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideInput!
  ): DeleteSlidePayload

  """Deletes a single `Slide` using a unique key."""
  deleteSlideBySlideid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideBySlideidInput!
  ): DeleteSlidePayload

  """Deletes a single `SlideshowUser` using its globally unique id."""
  deleteSlideshowUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideshowUserInput!
  ): DeleteSlideshowUserPayload

  """Deletes a single `SlideshowUser` using a unique key."""
  deleteSlideshowUserBySlideshowuserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideshowUserBySlideshowuseridInput!
  ): DeleteSlideshowUserPayload

  """Deletes a single `SlideshowUsrgrp` using its globally unique id."""
  deleteSlideshowUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideshowUsrgrpInput!
  ): DeleteSlideshowUsrgrpPayload

  """Deletes a single `SlideshowUsrgrp` using a unique key."""
  deleteSlideshowUsrgrpBySlideshowusrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideshowUsrgrpBySlideshowusrgrpidInput!
  ): DeleteSlideshowUsrgrpPayload

  """Deletes a single `Slideshow` using its globally unique id."""
  deleteSlideshow(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideshowInput!
  ): DeleteSlideshowPayload

  """Deletes a single `Slideshow` using a unique key."""
  deleteSlideshowBySlideshowid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSlideshowBySlideshowidInput!
  ): DeleteSlideshowPayload

  """Deletes a single `SysmapElementUrl` using its globally unique id."""
  deleteSysmapElementUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapElementUrlInput!
  ): DeleteSysmapElementUrlPayload

  """Deletes a single `SysmapElementUrl` using a unique key."""
  deleteSysmapElementUrlBySysmapelementurlid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapElementUrlBySysmapelementurlidInput!
  ): DeleteSysmapElementUrlPayload

  """Deletes a single `SysmapUrl` using its globally unique id."""
  deleteSysmapUrl(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapUrlInput!
  ): DeleteSysmapUrlPayload

  """Deletes a single `SysmapUrl` using a unique key."""
  deleteSysmapUrlBySysmapurlid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapUrlBySysmapurlidInput!
  ): DeleteSysmapUrlPayload

  """Deletes a single `SysmapUser` using its globally unique id."""
  deleteSysmapUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapUserInput!
  ): DeleteSysmapUserPayload

  """Deletes a single `SysmapUser` using a unique key."""
  deleteSysmapUserBySysmapuserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapUserBySysmapuseridInput!
  ): DeleteSysmapUserPayload

  """Deletes a single `SysmapUsrgrp` using its globally unique id."""
  deleteSysmapUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapUsrgrpInput!
  ): DeleteSysmapUsrgrpPayload

  """Deletes a single `SysmapUsrgrp` using a unique key."""
  deleteSysmapUsrgrpBySysmapusrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapUsrgrpBySysmapusrgrpidInput!
  ): DeleteSysmapUsrgrpPayload

  """Deletes a single `Sysmap` using its globally unique id."""
  deleteSysmap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapInput!
  ): DeleteSysmapPayload

  """Deletes a single `Sysmap` using a unique key."""
  deleteSysmapBySysmapid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapBySysmapidInput!
  ): DeleteSysmapPayload

  """Deletes a single `SysmapsElement` using its globally unique id."""
  deleteSysmapsElement(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapsElementInput!
  ): DeleteSysmapsElementPayload

  """Deletes a single `SysmapsElement` using a unique key."""
  deleteSysmapsElementBySelementid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapsElementBySelementidInput!
  ): DeleteSysmapsElementPayload

  """Deletes a single `SysmapsLinkTrigger` using its globally unique id."""
  deleteSysmapsLinkTrigger(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapsLinkTriggerInput!
  ): DeleteSysmapsLinkTriggerPayload

  """Deletes a single `SysmapsLinkTrigger` using a unique key."""
  deleteSysmapsLinkTriggerByLinktriggerid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapsLinkTriggerByLinktriggeridInput!
  ): DeleteSysmapsLinkTriggerPayload

  """Deletes a single `SysmapsLink` using its globally unique id."""
  deleteSysmapsLink(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapsLinkInput!
  ): DeleteSysmapsLinkPayload

  """Deletes a single `SysmapsLink` using a unique key."""
  deleteSysmapsLinkByLinkid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteSysmapsLinkByLinkidInput!
  ): DeleteSysmapsLinkPayload

  """Deletes a single `Task` using its globally unique id."""
  deleteTask(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskInput!
  ): DeleteTaskPayload

  """Deletes a single `Task` using a unique key."""
  deleteTaskByTaskid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskByTaskidInput!
  ): DeleteTaskPayload

  """Deletes a single `TaskCloseProblem` using its globally unique id."""
  deleteTaskCloseProblem(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskCloseProblemInput!
  ): DeleteTaskCloseProblemPayload

  """Deletes a single `TaskCloseProblem` using a unique key."""
  deleteTaskCloseProblemByTaskid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTaskCloseProblemByTaskidInput!
  ): DeleteTaskCloseProblemPayload

  """Deletes a single `Timeperiod` using its globally unique id."""
  deleteTimeperiod(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTimeperiodInput!
  ): DeleteTimeperiodPayload

  """Deletes a single `Timeperiod` using a unique key."""
  deleteTimeperiodByTimeperiodid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTimeperiodByTimeperiodidInput!
  ): DeleteTimeperiodPayload

  """Deletes a single `Trend` using its globally unique id."""
  deleteTrend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrendInput!
  ): DeleteTrendPayload

  """Deletes a single `Trend` using a unique key."""
  deleteTrendByItemidAndClock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrendByItemidAndClockInput!
  ): DeleteTrendPayload

  """Deletes a single `TrendsUint` using its globally unique id."""
  deleteTrendsUint(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrendsUintInput!
  ): DeleteTrendsUintPayload

  """Deletes a single `TrendsUint` using a unique key."""
  deleteTrendsUintByItemidAndClock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTrendsUintByItemidAndClockInput!
  ): DeleteTrendsUintPayload

  """Deletes a single `TriggerDepend` using its globally unique id."""
  deleteTriggerDepend(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerDependInput!
  ): DeleteTriggerDependPayload

  """Deletes a single `TriggerDepend` using a unique key."""
  deleteTriggerDependByTriggerdepid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerDependByTriggerdepidInput!
  ): DeleteTriggerDependPayload

  """Deletes a single `TriggerDiscovery` using its globally unique id."""
  deleteTriggerDiscovery(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerDiscoveryInput!
  ): DeleteTriggerDiscoveryPayload

  """Deletes a single `TriggerDiscovery` using a unique key."""
  deleteTriggerDiscoveryByTriggerid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerDiscoveryByTriggeridInput!
  ): DeleteTriggerDiscoveryPayload

  """Deletes a single `TriggerTag` using its globally unique id."""
  deleteTriggerTag(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerTagInput!
  ): DeleteTriggerTagPayload

  """Deletes a single `TriggerTag` using a unique key."""
  deleteTriggerTagByTriggertagid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerTagByTriggertagidInput!
  ): DeleteTriggerTagPayload

  """Deletes a single `Trigger` using its globally unique id."""
  deleteTrigger(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerInput!
  ): DeleteTriggerPayload

  """Deletes a single `Trigger` using a unique key."""
  deleteTriggerByTriggerid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteTriggerByTriggeridInput!
  ): DeleteTriggerPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUserByUserid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByUseridInput!
  ): DeleteUserPayload

  """Deletes a single `UsersGroup` using its globally unique id."""
  deleteUsersGroup(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsersGroupInput!
  ): DeleteUsersGroupPayload

  """Deletes a single `UsersGroup` using a unique key."""
  deleteUsersGroupById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsersGroupByIdInput!
  ): DeleteUsersGroupPayload

  """Deletes a single `Usrgrp` using its globally unique id."""
  deleteUsrgrp(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsrgrpInput!
  ): DeleteUsrgrpPayload

  """Deletes a single `Usrgrp` using a unique key."""
  deleteUsrgrpByUsrgrpid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUsrgrpByUsrgrpidInput!
  ): DeleteUsrgrpPayload

  """Deletes a single `Valuemap` using its globally unique id."""
  deleteValuemap(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteValuemapInput!
  ): DeleteValuemapPayload

  """Deletes a single `Valuemap` using a unique key."""
  deleteValuemapByValuemapid(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteValuemapByValuemapidInput!
  ): DeleteValuemapPayload
  parseJson(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ParseJsonInput!
  ): ParseJsonPayload
  zbxConstrainPartition(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ZbxConstrainPartitionInput!
  ): ZbxConstrainPartitionPayload
  zbxDeprovisionPartitions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ZbxDeprovisionPartitionsInput!
  ): ZbxDeprovisionPartitionsPayload
  zbxDropOldPartitions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ZbxDropOldPartitionsInput!
  ): ZbxDropOldPartitionsPayload
  zbxProvisionPartitions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ZbxProvisionPartitionsInput!
  ): ZbxProvisionPartitionsPayload
  zbxRebuildIndexOldPartitions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ZbxRebuildIndexOldPartitionsInput!
  ): ZbxRebuildIndexOldPartitionsPayload
  zbxRebuildIndexOldTrendsPartitions(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ZbxRebuildIndexOldTrendsPartitionsInput!
  ): ZbxRebuildIndexOldTrendsPartitionsPayload
  zbxTimeFormatBy(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: ZbxTimeFormatByInput!
  ): ZbxTimeFormatByPayload
}

type NetstatsFact {
  hostname: String!
  family: String
  localIp: String
  localPort: Int
  processCmdline: String
  processExe: String
  processName: String
  processPid: Int
  remoteIp: String
  remotePort: Int
  state: String
  userId: Int
  userName: String
  incoming: Boolean
  timestamp: Datetime
}

"""
A condition to be used against `NetstatsFact` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NetstatsFactCondition {
  """Checks for equality with the object’s `hostname` field."""
  hostname: String

  """Checks for equality with the object’s `family` field."""
  family: String

  """Checks for equality with the object’s `localIp` field."""
  localIp: String

  """Checks for equality with the object’s `localPort` field."""
  localPort: Int

  """Checks for equality with the object’s `processCmdline` field."""
  processCmdline: String

  """Checks for equality with the object’s `processExe` field."""
  processExe: String

  """Checks for equality with the object’s `processName` field."""
  processName: String

  """Checks for equality with the object’s `processPid` field."""
  processPid: Int

  """Checks for equality with the object’s `remoteIp` field."""
  remoteIp: String

  """Checks for equality with the object’s `remotePort` field."""
  remotePort: Int

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `userName` field."""
  userName: String

  """Checks for equality with the object’s `incoming` field."""
  incoming: Boolean

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Datetime
}

"""An input for mutations affecting `NetstatsFact`"""
input NetstatsFactInput {
  hostname: String!
  family: String
  localIp: String
  localPort: Int
  processCmdline: String
  processExe: String
  processName: String
  processPid: Int
  remoteIp: String
  remotePort: Int
  state: String
  userId: Int
  userName: String
  incoming: Boolean
  timestamp: Datetime
}

type NetstatsFactsBck {
  hostname: String
  direction: String
  family: String
  localIp: String
  localPort: Int
  processCmdline: String
  processExe: String
  processName: String
  processPid: Int
  remoteIp: String
  remotePort: Int
  state: String
  userId: Int
  userName: String
}

"""
A condition to be used against `NetstatsFactsBck` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input NetstatsFactsBckCondition {
  """Checks for equality with the object’s `hostname` field."""
  hostname: String

  """Checks for equality with the object’s `direction` field."""
  direction: String

  """Checks for equality with the object’s `family` field."""
  family: String

  """Checks for equality with the object’s `localIp` field."""
  localIp: String

  """Checks for equality with the object’s `localPort` field."""
  localPort: Int

  """Checks for equality with the object’s `processCmdline` field."""
  processCmdline: String

  """Checks for equality with the object’s `processExe` field."""
  processExe: String

  """Checks for equality with the object’s `processName` field."""
  processName: String

  """Checks for equality with the object’s `processPid` field."""
  processPid: Int

  """Checks for equality with the object’s `remoteIp` field."""
  remoteIp: String

  """Checks for equality with the object’s `remotePort` field."""
  remotePort: Int

  """Checks for equality with the object’s `state` field."""
  state: String

  """Checks for equality with the object’s `userId` field."""
  userId: Int

  """Checks for equality with the object’s `userName` field."""
  userName: String
}

"""An input for mutations affecting `NetstatsFactsBck`"""
input NetstatsFactsBckInput {
  hostname: String
  direction: String
  family: String
  localIp: String
  localPort: Int
  processCmdline: String
  processExe: String
  processName: String
  processPid: Int
  remoteIp: String
  remotePort: Int
  state: String
  userId: Int
  userName: String
}

"""A connection to a list of `NetstatsFactsBck` values."""
type NetstatsFactsBcksConnection {
  """A list of `NetstatsFactsBck` objects."""
  nodes: [NetstatsFactsBck]!

  """
  A list of edges which contains the `NetstatsFactsBck` and cursor to aid in pagination.
  """
  edges: [NetstatsFactsBcksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `NetstatsFactsBck` you could get from the connection.
  """
  totalCount: Int
}

"""A `NetstatsFactsBck` edge in the connection."""
type NetstatsFactsBcksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NetstatsFactsBck` at the end of the edge."""
  node: NetstatsFactsBck
}

"""Methods to use when ordering `NetstatsFactsBck`."""
enum NetstatsFactsBcksOrderBy {
  NATURAL
  HOSTNAME_ASC
  HOSTNAME_DESC
  DIRECTION_ASC
  DIRECTION_DESC
  FAMILY_ASC
  FAMILY_DESC
  LOCAL_IP_ASC
  LOCAL_IP_DESC
  LOCAL_PORT_ASC
  LOCAL_PORT_DESC
  PROCESS_CMDLINE_ASC
  PROCESS_CMDLINE_DESC
  PROCESS_EXE_ASC
  PROCESS_EXE_DESC
  PROCESS_NAME_ASC
  PROCESS_NAME_DESC
  PROCESS_PID_ASC
  PROCESS_PID_DESC
  REMOTE_IP_ASC
  REMOTE_IP_DESC
  REMOTE_PORT_ASC
  REMOTE_PORT_DESC
  STATE_ASC
  STATE_DESC
  USER_ID_ASC
  USER_ID_DESC
  USER_NAME_ASC
  USER_NAME_DESC
}

"""A connection to a list of `NetstatsFact` values."""
type NetstatsFactsConnection {
  """A list of `NetstatsFact` objects."""
  nodes: [NetstatsFact]!

  """
  A list of edges which contains the `NetstatsFact` and cursor to aid in pagination.
  """
  edges: [NetstatsFactsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `NetstatsFact` you could get from the connection."""
  totalCount: Int
}

"""A `NetstatsFact` edge in the connection."""
type NetstatsFactsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `NetstatsFact` at the end of the edge."""
  node: NetstatsFact
}

"""Methods to use when ordering `NetstatsFact`."""
enum NetstatsFactsOrderBy {
  NATURAL
  HOSTNAME_ASC
  HOSTNAME_DESC
  FAMILY_ASC
  FAMILY_DESC
  LOCAL_IP_ASC
  LOCAL_IP_DESC
  LOCAL_PORT_ASC
  LOCAL_PORT_DESC
  PROCESS_CMDLINE_ASC
  PROCESS_CMDLINE_DESC
  PROCESS_EXE_ASC
  PROCESS_EXE_DESC
  PROCESS_NAME_ASC
  PROCESS_NAME_DESC
  PROCESS_PID_ASC
  PROCESS_PID_DESC
  REMOTE_IP_ASC
  REMOTE_IP_DESC
  REMOTE_PORT_ASC
  REMOTE_PORT_DESC
  STATE_ASC
  STATE_DESC
  USER_ID_ASC
  USER_ID_DESC
  USER_NAME_ASC
  USER_NAME_DESC
  INCOMING_ASC
  INCOMING_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
}

type Opcommand implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  operationid: BigInt!
  type: Int!
  scriptid: BigInt
  executeOn: Int!
  port: String!
  authtype: Int!
  username: String!
  password: String!
  publickey: String!
  privatekey: String!
  command: String!

  """Reads a single `Operation` that is related to this `Opcommand`."""
  operationByOperationid: Operation

  """Reads a single `Script` that is related to this `Opcommand`."""
  scriptByScriptid: Script
}

"""
A condition to be used against `Opcommand` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpcommandCondition {
  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `scriptid` field."""
  scriptid: BigInt

  """Checks for equality with the object’s `executeOn` field."""
  executeOn: Int

  """Checks for equality with the object’s `port` field."""
  port: String

  """Checks for equality with the object’s `authtype` field."""
  authtype: Int

  """Checks for equality with the object’s `username` field."""
  username: String

  """Checks for equality with the object’s `password` field."""
  password: String

  """Checks for equality with the object’s `publickey` field."""
  publickey: String

  """Checks for equality with the object’s `privatekey` field."""
  privatekey: String

  """Checks for equality with the object’s `command` field."""
  command: String
}

type OpcommandGrp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  opcommandGrpid: BigInt!
  operationid: BigInt!
  groupid: BigInt!

  """Reads a single `Operation` that is related to this `OpcommandGrp`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `OpcommandGrp`."""
  groupByGroupid: Group
}

"""
A condition to be used against `OpcommandGrp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OpcommandGrpCondition {
  """Checks for equality with the object’s `opcommandGrpid` field."""
  opcommandGrpid: BigInt

  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt
}

"""An input for mutations affecting `OpcommandGrp`"""
input OpcommandGrpInput {
  opcommandGrpid: BigInt!
  operationid: BigInt!
  groupid: BigInt!
}

"""
Represents an update to a `OpcommandGrp`. Fields that are set will be updated.
"""
input OpcommandGrpPatch {
  opcommandGrpid: BigInt
  operationid: BigInt
  groupid: BigInt
}

"""A connection to a list of `OpcommandGrp` values."""
type OpcommandGrpsConnection {
  """A list of `OpcommandGrp` objects."""
  nodes: [OpcommandGrp]!

  """
  A list of edges which contains the `OpcommandGrp` and cursor to aid in pagination.
  """
  edges: [OpcommandGrpsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OpcommandGrp` you could get from the connection."""
  totalCount: Int
}

"""A `OpcommandGrp` edge in the connection."""
type OpcommandGrpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OpcommandGrp` at the end of the edge."""
  node: OpcommandGrp
}

"""Methods to use when ordering `OpcommandGrp`."""
enum OpcommandGrpsOrderBy {
  NATURAL
  OPCOMMAND_GRPID_ASC
  OPCOMMAND_GRPID_DESC
  OPERATIONID_ASC
  OPERATIONID_DESC
  GROUPID_ASC
  GROUPID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type OpcommandHst implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  opcommandHstid: BigInt!
  operationid: BigInt!
  hostid: BigInt

  """Reads a single `Operation` that is related to this `OpcommandHst`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `OpcommandHst`."""
  hostByHostid: Host
}

"""
A condition to be used against `OpcommandHst` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OpcommandHstCondition {
  """Checks for equality with the object’s `opcommandHstid` field."""
  opcommandHstid: BigInt

  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `hostid` field."""
  hostid: BigInt
}

"""An input for mutations affecting `OpcommandHst`"""
input OpcommandHstInput {
  opcommandHstid: BigInt!
  operationid: BigInt!
  hostid: BigInt
}

"""
Represents an update to a `OpcommandHst`. Fields that are set will be updated.
"""
input OpcommandHstPatch {
  opcommandHstid: BigInt
  operationid: BigInt
  hostid: BigInt
}

"""A connection to a list of `OpcommandHst` values."""
type OpcommandHstsConnection {
  """A list of `OpcommandHst` objects."""
  nodes: [OpcommandHst]!

  """
  A list of edges which contains the `OpcommandHst` and cursor to aid in pagination.
  """
  edges: [OpcommandHstsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OpcommandHst` you could get from the connection."""
  totalCount: Int
}

"""A `OpcommandHst` edge in the connection."""
type OpcommandHstsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OpcommandHst` at the end of the edge."""
  node: OpcommandHst
}

"""Methods to use when ordering `OpcommandHst`."""
enum OpcommandHstsOrderBy {
  NATURAL
  OPCOMMAND_HSTID_ASC
  OPCOMMAND_HSTID_DESC
  OPERATIONID_ASC
  OPERATIONID_DESC
  HOSTID_ASC
  HOSTID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Opcommand`"""
input OpcommandInput {
  operationid: BigInt!
  type: Int
  scriptid: BigInt
  executeOn: Int
  port: String
  authtype: Int
  username: String
  password: String
  publickey: String
  privatekey: String
  command: String
}

"""
Represents an update to a `Opcommand`. Fields that are set will be updated.
"""
input OpcommandPatch {
  operationid: BigInt
  type: Int
  scriptid: BigInt
  executeOn: Int
  port: String
  authtype: Int
  username: String
  password: String
  publickey: String
  privatekey: String
  command: String
}

"""A connection to a list of `Opcommand` values."""
type OpcommandsConnection {
  """A list of `Opcommand` objects."""
  nodes: [Opcommand]!

  """
  A list of edges which contains the `Opcommand` and cursor to aid in pagination.
  """
  edges: [OpcommandsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Opcommand` you could get from the connection."""
  totalCount: Int
}

"""A `Opcommand` edge in the connection."""
type OpcommandsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Opcommand` at the end of the edge."""
  node: Opcommand
}

"""Methods to use when ordering `Opcommand`."""
enum OpcommandsOrderBy {
  NATURAL
  OPERATIONID_ASC
  OPERATIONID_DESC
  TYPE_ASC
  TYPE_DESC
  SCRIPTID_ASC
  SCRIPTID_DESC
  EXECUTE_ON_ASC
  EXECUTE_ON_DESC
  PORT_ASC
  PORT_DESC
  AUTHTYPE_ASC
  AUTHTYPE_DESC
  USERNAME_ASC
  USERNAME_DESC
  PASSWORD_ASC
  PASSWORD_DESC
  PUBLICKEY_ASC
  PUBLICKEY_DESC
  PRIVATEKEY_ASC
  PRIVATEKEY_DESC
  COMMAND_ASC
  COMMAND_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Opcondition implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  opconditionid: BigInt!
  operationid: BigInt!
  conditiontype: Int!
  operator: Int!
  value: String!

  """Reads a single `Operation` that is related to this `Opcondition`."""
  operationByOperationid: Operation
}

"""
A condition to be used against `Opcondition` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpconditionCondition {
  """Checks for equality with the object’s `opconditionid` field."""
  opconditionid: BigInt

  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `conditiontype` field."""
  conditiontype: Int

  """Checks for equality with the object’s `operator` field."""
  operator: Int

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `Opcondition`"""
input OpconditionInput {
  opconditionid: BigInt!
  operationid: BigInt!
  conditiontype: Int
  operator: Int
  value: String
}

"""
Represents an update to a `Opcondition`. Fields that are set will be updated.
"""
input OpconditionPatch {
  opconditionid: BigInt
  operationid: BigInt
  conditiontype: Int
  operator: Int
  value: String
}

"""A connection to a list of `Opcondition` values."""
type OpconditionsConnection {
  """A list of `Opcondition` objects."""
  nodes: [Opcondition]!

  """
  A list of edges which contains the `Opcondition` and cursor to aid in pagination.
  """
  edges: [OpconditionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Opcondition` you could get from the connection."""
  totalCount: Int
}

"""A `Opcondition` edge in the connection."""
type OpconditionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Opcondition` at the end of the edge."""
  node: Opcondition
}

"""Methods to use when ordering `Opcondition`."""
enum OpconditionsOrderBy {
  NATURAL
  OPCONDITIONID_ASC
  OPCONDITIONID_DESC
  OPERATIONID_ASC
  OPERATIONID_DESC
  CONDITIONTYPE_ASC
  CONDITIONTYPE_DESC
  OPERATOR_ASC
  OPERATOR_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Operation implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  operationid: BigInt!
  actionid: BigInt!
  operationtype: Int!
  escPeriod: Int!
  escStepFrom: Int!
  escStepTo: Int!
  evaltype: Int!
  recovery: Int!

  """Reads a single `Action` that is related to this `Operation`."""
  actionByActionid: Action

  """Reads a single `Opmessage` that is related to this `Operation`."""
  opmessageByOperationid: Opmessage

  """Reads and enables pagination through a set of `Opmessage`."""
  opmessagesByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opmessage`."""
    orderBy: [OpmessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageCondition
  ): OpmessagesConnection! @deprecated(reason: "Please use opmessageByOperationid instead")

  """Reads and enables pagination through a set of `OpmessageGrp`."""
  opmessageGrpsByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpmessageGrp`."""
    orderBy: [OpmessageGrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageGrpCondition
  ): OpmessageGrpsConnection!

  """Reads and enables pagination through a set of `OpmessageUsr`."""
  opmessageUsrsByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpmessageUsr`."""
    orderBy: [OpmessageUsrsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageUsrCondition
  ): OpmessageUsrsConnection!

  """Reads a single `Opcommand` that is related to this `Operation`."""
  opcommandByOperationid: Opcommand

  """Reads and enables pagination through a set of `Opcommand`."""
  opcommandsByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opcommand`."""
    orderBy: [OpcommandsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandCondition
  ): OpcommandsConnection! @deprecated(reason: "Please use opcommandByOperationid instead")

  """Reads and enables pagination through a set of `OpcommandHst`."""
  opcommandHstsByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpcommandHst`."""
    orderBy: [OpcommandHstsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandHstCondition
  ): OpcommandHstsConnection!

  """Reads and enables pagination through a set of `OpcommandGrp`."""
  opcommandGrpsByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpcommandGrp`."""
    orderBy: [OpcommandGrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandGrpCondition
  ): OpcommandGrpsConnection!

  """Reads and enables pagination through a set of `Opgroup`."""
  opgroupsByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opgroup`."""
    orderBy: [OpgroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpgroupCondition
  ): OpgroupsConnection!

  """Reads and enables pagination through a set of `Optemplate`."""
  optemplatesByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Optemplate`."""
    orderBy: [OptemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OptemplateCondition
  ): OptemplatesConnection!

  """Reads and enables pagination through a set of `Opcondition`."""
  opconditionsByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opcondition`."""
    orderBy: [OpconditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpconditionCondition
  ): OpconditionsConnection!

  """Reads a single `Opinventory` that is related to this `Operation`."""
  opinventoryByOperationid: Opinventory

  """Reads and enables pagination through a set of `Opinventory`."""
  opinventoriesByOperationid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opinventory`."""
    orderBy: [OpinventoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpinventoryCondition
  ): OpinventoriesConnection! @deprecated(reason: "Please use opinventoryByOperationid instead")
}

"""
A condition to be used against `Operation` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OperationCondition {
  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `actionid` field."""
  actionid: BigInt

  """Checks for equality with the object’s `operationtype` field."""
  operationtype: Int

  """Checks for equality with the object’s `escPeriod` field."""
  escPeriod: Int

  """Checks for equality with the object’s `escStepFrom` field."""
  escStepFrom: Int

  """Checks for equality with the object’s `escStepTo` field."""
  escStepTo: Int

  """Checks for equality with the object’s `evaltype` field."""
  evaltype: Int

  """Checks for equality with the object’s `recovery` field."""
  recovery: Int
}

"""An input for mutations affecting `Operation`"""
input OperationInput {
  operationid: BigInt!
  actionid: BigInt!
  operationtype: Int
  escPeriod: Int
  escStepFrom: Int
  escStepTo: Int
  evaltype: Int
  recovery: Int
}

"""
Represents an update to a `Operation`. Fields that are set will be updated.
"""
input OperationPatch {
  operationid: BigInt
  actionid: BigInt
  operationtype: Int
  escPeriod: Int
  escStepFrom: Int
  escStepTo: Int
  evaltype: Int
  recovery: Int
}

"""A connection to a list of `Operation` values."""
type OperationsConnection {
  """A list of `Operation` objects."""
  nodes: [Operation]!

  """
  A list of edges which contains the `Operation` and cursor to aid in pagination.
  """
  edges: [OperationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Operation` you could get from the connection."""
  totalCount: Int
}

"""A `Operation` edge in the connection."""
type OperationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Operation` at the end of the edge."""
  node: Operation
}

"""Methods to use when ordering `Operation`."""
enum OperationsOrderBy {
  NATURAL
  OPERATIONID_ASC
  OPERATIONID_DESC
  ACTIONID_ASC
  ACTIONID_DESC
  OPERATIONTYPE_ASC
  OPERATIONTYPE_DESC
  ESC_PERIOD_ASC
  ESC_PERIOD_DESC
  ESC_STEP_FROM_ASC
  ESC_STEP_FROM_DESC
  ESC_STEP_TO_ASC
  ESC_STEP_TO_DESC
  EVALTYPE_ASC
  EVALTYPE_DESC
  RECOVERY_ASC
  RECOVERY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Opgroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  opgroupid: BigInt!
  operationid: BigInt!
  groupid: BigInt!

  """Reads a single `Operation` that is related to this `Opgroup`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `Opgroup`."""
  groupByGroupid: Group
}

"""
A condition to be used against `Opgroup` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input OpgroupCondition {
  """Checks for equality with the object’s `opgroupid` field."""
  opgroupid: BigInt

  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt
}

"""An input for mutations affecting `Opgroup`"""
input OpgroupInput {
  opgroupid: BigInt!
  operationid: BigInt!
  groupid: BigInt!
}

"""
Represents an update to a `Opgroup`. Fields that are set will be updated.
"""
input OpgroupPatch {
  opgroupid: BigInt
  operationid: BigInt
  groupid: BigInt
}

"""A connection to a list of `Opgroup` values."""
type OpgroupsConnection {
  """A list of `Opgroup` objects."""
  nodes: [Opgroup]!

  """
  A list of edges which contains the `Opgroup` and cursor to aid in pagination.
  """
  edges: [OpgroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Opgroup` you could get from the connection."""
  totalCount: Int
}

"""A `Opgroup` edge in the connection."""
type OpgroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Opgroup` at the end of the edge."""
  node: Opgroup
}

"""Methods to use when ordering `Opgroup`."""
enum OpgroupsOrderBy {
  NATURAL
  OPGROUPID_ASC
  OPGROUPID_DESC
  OPERATIONID_ASC
  OPERATIONID_DESC
  GROUPID_ASC
  GROUPID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `Opinventory` values."""
type OpinventoriesConnection {
  """A list of `Opinventory` objects."""
  nodes: [Opinventory]!

  """
  A list of edges which contains the `Opinventory` and cursor to aid in pagination.
  """
  edges: [OpinventoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Opinventory` you could get from the connection."""
  totalCount: Int
}

"""A `Opinventory` edge in the connection."""
type OpinventoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Opinventory` at the end of the edge."""
  node: Opinventory
}

"""Methods to use when ordering `Opinventory`."""
enum OpinventoriesOrderBy {
  NATURAL
  OPERATIONID_ASC
  OPERATIONID_DESC
  INVENTORY_MODE_ASC
  INVENTORY_MODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Opinventory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  operationid: BigInt!
  inventoryMode: Int!

  """Reads a single `Operation` that is related to this `Opinventory`."""
  operationByOperationid: Operation
}

"""
A condition to be used against `Opinventory` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpinventoryCondition {
  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `inventoryMode` field."""
  inventoryMode: Int
}

"""An input for mutations affecting `Opinventory`"""
input OpinventoryInput {
  operationid: BigInt!
  inventoryMode: Int
}

"""
Represents an update to a `Opinventory`. Fields that are set will be updated.
"""
input OpinventoryPatch {
  operationid: BigInt
  inventoryMode: Int
}

type Opmessage implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  operationid: BigInt!
  defaultMsg: Int!
  subject: String!
  message: String!
  mediatypeid: BigInt

  """Reads a single `Operation` that is related to this `Opmessage`."""
  operationByOperationid: Operation

  """Reads a single `MediaType` that is related to this `Opmessage`."""
  mediaTypeByMediatypeid: MediaType
}

"""
A condition to be used against `Opmessage` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OpmessageCondition {
  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `defaultMsg` field."""
  defaultMsg: Int

  """Checks for equality with the object’s `subject` field."""
  subject: String

  """Checks for equality with the object’s `message` field."""
  message: String

  """Checks for equality with the object’s `mediatypeid` field."""
  mediatypeid: BigInt
}

type OpmessageGrp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  opmessageGrpid: BigInt!
  operationid: BigInt!
  usrgrpid: BigInt!

  """Reads a single `Operation` that is related to this `OpmessageGrp`."""
  operationByOperationid: Operation

  """Reads a single `Usrgrp` that is related to this `OpmessageGrp`."""
  usrgrpByUsrgrpid: Usrgrp
}

"""
A condition to be used against `OpmessageGrp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OpmessageGrpCondition {
  """Checks for equality with the object’s `opmessageGrpid` field."""
  opmessageGrpid: BigInt

  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `usrgrpid` field."""
  usrgrpid: BigInt
}

"""An input for mutations affecting `OpmessageGrp`"""
input OpmessageGrpInput {
  opmessageGrpid: BigInt!
  operationid: BigInt!
  usrgrpid: BigInt!
}

"""
Represents an update to a `OpmessageGrp`. Fields that are set will be updated.
"""
input OpmessageGrpPatch {
  opmessageGrpid: BigInt
  operationid: BigInt
  usrgrpid: BigInt
}

"""A connection to a list of `OpmessageGrp` values."""
type OpmessageGrpsConnection {
  """A list of `OpmessageGrp` objects."""
  nodes: [OpmessageGrp]!

  """
  A list of edges which contains the `OpmessageGrp` and cursor to aid in pagination.
  """
  edges: [OpmessageGrpsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OpmessageGrp` you could get from the connection."""
  totalCount: Int
}

"""A `OpmessageGrp` edge in the connection."""
type OpmessageGrpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OpmessageGrp` at the end of the edge."""
  node: OpmessageGrp
}

"""Methods to use when ordering `OpmessageGrp`."""
enum OpmessageGrpsOrderBy {
  NATURAL
  OPMESSAGE_GRPID_ASC
  OPMESSAGE_GRPID_DESC
  OPERATIONID_ASC
  OPERATIONID_DESC
  USRGRPID_ASC
  USRGRPID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Opmessage`"""
input OpmessageInput {
  operationid: BigInt!
  defaultMsg: Int
  subject: String
  message: String
  mediatypeid: BigInt
}

"""
Represents an update to a `Opmessage`. Fields that are set will be updated.
"""
input OpmessagePatch {
  operationid: BigInt
  defaultMsg: Int
  subject: String
  message: String
  mediatypeid: BigInt
}

"""A connection to a list of `Opmessage` values."""
type OpmessagesConnection {
  """A list of `Opmessage` objects."""
  nodes: [Opmessage]!

  """
  A list of edges which contains the `Opmessage` and cursor to aid in pagination.
  """
  edges: [OpmessagesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Opmessage` you could get from the connection."""
  totalCount: Int
}

"""A `Opmessage` edge in the connection."""
type OpmessagesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Opmessage` at the end of the edge."""
  node: Opmessage
}

"""Methods to use when ordering `Opmessage`."""
enum OpmessagesOrderBy {
  NATURAL
  OPERATIONID_ASC
  OPERATIONID_DESC
  DEFAULT_MSG_ASC
  DEFAULT_MSG_DESC
  SUBJECT_ASC
  SUBJECT_DESC
  MESSAGE_ASC
  MESSAGE_DESC
  MEDIATYPEID_ASC
  MEDIATYPEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type OpmessageUsr implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  opmessageUsrid: BigInt!
  operationid: BigInt!
  userid: BigInt!

  """Reads a single `Operation` that is related to this `OpmessageUsr`."""
  operationByOperationid: Operation

  """Reads a single `User` that is related to this `OpmessageUsr`."""
  userByUserid: User
}

"""
A condition to be used against `OpmessageUsr` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input OpmessageUsrCondition {
  """Checks for equality with the object’s `opmessageUsrid` field."""
  opmessageUsrid: BigInt

  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt
}

"""An input for mutations affecting `OpmessageUsr`"""
input OpmessageUsrInput {
  opmessageUsrid: BigInt!
  operationid: BigInt!
  userid: BigInt!
}

"""
Represents an update to a `OpmessageUsr`. Fields that are set will be updated.
"""
input OpmessageUsrPatch {
  opmessageUsrid: BigInt
  operationid: BigInt
  userid: BigInt
}

"""A connection to a list of `OpmessageUsr` values."""
type OpmessageUsrsConnection {
  """A list of `OpmessageUsr` objects."""
  nodes: [OpmessageUsr]!

  """
  A list of edges which contains the `OpmessageUsr` and cursor to aid in pagination.
  """
  edges: [OpmessageUsrsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `OpmessageUsr` you could get from the connection."""
  totalCount: Int
}

"""A `OpmessageUsr` edge in the connection."""
type OpmessageUsrsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `OpmessageUsr` at the end of the edge."""
  node: OpmessageUsr
}

"""Methods to use when ordering `OpmessageUsr`."""
enum OpmessageUsrsOrderBy {
  NATURAL
  OPMESSAGE_USRID_ASC
  OPMESSAGE_USRID_DESC
  OPERATIONID_ASC
  OPERATIONID_DESC
  USERID_ASC
  USERID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Optemplate implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  optemplateid: BigInt!
  operationid: BigInt!
  templateid: BigInt!

  """Reads a single `Operation` that is related to this `Optemplate`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `Optemplate`."""
  hostByTemplateid: Host
}

"""
A condition to be used against `Optemplate` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input OptemplateCondition {
  """Checks for equality with the object’s `optemplateid` field."""
  optemplateid: BigInt

  """Checks for equality with the object’s `operationid` field."""
  operationid: BigInt

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt
}

"""An input for mutations affecting `Optemplate`"""
input OptemplateInput {
  optemplateid: BigInt!
  operationid: BigInt!
  templateid: BigInt!
}

"""
Represents an update to a `Optemplate`. Fields that are set will be updated.
"""
input OptemplatePatch {
  optemplateid: BigInt
  operationid: BigInt
  templateid: BigInt
}

"""A connection to a list of `Optemplate` values."""
type OptemplatesConnection {
  """A list of `Optemplate` objects."""
  nodes: [Optemplate]!

  """
  A list of edges which contains the `Optemplate` and cursor to aid in pagination.
  """
  edges: [OptemplatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Optemplate` you could get from the connection."""
  totalCount: Int
}

"""A `Optemplate` edge in the connection."""
type OptemplatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Optemplate` at the end of the edge."""
  node: Optemplate
}

"""Methods to use when ordering `Optemplate`."""
enum OptemplatesOrderBy {
  NATURAL
  OPTEMPLATEID_ASC
  OPTEMPLATEID_DESC
  OPERATIONID_ASC
  OPERATIONID_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

"""All input for the `parseJson` mutation."""
input ParseJsonInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
}

"""The output of our `parseJson` mutation."""
type ParseJsonPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type Problem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  eventid: BigInt!
  source: Int!
  object: Int!
  objectid: BigInt!
  clock: Int!
  ns: Int!
  rEventid: BigInt
  rClock: Int!
  rNs: Int!
  correlationid: BigInt
  userid: BigInt

  """Reads a single `Event` that is related to this `Problem`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `Problem`."""
  eventByREventid: Event

  """Reads and enables pagination through a set of `ProblemTag`."""
  problemTagsByEventid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProblemTag`."""
    orderBy: [ProblemTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemTagCondition
  ): ProblemTagsConnection!
}

"""
A condition to be used against `Problem` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProblemCondition {
  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `source` field."""
  source: Int

  """Checks for equality with the object’s `object` field."""
  object: Int

  """Checks for equality with the object’s `objectid` field."""
  objectid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `ns` field."""
  ns: Int

  """Checks for equality with the object’s `rEventid` field."""
  rEventid: BigInt

  """Checks for equality with the object’s `rClock` field."""
  rClock: Int

  """Checks for equality with the object’s `rNs` field."""
  rNs: Int

  """Checks for equality with the object’s `correlationid` field."""
  correlationid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt
}

"""An input for mutations affecting `Problem`"""
input ProblemInput {
  eventid: BigInt!
  source: Int
  object: Int
  objectid: BigInt
  clock: Int
  ns: Int
  rEventid: BigInt
  rClock: Int
  rNs: Int
  correlationid: BigInt
  userid: BigInt
}

"""
Represents an update to a `Problem`. Fields that are set will be updated.
"""
input ProblemPatch {
  eventid: BigInt
  source: Int
  object: Int
  objectid: BigInt
  clock: Int
  ns: Int
  rEventid: BigInt
  rClock: Int
  rNs: Int
  correlationid: BigInt
  userid: BigInt
}

"""A connection to a list of `Problem` values."""
type ProblemsConnection {
  """A list of `Problem` objects."""
  nodes: [Problem]!

  """
  A list of edges which contains the `Problem` and cursor to aid in pagination.
  """
  edges: [ProblemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Problem` you could get from the connection."""
  totalCount: Int
}

"""A `Problem` edge in the connection."""
type ProblemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Problem` at the end of the edge."""
  node: Problem
}

"""Methods to use when ordering `Problem`."""
enum ProblemsOrderBy {
  NATURAL
  EVENTID_ASC
  EVENTID_DESC
  SOURCE_ASC
  SOURCE_DESC
  OBJECT_ASC
  OBJECT_DESC
  OBJECTID_ASC
  OBJECTID_DESC
  CLOCK_ASC
  CLOCK_DESC
  NS_ASC
  NS_DESC
  R_EVENTID_ASC
  R_EVENTID_DESC
  R_CLOCK_ASC
  R_CLOCK_DESC
  R_NS_ASC
  R_NS_DESC
  CORRELATIONID_ASC
  CORRELATIONID_DESC
  USERID_ASC
  USERID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProblemTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  problemtagid: BigInt!
  eventid: BigInt!
  tag: String!
  value: String!

  """Reads a single `Problem` that is related to this `ProblemTag`."""
  problemByEventid: Problem
}

"""
A condition to be used against `ProblemTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ProblemTagCondition {
  """Checks for equality with the object’s `problemtagid` field."""
  problemtagid: BigInt

  """Checks for equality with the object’s `eventid` field."""
  eventid: BigInt

  """Checks for equality with the object’s `tag` field."""
  tag: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `ProblemTag`"""
input ProblemTagInput {
  problemtagid: BigInt!
  eventid: BigInt!
  tag: String
  value: String
}

"""
Represents an update to a `ProblemTag`. Fields that are set will be updated.
"""
input ProblemTagPatch {
  problemtagid: BigInt
  eventid: BigInt
  tag: String
  value: String
}

"""A connection to a list of `ProblemTag` values."""
type ProblemTagsConnection {
  """A list of `ProblemTag` objects."""
  nodes: [ProblemTag]!

  """
  A list of edges which contains the `ProblemTag` and cursor to aid in pagination.
  """
  edges: [ProblemTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProblemTag` you could get from the connection."""
  totalCount: Int
}

"""A `ProblemTag` edge in the connection."""
type ProblemTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProblemTag` at the end of the edge."""
  node: ProblemTag
}

"""Methods to use when ordering `ProblemTag`."""
enum ProblemTagsOrderBy {
  NATURAL
  PROBLEMTAGID_ASC
  PROBLEMTAGID_DESC
  EVENTID_ASC
  EVENTID_DESC
  TAG_ASC
  TAG_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Profile implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  profileid: BigInt!
  userid: BigInt!
  idx: String!
  idx2: BigInt!
  valueId: BigInt!
  valueInt: Int!
  valueStr: String!
  source: String!
  type: Int!

  """Reads a single `User` that is related to this `Profile`."""
  userByUserid: User
}

"""
A condition to be used against `Profile` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ProfileCondition {
  """Checks for equality with the object’s `profileid` field."""
  profileid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `idx` field."""
  idx: String

  """Checks for equality with the object’s `idx2` field."""
  idx2: BigInt

  """Checks for equality with the object’s `valueId` field."""
  valueId: BigInt

  """Checks for equality with the object’s `valueInt` field."""
  valueInt: Int

  """Checks for equality with the object’s `valueStr` field."""
  valueStr: String

  """Checks for equality with the object’s `source` field."""
  source: String

  """Checks for equality with the object’s `type` field."""
  type: Int
}

"""An input for mutations affecting `Profile`"""
input ProfileInput {
  profileid: BigInt!
  userid: BigInt!
  idx: String
  idx2: BigInt
  valueId: BigInt
  valueInt: Int
  valueStr: String
  source: String
  type: Int
}

"""
Represents an update to a `Profile`. Fields that are set will be updated.
"""
input ProfilePatch {
  profileid: BigInt
  userid: BigInt
  idx: String
  idx2: BigInt
  valueId: BigInt
  valueInt: Int
  valueStr: String
  source: String
  type: Int
}

"""A connection to a list of `Profile` values."""
type ProfilesConnection {
  """A list of `Profile` objects."""
  nodes: [Profile]!

  """
  A list of edges which contains the `Profile` and cursor to aid in pagination.
  """
  edges: [ProfilesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Profile` you could get from the connection."""
  totalCount: Int
}

"""A `Profile` edge in the connection."""
type ProfilesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Profile` at the end of the edge."""
  node: Profile
}

"""Methods to use when ordering `Profile`."""
enum ProfilesOrderBy {
  NATURAL
  PROFILEID_ASC
  PROFILEID_DESC
  USERID_ASC
  USERID_DESC
  IDX_ASC
  IDX_DESC
  IDX2_ASC
  IDX2_DESC
  VALUE_ID_ASC
  VALUE_ID_DESC
  VALUE_INT_ASC
  VALUE_INT_DESC
  VALUE_STR_ASC
  VALUE_STR_DESC
  SOURCE_ASC
  SOURCE_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProxyAutoregHost implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  clock: Int!
  host: String!
  listenIp: String!
  listenPort: Int!
  listenDns: String!
  hostMetadata: String!
}

"""
A condition to be used against `ProxyAutoregHost` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProxyAutoregHostCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `host` field."""
  host: String

  """Checks for equality with the object’s `listenIp` field."""
  listenIp: String

  """Checks for equality with the object’s `listenPort` field."""
  listenPort: Int

  """Checks for equality with the object’s `listenDns` field."""
  listenDns: String

  """Checks for equality with the object’s `hostMetadata` field."""
  hostMetadata: String
}

"""An input for mutations affecting `ProxyAutoregHost`"""
input ProxyAutoregHostInput {
  id: BigInt
  clock: Int
  host: String
  listenIp: String
  listenPort: Int
  listenDns: String
  hostMetadata: String
}

"""
Represents an update to a `ProxyAutoregHost`. Fields that are set will be updated.
"""
input ProxyAutoregHostPatch {
  id: BigInt
  clock: Int
  host: String
  listenIp: String
  listenPort: Int
  listenDns: String
  hostMetadata: String
}

"""A connection to a list of `ProxyAutoregHost` values."""
type ProxyAutoregHostsConnection {
  """A list of `ProxyAutoregHost` objects."""
  nodes: [ProxyAutoregHost]!

  """
  A list of edges which contains the `ProxyAutoregHost` and cursor to aid in pagination.
  """
  edges: [ProxyAutoregHostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `ProxyAutoregHost` you could get from the connection.
  """
  totalCount: Int
}

"""A `ProxyAutoregHost` edge in the connection."""
type ProxyAutoregHostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProxyAutoregHost` at the end of the edge."""
  node: ProxyAutoregHost
}

"""Methods to use when ordering `ProxyAutoregHost`."""
enum ProxyAutoregHostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CLOCK_ASC
  CLOCK_DESC
  HOST_ASC
  HOST_DESC
  LISTEN_IP_ASC
  LISTEN_IP_DESC
  LISTEN_PORT_ASC
  LISTEN_PORT_DESC
  LISTEN_DNS_ASC
  LISTEN_DNS_DESC
  HOST_METADATA_ASC
  HOST_METADATA_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `ProxyDhistory` values."""
type ProxyDhistoriesConnection {
  """A list of `ProxyDhistory` objects."""
  nodes: [ProxyDhistory]!

  """
  A list of edges which contains the `ProxyDhistory` and cursor to aid in pagination.
  """
  edges: [ProxyDhistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProxyDhistory` you could get from the connection."""
  totalCount: Int
}

"""A `ProxyDhistory` edge in the connection."""
type ProxyDhistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProxyDhistory` at the end of the edge."""
  node: ProxyDhistory
}

"""Methods to use when ordering `ProxyDhistory`."""
enum ProxyDhistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  CLOCK_ASC
  CLOCK_DESC
  DRULEID_ASC
  DRULEID_DESC
  TYPE_ASC
  TYPE_DESC
  IP_ASC
  IP_DESC
  PORT_ASC
  PORT_DESC
  KEY_ASC
  KEY_DESC
  VALUE_ASC
  VALUE_DESC
  STATUS_ASC
  STATUS_DESC
  DCHECKID_ASC
  DCHECKID_DESC
  DNS_ASC
  DNS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProxyDhistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  clock: Int!
  druleid: BigInt!
  type: Int!
  ip: String!
  port: Int!
  key_: String!
  value: String!
  status: Int!
  dcheckid: BigInt
  dns: String!
}

"""
A condition to be used against `ProxyDhistory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProxyDhistoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `druleid` field."""
  druleid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `ip` field."""
  ip: String

  """Checks for equality with the object’s `port` field."""
  port: Int

  """Checks for equality with the object’s `key_` field."""
  key_: String

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `dcheckid` field."""
  dcheckid: BigInt

  """Checks for equality with the object’s `dns` field."""
  dns: String
}

"""An input for mutations affecting `ProxyDhistory`"""
input ProxyDhistoryInput {
  id: BigInt
  clock: Int
  druleid: BigInt!
  type: Int
  ip: String
  port: Int
  key_: String
  value: String
  status: Int
  dcheckid: BigInt
  dns: String
}

"""
Represents an update to a `ProxyDhistory`. Fields that are set will be updated.
"""
input ProxyDhistoryPatch {
  id: BigInt
  clock: Int
  druleid: BigInt
  type: Int
  ip: String
  port: Int
  key_: String
  value: String
  status: Int
  dcheckid: BigInt
  dns: String
}

"""A connection to a list of `ProxyHistory` values."""
type ProxyHistoriesConnection {
  """A list of `ProxyHistory` objects."""
  nodes: [ProxyHistory]!

  """
  A list of edges which contains the `ProxyHistory` and cursor to aid in pagination.
  """
  edges: [ProxyHistoriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ProxyHistory` you could get from the connection."""
  totalCount: Int
}

"""A `ProxyHistory` edge in the connection."""
type ProxyHistoriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ProxyHistory` at the end of the edge."""
  node: ProxyHistory
}

"""Methods to use when ordering `ProxyHistory`."""
enum ProxyHistoriesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  TIMESTAMP_ASC
  TIMESTAMP_DESC
  SOURCE_ASC
  SOURCE_DESC
  SEVERITY_ASC
  SEVERITY_DESC
  VALUE_ASC
  VALUE_DESC
  LOGEVENTID_ASC
  LOGEVENTID_DESC
  NS_ASC
  NS_DESC
  STATE_ASC
  STATE_DESC
  LASTLOGSIZE_ASC
  LASTLOGSIZE_DESC
  MTIME_ASC
  MTIME_DESC
  FLAGS_ASC
  FLAGS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ProxyHistory implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  itemid: BigInt!
  clock: Int!
  timestamp: Int!
  source: String!
  severity: Int!
  value: String!
  logeventid: Int!
  ns: Int!
  state: Int!
  lastlogsize: BigFloat!
  mtime: Int!
  flags: Int!
}

"""
A condition to be used against `ProxyHistory` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ProxyHistoryCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `timestamp` field."""
  timestamp: Int

  """Checks for equality with the object’s `source` field."""
  source: String

  """Checks for equality with the object’s `severity` field."""
  severity: Int

  """Checks for equality with the object’s `value` field."""
  value: String

  """Checks for equality with the object’s `logeventid` field."""
  logeventid: Int

  """Checks for equality with the object’s `ns` field."""
  ns: Int

  """Checks for equality with the object’s `state` field."""
  state: Int

  """Checks for equality with the object’s `lastlogsize` field."""
  lastlogsize: BigFloat

  """Checks for equality with the object’s `mtime` field."""
  mtime: Int

  """Checks for equality with the object’s `flags` field."""
  flags: Int
}

"""An input for mutations affecting `ProxyHistory`"""
input ProxyHistoryInput {
  id: BigInt
  itemid: BigInt!
  clock: Int
  timestamp: Int
  source: String
  severity: Int
  value: String
  logeventid: Int
  ns: Int
  state: Int
  lastlogsize: BigFloat
  mtime: Int
  flags: Int
}

"""
Represents an update to a `ProxyHistory`. Fields that are set will be updated.
"""
input ProxyHistoryPatch {
  id: BigInt
  itemid: BigInt
  clock: Int
  timestamp: Int
  source: String
  severity: Int
  value: String
  logeventid: Int
  ns: Int
  state: Int
  lastlogsize: BigFloat
  mtime: Int
  flags: Int
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  nodeId: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    nodeId: ID!
  ): Node

  """Reads and enables pagination through a set of `Acknowledge`."""
  allAcknowledges(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Acknowledge`."""
    orderBy: [AcknowledgesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AcknowledgeCondition
  ): AcknowledgesConnection

  """Reads and enables pagination through a set of `Action`."""
  allActions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ActionCondition
  ): ActionsConnection

  """Reads and enables pagination through a set of `Alert`."""
  allAlerts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlertCondition
  ): AlertsConnection

  """Reads and enables pagination through a set of `ApplicationDiscovery`."""
  allApplicationDiscoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationDiscovery`."""
    orderBy: [ApplicationDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationDiscoveryCondition
  ): ApplicationDiscoveriesConnection

  """Reads and enables pagination through a set of `ApplicationPrototype`."""
  allApplicationPrototypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationPrototype`."""
    orderBy: [ApplicationPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationPrototypeCondition
  ): ApplicationPrototypesConnection

  """Reads and enables pagination through a set of `ApplicationTemplate`."""
  allApplicationTemplates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ApplicationTemplate`."""
    orderBy: [ApplicationTemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationTemplateCondition
  ): ApplicationTemplatesConnection

  """Reads and enables pagination through a set of `Application`."""
  allApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ApplicationCondition
  ): ApplicationsConnection

  """Reads and enables pagination through a set of `Auditlog`."""
  allAuditlogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Auditlog`."""
    orderBy: [AuditlogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuditlogCondition
  ): AuditlogsConnection

  """Reads and enables pagination through a set of `AuditlogDetail`."""
  allAuditlogDetails(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AuditlogDetail`."""
    orderBy: [AuditlogDetailsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuditlogDetailCondition
  ): AuditlogDetailsConnection

  """Reads and enables pagination through a set of `AutoregHost`."""
  allAutoregHosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `AutoregHost`."""
    orderBy: [AutoregHostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AutoregHostCondition
  ): AutoregHostsConnection

  """Reads and enables pagination through a set of `Condition`."""
  allConditions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Condition`."""
    orderBy: [ConditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConditionCondition
  ): ConditionsConnection

  """Reads and enables pagination through a set of `Config`."""
  allConfigs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Config`."""
    orderBy: [ConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConfigCondition
  ): ConfigsConnection

  """Reads and enables pagination through a set of `CorrCondition`."""
  allCorrConditions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrCondition`."""
    orderBy: [CorrConditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionCondition
  ): CorrConditionsConnection

  """Reads and enables pagination through a set of `CorrConditionGroup`."""
  allCorrConditionGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionGroup`."""
    orderBy: [CorrConditionGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionGroupCondition
  ): CorrConditionGroupsConnection

  """Reads and enables pagination through a set of `CorrConditionTag`."""
  allCorrConditionTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionTag`."""
    orderBy: [CorrConditionTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionTagCondition
  ): CorrConditionTagsConnection

  """Reads and enables pagination through a set of `CorrConditionTagpair`."""
  allCorrConditionTagpairs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionTagpair`."""
    orderBy: [CorrConditionTagpairsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionTagpairCondition
  ): CorrConditionTagpairsConnection

  """
  Reads and enables pagination through a set of `CorrConditionTagvalue`.
  """
  allCorrConditionTagvalues(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrConditionTagvalue`."""
    orderBy: [CorrConditionTagvaluesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrConditionTagvalueCondition
  ): CorrConditionTagvaluesConnection

  """Reads and enables pagination through a set of `CorrOperation`."""
  allCorrOperations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `CorrOperation`."""
    orderBy: [CorrOperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrOperationCondition
  ): CorrOperationsConnection

  """Reads and enables pagination through a set of `Correlation`."""
  allCorrelations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Correlation`."""
    orderBy: [CorrelationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CorrelationCondition
  ): CorrelationsConnection

  """Reads and enables pagination through a set of `Dbversion`."""
  allDbversions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dbversion`."""
    orderBy: [DbversionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DbversionCondition
  ): DbversionsConnection

  """Reads and enables pagination through a set of `Dcheck`."""
  allDchecks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dcheck`."""
    orderBy: [DchecksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DcheckCondition
  ): DchecksConnection

  """Reads and enables pagination through a set of `Dhost`."""
  allDhosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dhost`."""
    orderBy: [DhostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DhostCondition
  ): DhostsConnection

  """Reads and enables pagination through a set of `Drule`."""
  allDrules(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Drule`."""
    orderBy: [DrulesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DruleCondition
  ): DrulesConnection

  """Reads and enables pagination through a set of `Dservice`."""
  allDservices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Dservice`."""
    orderBy: [DservicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: DserviceCondition
  ): DservicesConnection

  """Reads and enables pagination through a set of `Escalation`."""
  allEscalations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Escalation`."""
    orderBy: [EscalationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EscalationCondition
  ): EscalationsConnection

  """Reads and enables pagination through a set of `EventRecovery`."""
  allEventRecoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventRecovery`."""
    orderBy: [EventRecoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventRecoveryCondition
  ): EventRecoveriesConnection

  """Reads and enables pagination through a set of `EventTag`."""
  allEventTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventTagCondition
  ): EventTagsConnection

  """Reads and enables pagination through a set of `Event`."""
  allEvents(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: EventCondition
  ): EventsConnection

  """Reads and enables pagination through a set of `Expression`."""
  allExpressions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Expression`."""
    orderBy: [ExpressionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ExpressionCondition
  ): ExpressionsConnection

  """Reads and enables pagination through a set of `Fact`."""
  allFacts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Fact`."""
    orderBy: [FactsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FactCondition
  ): FactsConnection

  """Reads and enables pagination through a set of `Function`."""
  allFunctions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Function`."""
    orderBy: [FunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FunctionCondition
  ): FunctionsConnection

  """Reads and enables pagination through a set of `Globalmacro`."""
  allGlobalmacros(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Globalmacro`."""
    orderBy: [GlobalmacrosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GlobalmacroCondition
  ): GlobalmacrosConnection

  """Reads and enables pagination through a set of `Globalvar`."""
  allGlobalvars(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Globalvar`."""
    orderBy: [GlobalvarsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GlobalvarCondition
  ): GlobalvarsConnection

  """Reads and enables pagination through a set of `GraphDiscovery`."""
  allGraphDiscoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GraphDiscovery`."""
    orderBy: [GraphDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphDiscoveryCondition
  ): GraphDiscoveriesConnection

  """Reads and enables pagination through a set of `GraphTheme`."""
  allGraphThemes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GraphTheme`."""
    orderBy: [GraphThemesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphThemeCondition
  ): GraphThemesConnection

  """Reads and enables pagination through a set of `Graph`."""
  allGraphs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Graph`."""
    orderBy: [GraphsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphCondition
  ): GraphsConnection

  """Reads and enables pagination through a set of `GraphsItem`."""
  allGraphsItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GraphsItem`."""
    orderBy: [GraphsItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GraphsItemCondition
  ): GraphsItemsConnection

  """Reads and enables pagination through a set of `GroupDiscovery`."""
  allGroupDiscoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupDiscovery`."""
    orderBy: [GroupDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupDiscoveryCondition
  ): GroupDiscoveriesConnection

  """Reads and enables pagination through a set of `GroupPrototype`."""
  allGroupPrototypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `GroupPrototype`."""
    orderBy: [GroupPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupPrototypeCondition
  ): GroupPrototypesConnection

  """Reads and enables pagination through a set of `Group`."""
  allGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: GroupCondition
  ): GroupsConnection

  """Reads and enables pagination through a set of `History`."""
  allHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `History`."""
    orderBy: [HistoriesOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HistoryCondition
  ): HistoriesConnection

  """Reads and enables pagination through a set of `HistoryLog`."""
  allHistoryLogs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HistoryLog`."""
    orderBy: [HistoryLogsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HistoryLogCondition
  ): HistoryLogsConnection

  """Reads and enables pagination through a set of `HistoryStr`."""
  allHistoryStrs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HistoryStr`."""
    orderBy: [HistoryStrsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HistoryStrCondition
  ): HistoryStrsConnection

  """Reads and enables pagination through a set of `HistoryText`."""
  allHistoryTexts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HistoryText`."""
    orderBy: [HistoryTextsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HistoryTextCondition
  ): HistoryTextsConnection

  """Reads and enables pagination through a set of `HistoryUint`."""
  allHistoryUints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HistoryUint`."""
    orderBy: [HistoryUintsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HistoryUintCondition
  ): HistoryUintsConnection

  """Reads and enables pagination through a set of `HostDiscovery`."""
  allHostDiscoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostDiscovery`."""
    orderBy: [HostDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostDiscoveryCondition
  ): HostDiscoveriesConnection

  """Reads and enables pagination through a set of `HostInventory`."""
  allHostInventories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostInventory`."""
    orderBy: [HostInventoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostInventoryCondition
  ): HostInventoriesConnection

  """Reads and enables pagination through a set of `Hostmacro`."""
  allHostmacros(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Hostmacro`."""
    orderBy: [HostmacrosOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostmacroCondition
  ): HostmacrosConnection

  """Reads and enables pagination through a set of `Host`."""
  allHosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Host`."""
    orderBy: [HostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostCondition
  ): HostsConnection

  """Reads and enables pagination through a set of `HostsGroup`."""
  allHostsGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostsGroup`."""
    orderBy: [HostsGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostsGroupCondition
  ): HostsGroupsConnection

  """Reads and enables pagination through a set of `HostsTemplate`."""
  allHostsTemplates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `HostsTemplate`."""
    orderBy: [HostsTemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HostsTemplateCondition
  ): HostsTemplatesConnection

  """Reads and enables pagination through a set of `Housekeeper`."""
  allHousekeepers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Housekeeper`."""
    orderBy: [HousekeepersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HousekeeperCondition
  ): HousekeepersConnection

  """Reads and enables pagination through a set of `Httpstep`."""
  allHttpsteps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httpstep`."""
    orderBy: [HttpstepsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttpstepCondition
  ): HttpstepsConnection

  """Reads and enables pagination through a set of `Httpstepitem`."""
  allHttpstepitems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httpstepitem`."""
    orderBy: [HttpstepitemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttpstepitemCondition
  ): HttpstepitemsConnection

  """Reads and enables pagination through a set of `Httptest`."""
  allHttptests(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httptest`."""
    orderBy: [HttptestsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttptestCondition
  ): HttptestsConnection

  """Reads and enables pagination through a set of `Httptestitem`."""
  allHttptestitems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Httptestitem`."""
    orderBy: [HttptestitemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: HttptestitemCondition
  ): HttptestitemsConnection

  """Reads and enables pagination through a set of `IconMap`."""
  allIconMaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IconMap`."""
    orderBy: [IconMapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IconMapCondition
  ): IconMapsConnection

  """Reads and enables pagination through a set of `IconMapping`."""
  allIconMappings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `IconMapping`."""
    orderBy: [IconMappingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IconMappingCondition
  ): IconMappingsConnection

  """Reads and enables pagination through a set of `Id`."""
  allIds(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Id`."""
    orderBy: [IdsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: IdCondition
  ): IdsConnection

  """Reads and enables pagination through a set of `Image`."""
  allImages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ImageCondition
  ): ImagesConnection

  """Reads and enables pagination through a set of `Interface`."""
  allInterfaces(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Interface`."""
    orderBy: [InterfacesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterfaceCondition
  ): InterfacesConnection

  """Reads and enables pagination through a set of `InterfaceDiscovery`."""
  allInterfaceDiscoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `InterfaceDiscovery`."""
    orderBy: [InterfaceDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: InterfaceDiscoveryCondition
  ): InterfaceDiscoveriesConnection

  """
  Reads and enables pagination through a set of `ItemApplicationPrototype`.
  """
  allItemApplicationPrototypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemApplicationPrototype`."""
    orderBy: [ItemApplicationPrototypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemApplicationPrototypeCondition
  ): ItemApplicationPrototypesConnection

  """Reads and enables pagination through a set of `ItemConditionOrig`."""
  allItemConditionOrigs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemConditionOrig`."""
    orderBy: [ItemConditionOrigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemConditionOrigCondition
  ): ItemConditionOrigsConnection

  """Reads and enables pagination through a set of `ItemDiscovery`."""
  allItemDiscoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemDiscovery`."""
    orderBy: [ItemDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemDiscoveryCondition
  ): ItemDiscoveriesConnection

  """Reads and enables pagination through a set of `Item`."""
  allItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition
  ): ItemsConnection

  """Reads and enables pagination through a set of `ItemsApplication`."""
  allItemsApplications(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ItemsApplication`."""
    orderBy: [ItemsApplicationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemsApplicationCondition
  ): ItemsApplicationsConnection

  """Reads and enables pagination through a set of `Maintenance`."""
  allMaintenances(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Maintenance`."""
    orderBy: [MaintenancesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenanceCondition
  ): MaintenancesConnection

  """Reads and enables pagination through a set of `MaintenancesGroup`."""
  allMaintenancesGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesGroup`."""
    orderBy: [MaintenancesGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesGroupCondition
  ): MaintenancesGroupsConnection

  """Reads and enables pagination through a set of `MaintenancesHost`."""
  allMaintenancesHosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesHost`."""
    orderBy: [MaintenancesHostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesHostCondition
  ): MaintenancesHostsConnection

  """Reads and enables pagination through a set of `MaintenancesWindow`."""
  allMaintenancesWindows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesWindow`."""
    orderBy: [MaintenancesWindowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesWindowCondition
  ): MaintenancesWindowsConnection

  """Reads and enables pagination through a set of `Mapping`."""
  allMappings(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Mapping`."""
    orderBy: [MappingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MappingCondition
  ): MappingsConnection

  """Reads and enables pagination through a set of `Media`."""
  allMedia(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection

  """Reads and enables pagination through a set of `MediaType`."""
  allMediaTypes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MediaType`."""
    orderBy: [MediaTypesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaTypeCondition
  ): MediaTypesConnection

  """Reads and enables pagination through a set of `NetstatsFact`."""
  allNetstatsFacts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NetstatsFact`."""
    orderBy: [NetstatsFactsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NetstatsFactCondition
  ): NetstatsFactsConnection

  """Reads and enables pagination through a set of `NetstatsFactsBck`."""
  allNetstatsFactsBcks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `NetstatsFactsBck`."""
    orderBy: [NetstatsFactsBcksOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: NetstatsFactsBckCondition
  ): NetstatsFactsBcksConnection

  """Reads and enables pagination through a set of `Opcommand`."""
  allOpcommands(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opcommand`."""
    orderBy: [OpcommandsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandCondition
  ): OpcommandsConnection

  """Reads and enables pagination through a set of `OpcommandGrp`."""
  allOpcommandGrps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpcommandGrp`."""
    orderBy: [OpcommandGrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandGrpCondition
  ): OpcommandGrpsConnection

  """Reads and enables pagination through a set of `OpcommandHst`."""
  allOpcommandHsts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpcommandHst`."""
    orderBy: [OpcommandHstsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandHstCondition
  ): OpcommandHstsConnection

  """Reads and enables pagination through a set of `Opcondition`."""
  allOpconditions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opcondition`."""
    orderBy: [OpconditionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpconditionCondition
  ): OpconditionsConnection

  """Reads and enables pagination through a set of `Operation`."""
  allOperations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OperationCondition
  ): OperationsConnection

  """Reads and enables pagination through a set of `Opgroup`."""
  allOpgroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opgroup`."""
    orderBy: [OpgroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpgroupCondition
  ): OpgroupsConnection

  """Reads and enables pagination through a set of `Opinventory`."""
  allOpinventories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opinventory`."""
    orderBy: [OpinventoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpinventoryCondition
  ): OpinventoriesConnection

  """Reads and enables pagination through a set of `Opmessage`."""
  allOpmessages(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opmessage`."""
    orderBy: [OpmessagesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageCondition
  ): OpmessagesConnection

  """Reads and enables pagination through a set of `OpmessageGrp`."""
  allOpmessageGrps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpmessageGrp`."""
    orderBy: [OpmessageGrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageGrpCondition
  ): OpmessageGrpsConnection

  """Reads and enables pagination through a set of `OpmessageUsr`."""
  allOpmessageUsrs(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpmessageUsr`."""
    orderBy: [OpmessageUsrsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageUsrCondition
  ): OpmessageUsrsConnection

  """Reads and enables pagination through a set of `Optemplate`."""
  allOptemplates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Optemplate`."""
    orderBy: [OptemplatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OptemplateCondition
  ): OptemplatesConnection

  """Reads and enables pagination through a set of `Problem`."""
  allProblems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemCondition
  ): ProblemsConnection

  """Reads and enables pagination through a set of `ProblemTag`."""
  allProblemTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProblemTag`."""
    orderBy: [ProblemTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProblemTagCondition
  ): ProblemTagsConnection

  """Reads and enables pagination through a set of `Profile`."""
  allProfiles(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection

  """Reads and enables pagination through a set of `ProxyAutoregHost`."""
  allProxyAutoregHosts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProxyAutoregHost`."""
    orderBy: [ProxyAutoregHostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProxyAutoregHostCondition
  ): ProxyAutoregHostsConnection

  """Reads and enables pagination through a set of `ProxyDhistory`."""
  allProxyDhistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProxyDhistory`."""
    orderBy: [ProxyDhistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProxyDhistoryCondition
  ): ProxyDhistoriesConnection

  """Reads and enables pagination through a set of `ProxyHistory`."""
  allProxyHistories(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ProxyHistory`."""
    orderBy: [ProxyHistoriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProxyHistoryCondition
  ): ProxyHistoriesConnection

  """Reads and enables pagination through a set of `Regexp`."""
  allRegexps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Regexp`."""
    orderBy: [RegexpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RegexpCondition
  ): RegexpsConnection

  """Reads and enables pagination through a set of `Right`."""
  allRights(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Right`."""
    orderBy: [RightsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RightCondition
  ): RightsConnection

  """Reads and enables pagination through a set of `ScreenUser`."""
  allScreenUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreenUser`."""
    orderBy: [ScreenUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenUserCondition
  ): ScreenUsersConnection

  """Reads and enables pagination through a set of `ScreenUsrgrp`."""
  allScreenUsrgrps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreenUsrgrp`."""
    orderBy: [ScreenUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenUsrgrpCondition
  ): ScreenUsrgrpsConnection

  """Reads and enables pagination through a set of `Screen`."""
  allScreens(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Screen`."""
    orderBy: [ScreensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenCondition
  ): ScreensConnection

  """Reads and enables pagination through a set of `ScreensItem`."""
  allScreensItems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreensItem`."""
    orderBy: [ScreensItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreensItemCondition
  ): ScreensItemsConnection

  """Reads and enables pagination through a set of `Script`."""
  allScripts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition
  ): ScriptsConnection

  """Reads and enables pagination through a set of `ServiceAlarm`."""
  allServiceAlarms(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ServiceAlarm`."""
    orderBy: [ServiceAlarmsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceAlarmCondition
  ): ServiceAlarmsConnection

  """Reads and enables pagination through a set of `Service`."""
  allServices(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceCondition
  ): ServicesConnection

  """Reads and enables pagination through a set of `ServicesLink`."""
  allServicesLinks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ServicesLink`."""
    orderBy: [ServicesLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServicesLinkCondition
  ): ServicesLinksConnection

  """Reads and enables pagination through a set of `ServicesTime`."""
  allServicesTimes(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ServicesTime`."""
    orderBy: [ServicesTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServicesTimeCondition
  ): ServicesTimesConnection

  """Reads and enables pagination through a set of `Session`."""
  allSessions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SessionCondition
  ): SessionsConnection

  """Reads and enables pagination through a set of `Slide`."""
  allSlides(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Slide`."""
    orderBy: [SlidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideCondition
  ): SlidesConnection

  """Reads and enables pagination through a set of `SlideshowUser`."""
  allSlideshowUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SlideshowUser`."""
    orderBy: [SlideshowUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowUserCondition
  ): SlideshowUsersConnection

  """Reads and enables pagination through a set of `SlideshowUsrgrp`."""
  allSlideshowUsrgrps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SlideshowUsrgrp`."""
    orderBy: [SlideshowUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowUsrgrpCondition
  ): SlideshowUsrgrpsConnection

  """Reads and enables pagination through a set of `Slideshow`."""
  allSlideshows(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Slideshow`."""
    orderBy: [SlideshowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowCondition
  ): SlideshowsConnection

  """Reads and enables pagination through a set of `SysmapElementUrl`."""
  allSysmapElementUrls(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapElementUrl`."""
    orderBy: [SysmapElementUrlsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapElementUrlCondition
  ): SysmapElementUrlsConnection

  """Reads and enables pagination through a set of `SysmapUrl`."""
  allSysmapUrls(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUrl`."""
    orderBy: [SysmapUrlsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUrlCondition
  ): SysmapUrlsConnection

  """Reads and enables pagination through a set of `SysmapUser`."""
  allSysmapUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUser`."""
    orderBy: [SysmapUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUserCondition
  ): SysmapUsersConnection

  """Reads and enables pagination through a set of `SysmapUsrgrp`."""
  allSysmapUsrgrps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUsrgrp`."""
    orderBy: [SysmapUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUsrgrpCondition
  ): SysmapUsrgrpsConnection

  """Reads and enables pagination through a set of `Sysmap`."""
  allSysmaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sysmap`."""
    orderBy: [SysmapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapCondition
  ): SysmapsConnection

  """Reads and enables pagination through a set of `SysmapsElement`."""
  allSysmapsElements(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsElementCondition
  ): SysmapsElementsConnection

  """Reads and enables pagination through a set of `SysmapsLinkTrigger`."""
  allSysmapsLinkTriggers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsLinkTrigger`."""
    orderBy: [SysmapsLinkTriggersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsLinkTriggerCondition
  ): SysmapsLinkTriggersConnection

  """Reads and enables pagination through a set of `SysmapsLink`."""
  allSysmapsLinks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsLink`."""
    orderBy: [SysmapsLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsLinkCondition
  ): SysmapsLinksConnection

  """Reads and enables pagination through a set of `Task`."""
  allTasks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCondition
  ): TasksConnection

  """Reads and enables pagination through a set of `TaskCloseProblem`."""
  allTaskCloseProblems(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TaskCloseProblem`."""
    orderBy: [TaskCloseProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCloseProblemCondition
  ): TaskCloseProblemsConnection

  """Reads and enables pagination through a set of `Timeperiod`."""
  allTimeperiods(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Timeperiod`."""
    orderBy: [TimeperiodsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TimeperiodCondition
  ): TimeperiodsConnection

  """Reads and enables pagination through a set of `Trend`."""
  allTrends(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Trend`."""
    orderBy: [TrendsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrendCondition
  ): TrendsConnection

  """Reads and enables pagination through a set of `TrendsUint`."""
  allTrendsUints(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TrendsUint`."""
    orderBy: [TrendsUintsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TrendsUintCondition
  ): TrendsUintsConnection

  """Reads and enables pagination through a set of `TriggerDepend`."""
  allTriggerDepends(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerDepend`."""
    orderBy: [TriggerDependsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerDependCondition
  ): TriggerDependsConnection

  """Reads and enables pagination through a set of `TriggerDiscovery`."""
  allTriggerDiscoveries(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerDiscovery`."""
    orderBy: [TriggerDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerDiscoveryCondition
  ): TriggerDiscoveriesConnection

  """Reads and enables pagination through a set of `TriggerTag`."""
  allTriggerTags(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerTag`."""
    orderBy: [TriggerTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerTagCondition
  ): TriggerTagsConnection

  """Reads and enables pagination through a set of `Trigger`."""
  allTriggers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Trigger`."""
    orderBy: [TriggersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerCondition
  ): TriggersConnection

  """Reads and enables pagination through a set of `User`."""
  allUsers(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection

  """Reads and enables pagination through a set of `UsersGroup`."""
  allUsersGroups(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersGroupCondition
  ): UsersGroupsConnection

  """Reads and enables pagination through a set of `Usrgrp`."""
  allUsrgrps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Usrgrp`."""
    orderBy: [UsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsrgrpCondition
  ): UsrgrpsConnection

  """Reads and enables pagination through a set of `Valuemap`."""
  allValuemaps(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Valuemap`."""
    orderBy: [ValuemapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ValuemapCondition
  ): ValuemapsConnection

  """Reads and enables pagination through a set of `ZbxPartition`."""
  allZbxPartitions(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ZbxPartition`."""
    orderBy: [ZbxPartitionsOrderBy!] = [NATURAL]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ZbxPartitionCondition
  ): ZbxPartitionsConnection
  acknowledgeByAcknowledgeid(acknowledgeid: BigInt!): Acknowledge
  actionByActionid(actionid: BigInt!): Action
  alertByAlertid(alertid: BigInt!): Alert
  applicationDiscoveryByApplicationDiscoveryid(applicationDiscoveryid: BigInt!): ApplicationDiscovery
  applicationPrototypeByApplicationPrototypeid(applicationPrototypeid: BigInt!): ApplicationPrototype
  applicationTemplateByApplicationTemplateid(applicationTemplateid: BigInt!): ApplicationTemplate
  applicationByApplicationid(applicationid: BigInt!): Application
  auditlogByAuditid(auditid: BigInt!): Auditlog
  auditlogDetailByAuditdetailid(auditdetailid: BigInt!): AuditlogDetail
  autoregHostByAutoregHostid(autoregHostid: BigInt!): AutoregHost
  conditionByConditionid(conditionid: BigInt!): Condition
  configByConfigid(configid: BigInt!): Config
  corrConditionByCorrConditionid(corrConditionid: BigInt!): CorrCondition
  corrConditionGroupByCorrConditionid(corrConditionid: BigInt!): CorrConditionGroup
  corrConditionTagByCorrConditionid(corrConditionid: BigInt!): CorrConditionTag
  corrConditionTagpairByCorrConditionid(corrConditionid: BigInt!): CorrConditionTagpair
  corrConditionTagvalueByCorrConditionid(corrConditionid: BigInt!): CorrConditionTagvalue
  corrOperationByCorrOperationid(corrOperationid: BigInt!): CorrOperation
  correlationByCorrelationid(correlationid: BigInt!): Correlation
  dcheckByDcheckid(dcheckid: BigInt!): Dcheck
  dhostByDhostid(dhostid: BigInt!): Dhost
  druleByDruleid(druleid: BigInt!): Drule
  dserviceByDserviceid(dserviceid: BigInt!): Dservice
  escalationByEscalationid(escalationid: BigInt!): Escalation
  eventRecoveryByEventid(eventid: BigInt!): EventRecovery
  eventTagByEventtagid(eventtagid: BigInt!): EventTag
  eventByEventid(eventid: BigInt!): Event
  expressionByExpressionid(expressionid: BigInt!): Expression
  factById(id: Int!): Fact
  functionByFunctionid(functionid: BigInt!): Function
  globalmacroByGlobalmacroid(globalmacroid: BigInt!): Globalmacro
  globalvarByGlobalvarid(globalvarid: BigInt!): Globalvar
  graphDiscoveryByGraphid(graphid: BigInt!): GraphDiscovery
  graphThemeByGraphthemeid(graphthemeid: BigInt!): GraphTheme
  graphByGraphid(graphid: BigInt!): Graph
  graphsItemByGitemid(gitemid: BigInt!): GraphsItem
  groupDiscoveryByGroupid(groupid: BigInt!): GroupDiscovery
  groupPrototypeByGroupPrototypeid(groupPrototypeid: BigInt!): GroupPrototype
  groupByGroupid(groupid: BigInt!): Group
  hostDiscoveryByHostid(hostid: BigInt!): HostDiscovery
  hostInventoryByHostid(hostid: BigInt!): HostInventory
  hostmacroByHostmacroid(hostmacroid: BigInt!): Hostmacro
  hostByHostid(hostid: BigInt!): Host
  hostsGroupByHostgroupid(hostgroupid: BigInt!): HostsGroup
  hostsTemplateByHosttemplateid(hosttemplateid: BigInt!): HostsTemplate
  housekeeperByHousekeeperid(housekeeperid: BigInt!): Housekeeper
  httpstepByHttpstepid(httpstepid: BigInt!): Httpstep
  httpstepitemByHttpstepitemid(httpstepitemid: BigInt!): Httpstepitem
  httptestByHttptestid(httptestid: BigInt!): Httptest
  httptestitemByHttptestitemid(httptestitemid: BigInt!): Httptestitem
  iconMapByIconmapid(iconmapid: BigInt!): IconMap
  iconMappingByIconmappingid(iconmappingid: BigInt!): IconMapping
  idByTableNameAndFieldName(tableName: String!, fieldName: String!): Id
  imageByImageid(imageid: BigInt!): Image
  interfaceByInterfaceid(interfaceid: BigInt!): Interface
  interfaceDiscoveryByInterfaceid(interfaceid: BigInt!): InterfaceDiscovery
  itemApplicationPrototypeByItemApplicationPrototypeid(itemApplicationPrototypeid: BigInt!): ItemApplicationPrototype
  itemConditionOrigByItemConditionid(itemConditionid: BigInt!): ItemConditionOrig
  itemDiscoveryByItemdiscoveryid(itemdiscoveryid: BigInt!): ItemDiscovery
  itemByItemid(itemid: BigInt!): Item
  itemsApplicationByItemappid(itemappid: BigInt!): ItemsApplication
  maintenanceByMaintenanceid(maintenanceid: BigInt!): Maintenance
  maintenancesGroupByMaintenanceGroupid(maintenanceGroupid: BigInt!): MaintenancesGroup
  maintenancesHostByMaintenanceHostid(maintenanceHostid: BigInt!): MaintenancesHost
  maintenancesWindowByMaintenanceTimeperiodid(maintenanceTimeperiodid: BigInt!): MaintenancesWindow
  mappingByMappingid(mappingid: BigInt!): Mapping
  mediaByMediaid(mediaid: BigInt!): Media
  mediaTypeByMediatypeid(mediatypeid: BigInt!): MediaType
  opcommandByOperationid(operationid: BigInt!): Opcommand
  opcommandGrpByOpcommandGrpid(opcommandGrpid: BigInt!): OpcommandGrp
  opcommandHstByOpcommandHstid(opcommandHstid: BigInt!): OpcommandHst
  opconditionByOpconditionid(opconditionid: BigInt!): Opcondition
  operationByOperationid(operationid: BigInt!): Operation
  opgroupByOpgroupid(opgroupid: BigInt!): Opgroup
  opinventoryByOperationid(operationid: BigInt!): Opinventory
  opmessageByOperationid(operationid: BigInt!): Opmessage
  opmessageGrpByOpmessageGrpid(opmessageGrpid: BigInt!): OpmessageGrp
  opmessageUsrByOpmessageUsrid(opmessageUsrid: BigInt!): OpmessageUsr
  optemplateByOptemplateid(optemplateid: BigInt!): Optemplate
  problemByEventid(eventid: BigInt!): Problem
  problemTagByProblemtagid(problemtagid: BigInt!): ProblemTag
  profileByProfileid(profileid: BigInt!): Profile
  proxyAutoregHostById(id: BigInt!): ProxyAutoregHost
  proxyDhistoryById(id: BigInt!): ProxyDhistory
  proxyHistoryById(id: BigInt!): ProxyHistory
  regexpByRegexpid(regexpid: BigInt!): Regexp
  rightByRightid(rightid: BigInt!): Right
  screenUserByScreenuserid(screenuserid: BigInt!): ScreenUser
  screenUsrgrpByScreenusrgrpid(screenusrgrpid: BigInt!): ScreenUsrgrp
  screenByScreenid(screenid: BigInt!): Screen
  screensItemByScreenitemid(screenitemid: BigInt!): ScreensItem
  scriptByScriptid(scriptid: BigInt!): Script
  serviceAlarmByServicealarmid(servicealarmid: BigInt!): ServiceAlarm
  serviceByServiceid(serviceid: BigInt!): Service
  servicesLinkByLinkid(linkid: BigInt!): ServicesLink
  servicesTimeByTimeid(timeid: BigInt!): ServicesTime
  sessionBySessionid(sessionid: String!): Session
  slideBySlideid(slideid: BigInt!): Slide
  slideshowUserBySlideshowuserid(slideshowuserid: BigInt!): SlideshowUser
  slideshowUsrgrpBySlideshowusrgrpid(slideshowusrgrpid: BigInt!): SlideshowUsrgrp
  slideshowBySlideshowid(slideshowid: BigInt!): Slideshow
  sysmapElementUrlBySysmapelementurlid(sysmapelementurlid: BigInt!): SysmapElementUrl
  sysmapUrlBySysmapurlid(sysmapurlid: BigInt!): SysmapUrl
  sysmapUserBySysmapuserid(sysmapuserid: BigInt!): SysmapUser
  sysmapUsrgrpBySysmapusrgrpid(sysmapusrgrpid: BigInt!): SysmapUsrgrp
  sysmapBySysmapid(sysmapid: BigInt!): Sysmap
  sysmapsElementBySelementid(selementid: BigInt!): SysmapsElement
  sysmapsLinkTriggerByLinktriggerid(linktriggerid: BigInt!): SysmapsLinkTrigger
  sysmapsLinkByLinkid(linkid: BigInt!): SysmapsLink
  taskByTaskid(taskid: BigInt!): Task
  taskCloseProblemByTaskid(taskid: BigInt!): TaskCloseProblem
  timeperiodByTimeperiodid(timeperiodid: BigInt!): Timeperiod
  trendByItemidAndClock(itemid: BigInt!, clock: Int!): Trend
  trendsUintByItemidAndClock(itemid: BigInt!, clock: Int!): TrendsUint
  triggerDependByTriggerdepid(triggerdepid: BigInt!): TriggerDepend
  triggerDiscoveryByTriggerid(triggerid: BigInt!): TriggerDiscovery
  triggerTagByTriggertagid(triggertagid: BigInt!): TriggerTag
  triggerByTriggerid(triggerid: BigInt!): Trigger
  userByUserid(userid: BigInt!): User
  usersGroupById(id: BigInt!): UsersGroup
  usrgrpByUsrgrpid(usrgrpid: BigInt!): Usrgrp
  valuemapByValuemapid(valuemapid: BigInt!): Valuemap

  """Reads a single `Acknowledge` using its globally unique `ID`."""
  acknowledge(
    """
    The globally unique `ID` to be used in selecting a single `Acknowledge`.
    """
    nodeId: ID!
  ): Acknowledge

  """Reads a single `Action` using its globally unique `ID`."""
  action(
    """The globally unique `ID` to be used in selecting a single `Action`."""
    nodeId: ID!
  ): Action

  """Reads a single `Alert` using its globally unique `ID`."""
  alert(
    """The globally unique `ID` to be used in selecting a single `Alert`."""
    nodeId: ID!
  ): Alert

  """Reads a single `ApplicationDiscovery` using its globally unique `ID`."""
  applicationDiscovery(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationDiscovery`.
    """
    nodeId: ID!
  ): ApplicationDiscovery

  """Reads a single `ApplicationPrototype` using its globally unique `ID`."""
  applicationPrototype(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationPrototype`.
    """
    nodeId: ID!
  ): ApplicationPrototype

  """Reads a single `ApplicationTemplate` using its globally unique `ID`."""
  applicationTemplate(
    """
    The globally unique `ID` to be used in selecting a single `ApplicationTemplate`.
    """
    nodeId: ID!
  ): ApplicationTemplate

  """Reads a single `Application` using its globally unique `ID`."""
  application(
    """
    The globally unique `ID` to be used in selecting a single `Application`.
    """
    nodeId: ID!
  ): Application

  """Reads a single `Auditlog` using its globally unique `ID`."""
  auditlog(
    """The globally unique `ID` to be used in selecting a single `Auditlog`."""
    nodeId: ID!
  ): Auditlog

  """Reads a single `AuditlogDetail` using its globally unique `ID`."""
  auditlogDetail(
    """
    The globally unique `ID` to be used in selecting a single `AuditlogDetail`.
    """
    nodeId: ID!
  ): AuditlogDetail

  """Reads a single `AutoregHost` using its globally unique `ID`."""
  autoregHost(
    """
    The globally unique `ID` to be used in selecting a single `AutoregHost`.
    """
    nodeId: ID!
  ): AutoregHost

  """Reads a single `Condition` using its globally unique `ID`."""
  condition(
    """
    The globally unique `ID` to be used in selecting a single `Condition`.
    """
    nodeId: ID!
  ): Condition

  """Reads a single `Config` using its globally unique `ID`."""
  config(
    """The globally unique `ID` to be used in selecting a single `Config`."""
    nodeId: ID!
  ): Config

  """Reads a single `CorrCondition` using its globally unique `ID`."""
  corrCondition(
    """
    The globally unique `ID` to be used in selecting a single `CorrCondition`.
    """
    nodeId: ID!
  ): CorrCondition

  """Reads a single `CorrConditionGroup` using its globally unique `ID`."""
  corrConditionGroup(
    """
    The globally unique `ID` to be used in selecting a single `CorrConditionGroup`.
    """
    nodeId: ID!
  ): CorrConditionGroup

  """Reads a single `CorrConditionTag` using its globally unique `ID`."""
  corrConditionTag(
    """
    The globally unique `ID` to be used in selecting a single `CorrConditionTag`.
    """
    nodeId: ID!
  ): CorrConditionTag

  """Reads a single `CorrConditionTagpair` using its globally unique `ID`."""
  corrConditionTagpair(
    """
    The globally unique `ID` to be used in selecting a single `CorrConditionTagpair`.
    """
    nodeId: ID!
  ): CorrConditionTagpair

  """
  Reads a single `CorrConditionTagvalue` using its globally unique `ID`.
  """
  corrConditionTagvalue(
    """
    The globally unique `ID` to be used in selecting a single `CorrConditionTagvalue`.
    """
    nodeId: ID!
  ): CorrConditionTagvalue

  """Reads a single `CorrOperation` using its globally unique `ID`."""
  corrOperation(
    """
    The globally unique `ID` to be used in selecting a single `CorrOperation`.
    """
    nodeId: ID!
  ): CorrOperation

  """Reads a single `Correlation` using its globally unique `ID`."""
  correlation(
    """
    The globally unique `ID` to be used in selecting a single `Correlation`.
    """
    nodeId: ID!
  ): Correlation

  """Reads a single `Dcheck` using its globally unique `ID`."""
  dcheck(
    """The globally unique `ID` to be used in selecting a single `Dcheck`."""
    nodeId: ID!
  ): Dcheck

  """Reads a single `Dhost` using its globally unique `ID`."""
  dhost(
    """The globally unique `ID` to be used in selecting a single `Dhost`."""
    nodeId: ID!
  ): Dhost

  """Reads a single `Drule` using its globally unique `ID`."""
  drule(
    """The globally unique `ID` to be used in selecting a single `Drule`."""
    nodeId: ID!
  ): Drule

  """Reads a single `Dservice` using its globally unique `ID`."""
  dservice(
    """The globally unique `ID` to be used in selecting a single `Dservice`."""
    nodeId: ID!
  ): Dservice

  """Reads a single `Escalation` using its globally unique `ID`."""
  escalation(
    """
    The globally unique `ID` to be used in selecting a single `Escalation`.
    """
    nodeId: ID!
  ): Escalation

  """Reads a single `EventRecovery` using its globally unique `ID`."""
  eventRecovery(
    """
    The globally unique `ID` to be used in selecting a single `EventRecovery`.
    """
    nodeId: ID!
  ): EventRecovery

  """Reads a single `EventTag` using its globally unique `ID`."""
  eventTag(
    """The globally unique `ID` to be used in selecting a single `EventTag`."""
    nodeId: ID!
  ): EventTag

  """Reads a single `Event` using its globally unique `ID`."""
  event(
    """The globally unique `ID` to be used in selecting a single `Event`."""
    nodeId: ID!
  ): Event

  """Reads a single `Expression` using its globally unique `ID`."""
  expression(
    """
    The globally unique `ID` to be used in selecting a single `Expression`.
    """
    nodeId: ID!
  ): Expression

  """Reads a single `Fact` using its globally unique `ID`."""
  fact(
    """The globally unique `ID` to be used in selecting a single `Fact`."""
    nodeId: ID!
  ): Fact

  """Reads a single `Function` using its globally unique `ID`."""
  function(
    """The globally unique `ID` to be used in selecting a single `Function`."""
    nodeId: ID!
  ): Function

  """Reads a single `Globalmacro` using its globally unique `ID`."""
  globalmacro(
    """
    The globally unique `ID` to be used in selecting a single `Globalmacro`.
    """
    nodeId: ID!
  ): Globalmacro

  """Reads a single `Globalvar` using its globally unique `ID`."""
  globalvar(
    """
    The globally unique `ID` to be used in selecting a single `Globalvar`.
    """
    nodeId: ID!
  ): Globalvar

  """Reads a single `GraphDiscovery` using its globally unique `ID`."""
  graphDiscovery(
    """
    The globally unique `ID` to be used in selecting a single `GraphDiscovery`.
    """
    nodeId: ID!
  ): GraphDiscovery

  """Reads a single `GraphTheme` using its globally unique `ID`."""
  graphTheme(
    """
    The globally unique `ID` to be used in selecting a single `GraphTheme`.
    """
    nodeId: ID!
  ): GraphTheme

  """Reads a single `Graph` using its globally unique `ID`."""
  graph(
    """The globally unique `ID` to be used in selecting a single `Graph`."""
    nodeId: ID!
  ): Graph

  """Reads a single `GraphsItem` using its globally unique `ID`."""
  graphsItem(
    """
    The globally unique `ID` to be used in selecting a single `GraphsItem`.
    """
    nodeId: ID!
  ): GraphsItem

  """Reads a single `GroupDiscovery` using its globally unique `ID`."""
  groupDiscovery(
    """
    The globally unique `ID` to be used in selecting a single `GroupDiscovery`.
    """
    nodeId: ID!
  ): GroupDiscovery

  """Reads a single `GroupPrototype` using its globally unique `ID`."""
  groupPrototype(
    """
    The globally unique `ID` to be used in selecting a single `GroupPrototype`.
    """
    nodeId: ID!
  ): GroupPrototype

  """Reads a single `Group` using its globally unique `ID`."""
  group(
    """The globally unique `ID` to be used in selecting a single `Group`."""
    nodeId: ID!
  ): Group

  """Reads a single `HostDiscovery` using its globally unique `ID`."""
  hostDiscovery(
    """
    The globally unique `ID` to be used in selecting a single `HostDiscovery`.
    """
    nodeId: ID!
  ): HostDiscovery

  """Reads a single `HostInventory` using its globally unique `ID`."""
  hostInventory(
    """
    The globally unique `ID` to be used in selecting a single `HostInventory`.
    """
    nodeId: ID!
  ): HostInventory

  """Reads a single `Hostmacro` using its globally unique `ID`."""
  hostmacro(
    """
    The globally unique `ID` to be used in selecting a single `Hostmacro`.
    """
    nodeId: ID!
  ): Hostmacro

  """Reads a single `Host` using its globally unique `ID`."""
  host(
    """The globally unique `ID` to be used in selecting a single `Host`."""
    nodeId: ID!
  ): Host

  """Reads a single `HostsGroup` using its globally unique `ID`."""
  hostsGroup(
    """
    The globally unique `ID` to be used in selecting a single `HostsGroup`.
    """
    nodeId: ID!
  ): HostsGroup

  """Reads a single `HostsTemplate` using its globally unique `ID`."""
  hostsTemplate(
    """
    The globally unique `ID` to be used in selecting a single `HostsTemplate`.
    """
    nodeId: ID!
  ): HostsTemplate

  """Reads a single `Housekeeper` using its globally unique `ID`."""
  housekeeper(
    """
    The globally unique `ID` to be used in selecting a single `Housekeeper`.
    """
    nodeId: ID!
  ): Housekeeper

  """Reads a single `Httpstep` using its globally unique `ID`."""
  httpstep(
    """The globally unique `ID` to be used in selecting a single `Httpstep`."""
    nodeId: ID!
  ): Httpstep

  """Reads a single `Httpstepitem` using its globally unique `ID`."""
  httpstepitem(
    """
    The globally unique `ID` to be used in selecting a single `Httpstepitem`.
    """
    nodeId: ID!
  ): Httpstepitem

  """Reads a single `Httptest` using its globally unique `ID`."""
  httptest(
    """The globally unique `ID` to be used in selecting a single `Httptest`."""
    nodeId: ID!
  ): Httptest

  """Reads a single `Httptestitem` using its globally unique `ID`."""
  httptestitem(
    """
    The globally unique `ID` to be used in selecting a single `Httptestitem`.
    """
    nodeId: ID!
  ): Httptestitem

  """Reads a single `IconMap` using its globally unique `ID`."""
  iconMap(
    """The globally unique `ID` to be used in selecting a single `IconMap`."""
    nodeId: ID!
  ): IconMap

  """Reads a single `IconMapping` using its globally unique `ID`."""
  iconMapping(
    """
    The globally unique `ID` to be used in selecting a single `IconMapping`.
    """
    nodeId: ID!
  ): IconMapping

  """Reads a single `Id` using its globally unique `ID`."""
  id(
    """The globally unique `ID` to be used in selecting a single `Id`."""
    nodeId: ID!
  ): Id

  """Reads a single `Image` using its globally unique `ID`."""
  image(
    """The globally unique `ID` to be used in selecting a single `Image`."""
    nodeId: ID!
  ): Image

  """Reads a single `Interface` using its globally unique `ID`."""
  interface(
    """
    The globally unique `ID` to be used in selecting a single `Interface`.
    """
    nodeId: ID!
  ): Interface

  """Reads a single `InterfaceDiscovery` using its globally unique `ID`."""
  interfaceDiscovery(
    """
    The globally unique `ID` to be used in selecting a single `InterfaceDiscovery`.
    """
    nodeId: ID!
  ): InterfaceDiscovery

  """
  Reads a single `ItemApplicationPrototype` using its globally unique `ID`.
  """
  itemApplicationPrototype(
    """
    The globally unique `ID` to be used in selecting a single `ItemApplicationPrototype`.
    """
    nodeId: ID!
  ): ItemApplicationPrototype

  """Reads a single `ItemConditionOrig` using its globally unique `ID`."""
  itemConditionOrig(
    """
    The globally unique `ID` to be used in selecting a single `ItemConditionOrig`.
    """
    nodeId: ID!
  ): ItemConditionOrig

  """Reads a single `ItemDiscovery` using its globally unique `ID`."""
  itemDiscovery(
    """
    The globally unique `ID` to be used in selecting a single `ItemDiscovery`.
    """
    nodeId: ID!
  ): ItemDiscovery

  """Reads a single `Item` using its globally unique `ID`."""
  item(
    """The globally unique `ID` to be used in selecting a single `Item`."""
    nodeId: ID!
  ): Item

  """Reads a single `ItemsApplication` using its globally unique `ID`."""
  itemsApplication(
    """
    The globally unique `ID` to be used in selecting a single `ItemsApplication`.
    """
    nodeId: ID!
  ): ItemsApplication

  """Reads a single `Maintenance` using its globally unique `ID`."""
  maintenance(
    """
    The globally unique `ID` to be used in selecting a single `Maintenance`.
    """
    nodeId: ID!
  ): Maintenance

  """Reads a single `MaintenancesGroup` using its globally unique `ID`."""
  maintenancesGroup(
    """
    The globally unique `ID` to be used in selecting a single `MaintenancesGroup`.
    """
    nodeId: ID!
  ): MaintenancesGroup

  """Reads a single `MaintenancesHost` using its globally unique `ID`."""
  maintenancesHost(
    """
    The globally unique `ID` to be used in selecting a single `MaintenancesHost`.
    """
    nodeId: ID!
  ): MaintenancesHost

  """Reads a single `MaintenancesWindow` using its globally unique `ID`."""
  maintenancesWindow(
    """
    The globally unique `ID` to be used in selecting a single `MaintenancesWindow`.
    """
    nodeId: ID!
  ): MaintenancesWindow

  """Reads a single `Mapping` using its globally unique `ID`."""
  mapping(
    """The globally unique `ID` to be used in selecting a single `Mapping`."""
    nodeId: ID!
  ): Mapping

  """Reads a single `Media` using its globally unique `ID`."""
  media(
    """The globally unique `ID` to be used in selecting a single `Media`."""
    nodeId: ID!
  ): Media

  """Reads a single `MediaType` using its globally unique `ID`."""
  mediaType(
    """
    The globally unique `ID` to be used in selecting a single `MediaType`.
    """
    nodeId: ID!
  ): MediaType

  """Reads a single `Opcommand` using its globally unique `ID`."""
  opcommand(
    """
    The globally unique `ID` to be used in selecting a single `Opcommand`.
    """
    nodeId: ID!
  ): Opcommand

  """Reads a single `OpcommandGrp` using its globally unique `ID`."""
  opcommandGrp(
    """
    The globally unique `ID` to be used in selecting a single `OpcommandGrp`.
    """
    nodeId: ID!
  ): OpcommandGrp

  """Reads a single `OpcommandHst` using its globally unique `ID`."""
  opcommandHst(
    """
    The globally unique `ID` to be used in selecting a single `OpcommandHst`.
    """
    nodeId: ID!
  ): OpcommandHst

  """Reads a single `Opcondition` using its globally unique `ID`."""
  opcondition(
    """
    The globally unique `ID` to be used in selecting a single `Opcondition`.
    """
    nodeId: ID!
  ): Opcondition

  """Reads a single `Operation` using its globally unique `ID`."""
  operation(
    """
    The globally unique `ID` to be used in selecting a single `Operation`.
    """
    nodeId: ID!
  ): Operation

  """Reads a single `Opgroup` using its globally unique `ID`."""
  opgroup(
    """The globally unique `ID` to be used in selecting a single `Opgroup`."""
    nodeId: ID!
  ): Opgroup

  """Reads a single `Opinventory` using its globally unique `ID`."""
  opinventory(
    """
    The globally unique `ID` to be used in selecting a single `Opinventory`.
    """
    nodeId: ID!
  ): Opinventory

  """Reads a single `Opmessage` using its globally unique `ID`."""
  opmessage(
    """
    The globally unique `ID` to be used in selecting a single `Opmessage`.
    """
    nodeId: ID!
  ): Opmessage

  """Reads a single `OpmessageGrp` using its globally unique `ID`."""
  opmessageGrp(
    """
    The globally unique `ID` to be used in selecting a single `OpmessageGrp`.
    """
    nodeId: ID!
  ): OpmessageGrp

  """Reads a single `OpmessageUsr` using its globally unique `ID`."""
  opmessageUsr(
    """
    The globally unique `ID` to be used in selecting a single `OpmessageUsr`.
    """
    nodeId: ID!
  ): OpmessageUsr

  """Reads a single `Optemplate` using its globally unique `ID`."""
  optemplate(
    """
    The globally unique `ID` to be used in selecting a single `Optemplate`.
    """
    nodeId: ID!
  ): Optemplate

  """Reads a single `Problem` using its globally unique `ID`."""
  problem(
    """The globally unique `ID` to be used in selecting a single `Problem`."""
    nodeId: ID!
  ): Problem

  """Reads a single `ProblemTag` using its globally unique `ID`."""
  problemTag(
    """
    The globally unique `ID` to be used in selecting a single `ProblemTag`.
    """
    nodeId: ID!
  ): ProblemTag

  """Reads a single `Profile` using its globally unique `ID`."""
  profile(
    """The globally unique `ID` to be used in selecting a single `Profile`."""
    nodeId: ID!
  ): Profile

  """Reads a single `ProxyAutoregHost` using its globally unique `ID`."""
  proxyAutoregHost(
    """
    The globally unique `ID` to be used in selecting a single `ProxyAutoregHost`.
    """
    nodeId: ID!
  ): ProxyAutoregHost

  """Reads a single `ProxyDhistory` using its globally unique `ID`."""
  proxyDhistory(
    """
    The globally unique `ID` to be used in selecting a single `ProxyDhistory`.
    """
    nodeId: ID!
  ): ProxyDhistory

  """Reads a single `ProxyHistory` using its globally unique `ID`."""
  proxyHistory(
    """
    The globally unique `ID` to be used in selecting a single `ProxyHistory`.
    """
    nodeId: ID!
  ): ProxyHistory

  """Reads a single `Regexp` using its globally unique `ID`."""
  regexp(
    """The globally unique `ID` to be used in selecting a single `Regexp`."""
    nodeId: ID!
  ): Regexp

  """Reads a single `Right` using its globally unique `ID`."""
  right(
    """The globally unique `ID` to be used in selecting a single `Right`."""
    nodeId: ID!
  ): Right

  """Reads a single `ScreenUser` using its globally unique `ID`."""
  screenUser(
    """
    The globally unique `ID` to be used in selecting a single `ScreenUser`.
    """
    nodeId: ID!
  ): ScreenUser

  """Reads a single `ScreenUsrgrp` using its globally unique `ID`."""
  screenUsrgrp(
    """
    The globally unique `ID` to be used in selecting a single `ScreenUsrgrp`.
    """
    nodeId: ID!
  ): ScreenUsrgrp

  """Reads a single `Screen` using its globally unique `ID`."""
  screen(
    """The globally unique `ID` to be used in selecting a single `Screen`."""
    nodeId: ID!
  ): Screen

  """Reads a single `ScreensItem` using its globally unique `ID`."""
  screensItem(
    """
    The globally unique `ID` to be used in selecting a single `ScreensItem`.
    """
    nodeId: ID!
  ): ScreensItem

  """Reads a single `Script` using its globally unique `ID`."""
  script(
    """The globally unique `ID` to be used in selecting a single `Script`."""
    nodeId: ID!
  ): Script

  """Reads a single `ServiceAlarm` using its globally unique `ID`."""
  serviceAlarm(
    """
    The globally unique `ID` to be used in selecting a single `ServiceAlarm`.
    """
    nodeId: ID!
  ): ServiceAlarm

  """Reads a single `Service` using its globally unique `ID`."""
  service(
    """The globally unique `ID` to be used in selecting a single `Service`."""
    nodeId: ID!
  ): Service

  """Reads a single `ServicesLink` using its globally unique `ID`."""
  servicesLink(
    """
    The globally unique `ID` to be used in selecting a single `ServicesLink`.
    """
    nodeId: ID!
  ): ServicesLink

  """Reads a single `ServicesTime` using its globally unique `ID`."""
  servicesTime(
    """
    The globally unique `ID` to be used in selecting a single `ServicesTime`.
    """
    nodeId: ID!
  ): ServicesTime

  """Reads a single `Session` using its globally unique `ID`."""
  session(
    """The globally unique `ID` to be used in selecting a single `Session`."""
    nodeId: ID!
  ): Session

  """Reads a single `Slide` using its globally unique `ID`."""
  slide(
    """The globally unique `ID` to be used in selecting a single `Slide`."""
    nodeId: ID!
  ): Slide

  """Reads a single `SlideshowUser` using its globally unique `ID`."""
  slideshowUser(
    """
    The globally unique `ID` to be used in selecting a single `SlideshowUser`.
    """
    nodeId: ID!
  ): SlideshowUser

  """Reads a single `SlideshowUsrgrp` using its globally unique `ID`."""
  slideshowUsrgrp(
    """
    The globally unique `ID` to be used in selecting a single `SlideshowUsrgrp`.
    """
    nodeId: ID!
  ): SlideshowUsrgrp

  """Reads a single `Slideshow` using its globally unique `ID`."""
  slideshow(
    """
    The globally unique `ID` to be used in selecting a single `Slideshow`.
    """
    nodeId: ID!
  ): Slideshow

  """Reads a single `SysmapElementUrl` using its globally unique `ID`."""
  sysmapElementUrl(
    """
    The globally unique `ID` to be used in selecting a single `SysmapElementUrl`.
    """
    nodeId: ID!
  ): SysmapElementUrl

  """Reads a single `SysmapUrl` using its globally unique `ID`."""
  sysmapUrl(
    """
    The globally unique `ID` to be used in selecting a single `SysmapUrl`.
    """
    nodeId: ID!
  ): SysmapUrl

  """Reads a single `SysmapUser` using its globally unique `ID`."""
  sysmapUser(
    """
    The globally unique `ID` to be used in selecting a single `SysmapUser`.
    """
    nodeId: ID!
  ): SysmapUser

  """Reads a single `SysmapUsrgrp` using its globally unique `ID`."""
  sysmapUsrgrp(
    """
    The globally unique `ID` to be used in selecting a single `SysmapUsrgrp`.
    """
    nodeId: ID!
  ): SysmapUsrgrp

  """Reads a single `Sysmap` using its globally unique `ID`."""
  sysmap(
    """The globally unique `ID` to be used in selecting a single `Sysmap`."""
    nodeId: ID!
  ): Sysmap

  """Reads a single `SysmapsElement` using its globally unique `ID`."""
  sysmapsElement(
    """
    The globally unique `ID` to be used in selecting a single `SysmapsElement`.
    """
    nodeId: ID!
  ): SysmapsElement

  """Reads a single `SysmapsLinkTrigger` using its globally unique `ID`."""
  sysmapsLinkTrigger(
    """
    The globally unique `ID` to be used in selecting a single `SysmapsLinkTrigger`.
    """
    nodeId: ID!
  ): SysmapsLinkTrigger

  """Reads a single `SysmapsLink` using its globally unique `ID`."""
  sysmapsLink(
    """
    The globally unique `ID` to be used in selecting a single `SysmapsLink`.
    """
    nodeId: ID!
  ): SysmapsLink

  """Reads a single `Task` using its globally unique `ID`."""
  task(
    """The globally unique `ID` to be used in selecting a single `Task`."""
    nodeId: ID!
  ): Task

  """Reads a single `TaskCloseProblem` using its globally unique `ID`."""
  taskCloseProblem(
    """
    The globally unique `ID` to be used in selecting a single `TaskCloseProblem`.
    """
    nodeId: ID!
  ): TaskCloseProblem

  """Reads a single `Timeperiod` using its globally unique `ID`."""
  timeperiod(
    """
    The globally unique `ID` to be used in selecting a single `Timeperiod`.
    """
    nodeId: ID!
  ): Timeperiod

  """Reads a single `Trend` using its globally unique `ID`."""
  trend(
    """The globally unique `ID` to be used in selecting a single `Trend`."""
    nodeId: ID!
  ): Trend

  """Reads a single `TrendsUint` using its globally unique `ID`."""
  trendsUint(
    """
    The globally unique `ID` to be used in selecting a single `TrendsUint`.
    """
    nodeId: ID!
  ): TrendsUint

  """Reads a single `TriggerDepend` using its globally unique `ID`."""
  triggerDepend(
    """
    The globally unique `ID` to be used in selecting a single `TriggerDepend`.
    """
    nodeId: ID!
  ): TriggerDepend

  """Reads a single `TriggerDiscovery` using its globally unique `ID`."""
  triggerDiscovery(
    """
    The globally unique `ID` to be used in selecting a single `TriggerDiscovery`.
    """
    nodeId: ID!
  ): TriggerDiscovery

  """Reads a single `TriggerTag` using its globally unique `ID`."""
  triggerTag(
    """
    The globally unique `ID` to be used in selecting a single `TriggerTag`.
    """
    nodeId: ID!
  ): TriggerTag

  """Reads a single `Trigger` using its globally unique `ID`."""
  trigger(
    """The globally unique `ID` to be used in selecting a single `Trigger`."""
    nodeId: ID!
  ): Trigger

  """Reads a single `User` using its globally unique `ID`."""
  user(
    """The globally unique `ID` to be used in selecting a single `User`."""
    nodeId: ID!
  ): User

  """Reads a single `UsersGroup` using its globally unique `ID`."""
  usersGroup(
    """
    The globally unique `ID` to be used in selecting a single `UsersGroup`.
    """
    nodeId: ID!
  ): UsersGroup

  """Reads a single `Usrgrp` using its globally unique `ID`."""
  usrgrp(
    """The globally unique `ID` to be used in selecting a single `Usrgrp`."""
    nodeId: ID!
  ): Usrgrp

  """Reads a single `Valuemap` using its globally unique `ID`."""
  valuemap(
    """The globally unique `ID` to be used in selecting a single `Valuemap`."""
    nodeId: ID!
  ): Valuemap
}

type Regexp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  regexpid: BigInt!
  name: String!
  testString: String!

  """Reads and enables pagination through a set of `Expression`."""
  expressionsByRegexpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Expression`."""
    orderBy: [ExpressionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ExpressionCondition
  ): ExpressionsConnection!
}

"""
A condition to be used against `Regexp` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RegexpCondition {
  """Checks for equality with the object’s `regexpid` field."""
  regexpid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `testString` field."""
  testString: String
}

"""An input for mutations affecting `Regexp`"""
input RegexpInput {
  regexpid: BigInt!
  name: String
  testString: String
}

"""
Represents an update to a `Regexp`. Fields that are set will be updated.
"""
input RegexpPatch {
  regexpid: BigInt
  name: String
  testString: String
}

"""A connection to a list of `Regexp` values."""
type RegexpsConnection {
  """A list of `Regexp` objects."""
  nodes: [Regexp]!

  """
  A list of edges which contains the `Regexp` and cursor to aid in pagination.
  """
  edges: [RegexpsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Regexp` you could get from the connection."""
  totalCount: Int
}

"""A `Regexp` edge in the connection."""
type RegexpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Regexp` at the end of the edge."""
  node: Regexp
}

"""Methods to use when ordering `Regexp`."""
enum RegexpsOrderBy {
  NATURAL
  REGEXPID_ASC
  REGEXPID_DESC
  NAME_ASC
  NAME_DESC
  TEST_STRING_ASC
  TEST_STRING_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Right implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  rightid: BigInt!
  groupid: BigInt!
  permission: Int!
  id: BigInt!

  """Reads a single `Usrgrp` that is related to this `Right`."""
  usrgrpByGroupid: Usrgrp

  """Reads a single `Group` that is related to this `Right`."""
  groupById: Group
}

"""
A condition to be used against `Right` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input RightCondition {
  """Checks for equality with the object’s `rightid` field."""
  rightid: BigInt

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt

  """Checks for equality with the object’s `permission` field."""
  permission: Int

  """Checks for equality with the object’s `id` field."""
  id: BigInt
}

"""An input for mutations affecting `Right`"""
input RightInput {
  rightid: BigInt!
  groupid: BigInt!
  permission: Int
  id: BigInt!
}

"""
Represents an update to a `Right`. Fields that are set will be updated.
"""
input RightPatch {
  rightid: BigInt
  groupid: BigInt
  permission: Int
  id: BigInt
}

"""A connection to a list of `Right` values."""
type RightsConnection {
  """A list of `Right` objects."""
  nodes: [Right]!

  """
  A list of edges which contains the `Right` and cursor to aid in pagination.
  """
  edges: [RightsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Right` you could get from the connection."""
  totalCount: Int
}

"""A `Right` edge in the connection."""
type RightsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Right` at the end of the edge."""
  node: Right
}

"""Methods to use when ordering `Right`."""
enum RightsOrderBy {
  NATURAL
  RIGHTID_ASC
  RIGHTID_DESC
  GROUPID_ASC
  GROUPID_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Screen implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  screenid: BigInt!
  name: String!
  hsize: Int!
  vsize: Int!
  templateid: BigInt
  userid: BigInt
  private: Int!

  """Reads a single `Host` that is related to this `Screen`."""
  hostByTemplateid: Host

  """Reads a single `User` that is related to this `Screen`."""
  userByUserid: User

  """Reads and enables pagination through a set of `ScreensItem`."""
  screensItemsByScreenid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreensItem`."""
    orderBy: [ScreensItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreensItemCondition
  ): ScreensItemsConnection!

  """Reads and enables pagination through a set of `ScreenUser`."""
  screenUsersByScreenid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreenUser`."""
    orderBy: [ScreenUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenUserCondition
  ): ScreenUsersConnection!

  """Reads and enables pagination through a set of `ScreenUsrgrp`."""
  screenUsrgrpsByScreenid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreenUsrgrp`."""
    orderBy: [ScreenUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenUsrgrpCondition
  ): ScreenUsrgrpsConnection!

  """Reads and enables pagination through a set of `Slide`."""
  slidesByScreenid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Slide`."""
    orderBy: [SlidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideCondition
  ): SlidesConnection!
}

"""
A condition to be used against `Screen` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ScreenCondition {
  """Checks for equality with the object’s `screenid` field."""
  screenid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `hsize` field."""
  hsize: Int

  """Checks for equality with the object’s `vsize` field."""
  vsize: Int

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `private` field."""
  private: Int
}

"""An input for mutations affecting `Screen`"""
input ScreenInput {
  screenid: BigInt!
  name: String!
  hsize: Int
  vsize: Int
  templateid: BigInt
  userid: BigInt
  private: Int
}

"""
Represents an update to a `Screen`. Fields that are set will be updated.
"""
input ScreenPatch {
  screenid: BigInt
  name: String
  hsize: Int
  vsize: Int
  templateid: BigInt
  userid: BigInt
  private: Int
}

"""A connection to a list of `Screen` values."""
type ScreensConnection {
  """A list of `Screen` objects."""
  nodes: [Screen]!

  """
  A list of edges which contains the `Screen` and cursor to aid in pagination.
  """
  edges: [ScreensEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Screen` you could get from the connection."""
  totalCount: Int
}

"""A `Screen` edge in the connection."""
type ScreensEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Screen` at the end of the edge."""
  node: Screen
}

type ScreensItem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  screenitemid: BigInt!
  screenid: BigInt!
  resourcetype: Int!
  resourceid: BigInt!
  width: Int!
  height: Int!
  x: Int!
  y: Int!
  colspan: Int!
  rowspan: Int!
  elements: Int!
  valign: Int!
  halign: Int!
  style: Int!
  url: String!
  dynamic: Int!
  sortTriggers: Int!
  application: String!
  maxColumns: Int!

  """Reads a single `Screen` that is related to this `ScreensItem`."""
  screenByScreenid: Screen
}

"""
A condition to be used against `ScreensItem` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ScreensItemCondition {
  """Checks for equality with the object’s `screenitemid` field."""
  screenitemid: BigInt

  """Checks for equality with the object’s `screenid` field."""
  screenid: BigInt

  """Checks for equality with the object’s `resourcetype` field."""
  resourcetype: Int

  """Checks for equality with the object’s `resourceid` field."""
  resourceid: BigInt

  """Checks for equality with the object’s `width` field."""
  width: Int

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `x` field."""
  x: Int

  """Checks for equality with the object’s `y` field."""
  y: Int

  """Checks for equality with the object’s `colspan` field."""
  colspan: Int

  """Checks for equality with the object’s `rowspan` field."""
  rowspan: Int

  """Checks for equality with the object’s `elements` field."""
  elements: Int

  """Checks for equality with the object’s `valign` field."""
  valign: Int

  """Checks for equality with the object’s `halign` field."""
  halign: Int

  """Checks for equality with the object’s `style` field."""
  style: Int

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `dynamic` field."""
  dynamic: Int

  """Checks for equality with the object’s `sortTriggers` field."""
  sortTriggers: Int

  """Checks for equality with the object’s `application` field."""
  application: String

  """Checks for equality with the object’s `maxColumns` field."""
  maxColumns: Int
}

"""An input for mutations affecting `ScreensItem`"""
input ScreensItemInput {
  screenitemid: BigInt!
  screenid: BigInt!
  resourcetype: Int
  resourceid: BigInt
  width: Int
  height: Int
  x: Int
  y: Int
  colspan: Int
  rowspan: Int
  elements: Int
  valign: Int
  halign: Int
  style: Int
  url: String
  dynamic: Int
  sortTriggers: Int
  application: String
  maxColumns: Int
}

"""
Represents an update to a `ScreensItem`. Fields that are set will be updated.
"""
input ScreensItemPatch {
  screenitemid: BigInt
  screenid: BigInt
  resourcetype: Int
  resourceid: BigInt
  width: Int
  height: Int
  x: Int
  y: Int
  colspan: Int
  rowspan: Int
  elements: Int
  valign: Int
  halign: Int
  style: Int
  url: String
  dynamic: Int
  sortTriggers: Int
  application: String
  maxColumns: Int
}

"""A connection to a list of `ScreensItem` values."""
type ScreensItemsConnection {
  """A list of `ScreensItem` objects."""
  nodes: [ScreensItem]!

  """
  A list of edges which contains the `ScreensItem` and cursor to aid in pagination.
  """
  edges: [ScreensItemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ScreensItem` you could get from the connection."""
  totalCount: Int
}

"""A `ScreensItem` edge in the connection."""
type ScreensItemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ScreensItem` at the end of the edge."""
  node: ScreensItem
}

"""Methods to use when ordering `ScreensItem`."""
enum ScreensItemsOrderBy {
  NATURAL
  SCREENITEMID_ASC
  SCREENITEMID_DESC
  SCREENID_ASC
  SCREENID_DESC
  RESOURCETYPE_ASC
  RESOURCETYPE_DESC
  RESOURCEID_ASC
  RESOURCEID_DESC
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  X_ASC
  X_DESC
  Y_ASC
  Y_DESC
  COLSPAN_ASC
  COLSPAN_DESC
  ROWSPAN_ASC
  ROWSPAN_DESC
  ELEMENTS_ASC
  ELEMENTS_DESC
  VALIGN_ASC
  VALIGN_DESC
  HALIGN_ASC
  HALIGN_DESC
  STYLE_ASC
  STYLE_DESC
  URL_ASC
  URL_DESC
  DYNAMIC_ASC
  DYNAMIC_DESC
  SORT_TRIGGERS_ASC
  SORT_TRIGGERS_DESC
  APPLICATION_ASC
  APPLICATION_DESC
  MAX_COLUMNS_ASC
  MAX_COLUMNS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Screen`."""
enum ScreensOrderBy {
  NATURAL
  SCREENID_ASC
  SCREENID_DESC
  NAME_ASC
  NAME_DESC
  HSIZE_ASC
  HSIZE_DESC
  VSIZE_ASC
  VSIZE_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  USERID_ASC
  USERID_DESC
  PRIVATE_ASC
  PRIVATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ScreenUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  screenuserid: BigInt!
  screenid: BigInt!
  userid: BigInt!
  permission: Int!

  """Reads a single `Screen` that is related to this `ScreenUser`."""
  screenByScreenid: Screen

  """Reads a single `User` that is related to this `ScreenUser`."""
  userByUserid: User
}

"""
A condition to be used against `ScreenUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ScreenUserCondition {
  """Checks for equality with the object’s `screenuserid` field."""
  screenuserid: BigInt

  """Checks for equality with the object’s `screenid` field."""
  screenid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `permission` field."""
  permission: Int
}

"""An input for mutations affecting `ScreenUser`"""
input ScreenUserInput {
  screenuserid: BigInt!
  screenid: BigInt!
  userid: BigInt!
  permission: Int
}

"""
Represents an update to a `ScreenUser`. Fields that are set will be updated.
"""
input ScreenUserPatch {
  screenuserid: BigInt
  screenid: BigInt
  userid: BigInt
  permission: Int
}

"""A connection to a list of `ScreenUser` values."""
type ScreenUsersConnection {
  """A list of `ScreenUser` objects."""
  nodes: [ScreenUser]!

  """
  A list of edges which contains the `ScreenUser` and cursor to aid in pagination.
  """
  edges: [ScreenUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ScreenUser` you could get from the connection."""
  totalCount: Int
}

"""A `ScreenUser` edge in the connection."""
type ScreenUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ScreenUser` at the end of the edge."""
  node: ScreenUser
}

"""Methods to use when ordering `ScreenUser`."""
enum ScreenUsersOrderBy {
  NATURAL
  SCREENUSERID_ASC
  SCREENUSERID_DESC
  SCREENID_ASC
  SCREENID_DESC
  USERID_ASC
  USERID_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ScreenUsrgrp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  screenusrgrpid: BigInt!
  screenid: BigInt!
  usrgrpid: BigInt!
  permission: Int!

  """Reads a single `Screen` that is related to this `ScreenUsrgrp`."""
  screenByScreenid: Screen

  """Reads a single `Usrgrp` that is related to this `ScreenUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp
}

"""
A condition to be used against `ScreenUsrgrp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ScreenUsrgrpCondition {
  """Checks for equality with the object’s `screenusrgrpid` field."""
  screenusrgrpid: BigInt

  """Checks for equality with the object’s `screenid` field."""
  screenid: BigInt

  """Checks for equality with the object’s `usrgrpid` field."""
  usrgrpid: BigInt

  """Checks for equality with the object’s `permission` field."""
  permission: Int
}

"""An input for mutations affecting `ScreenUsrgrp`"""
input ScreenUsrgrpInput {
  screenusrgrpid: BigInt!
  screenid: BigInt!
  usrgrpid: BigInt!
  permission: Int
}

"""
Represents an update to a `ScreenUsrgrp`. Fields that are set will be updated.
"""
input ScreenUsrgrpPatch {
  screenusrgrpid: BigInt
  screenid: BigInt
  usrgrpid: BigInt
  permission: Int
}

"""A connection to a list of `ScreenUsrgrp` values."""
type ScreenUsrgrpsConnection {
  """A list of `ScreenUsrgrp` objects."""
  nodes: [ScreenUsrgrp]!

  """
  A list of edges which contains the `ScreenUsrgrp` and cursor to aid in pagination.
  """
  edges: [ScreenUsrgrpsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ScreenUsrgrp` you could get from the connection."""
  totalCount: Int
}

"""A `ScreenUsrgrp` edge in the connection."""
type ScreenUsrgrpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ScreenUsrgrp` at the end of the edge."""
  node: ScreenUsrgrp
}

"""Methods to use when ordering `ScreenUsrgrp`."""
enum ScreenUsrgrpsOrderBy {
  NATURAL
  SCREENUSRGRPID_ASC
  SCREENUSRGRPID_DESC
  SCREENID_ASC
  SCREENID_DESC
  USRGRPID_ASC
  USRGRPID_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Script implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  scriptid: BigInt!
  name: String!
  command: String!
  hostAccess: Int!
  usrgrpid: BigInt
  groupid: BigInt
  description: String!
  confirmation: String!
  type: Int!
  executeOn: Int!

  """Reads a single `Usrgrp` that is related to this `Script`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Script`."""
  groupByGroupid: Group

  """Reads and enables pagination through a set of `Opcommand`."""
  opcommandsByScriptid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Opcommand`."""
    orderBy: [OpcommandsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpcommandCondition
  ): OpcommandsConnection!
}

"""
A condition to be used against `Script` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ScriptCondition {
  """Checks for equality with the object’s `scriptid` field."""
  scriptid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `command` field."""
  command: String

  """Checks for equality with the object’s `hostAccess` field."""
  hostAccess: Int

  """Checks for equality with the object’s `usrgrpid` field."""
  usrgrpid: BigInt

  """Checks for equality with the object’s `groupid` field."""
  groupid: BigInt

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `confirmation` field."""
  confirmation: String

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `executeOn` field."""
  executeOn: Int
}

"""An input for mutations affecting `Script`"""
input ScriptInput {
  scriptid: BigInt!
  name: String
  command: String
  hostAccess: Int
  usrgrpid: BigInt
  groupid: BigInt
  description: String
  confirmation: String
  type: Int
  executeOn: Int
}

"""
Represents an update to a `Script`. Fields that are set will be updated.
"""
input ScriptPatch {
  scriptid: BigInt
  name: String
  command: String
  hostAccess: Int
  usrgrpid: BigInt
  groupid: BigInt
  description: String
  confirmation: String
  type: Int
  executeOn: Int
}

"""A connection to a list of `Script` values."""
type ScriptsConnection {
  """A list of `Script` objects."""
  nodes: [Script]!

  """
  A list of edges which contains the `Script` and cursor to aid in pagination.
  """
  edges: [ScriptsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Script` you could get from the connection."""
  totalCount: Int
}

"""A `Script` edge in the connection."""
type ScriptsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Script` at the end of the edge."""
  node: Script
}

"""Methods to use when ordering `Script`."""
enum ScriptsOrderBy {
  NATURAL
  SCRIPTID_ASC
  SCRIPTID_DESC
  NAME_ASC
  NAME_DESC
  COMMAND_ASC
  COMMAND_DESC
  HOST_ACCESS_ASC
  HOST_ACCESS_DESC
  USRGRPID_ASC
  USRGRPID_DESC
  GROUPID_ASC
  GROUPID_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  CONFIRMATION_ASC
  CONFIRMATION_DESC
  TYPE_ASC
  TYPE_DESC
  EXECUTE_ON_ASC
  EXECUTE_ON_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Service implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  serviceid: BigInt!
  name: String!
  status: Int!
  algorithm: Int!
  triggerid: BigInt
  showsla: Int!
  goodsla: BigFloat!
  sortorder: Int!

  """Reads a single `Trigger` that is related to this `Service`."""
  triggerByTriggerid: Trigger

  """Reads and enables pagination through a set of `ServicesLink`."""
  servicesLinksByServiceupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ServicesLink`."""
    orderBy: [ServicesLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServicesLinkCondition
  ): ServicesLinksConnection!

  """Reads and enables pagination through a set of `ServicesLink`."""
  servicesLinksByServicedownid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ServicesLink`."""
    orderBy: [ServicesLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServicesLinkCondition
  ): ServicesLinksConnection!

  """Reads and enables pagination through a set of `ServicesTime`."""
  servicesTimesByServiceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ServicesTime`."""
    orderBy: [ServicesTimesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServicesTimeCondition
  ): ServicesTimesConnection!

  """Reads and enables pagination through a set of `ServiceAlarm`."""
  serviceAlarmsByServiceid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ServiceAlarm`."""
    orderBy: [ServiceAlarmsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceAlarmCondition
  ): ServiceAlarmsConnection!
}

type ServiceAlarm implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  servicealarmid: BigInt!
  serviceid: BigInt!
  clock: Int!
  value: Int!

  """Reads a single `Service` that is related to this `ServiceAlarm`."""
  serviceByServiceid: Service
}

"""
A condition to be used against `ServiceAlarm` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ServiceAlarmCondition {
  """Checks for equality with the object’s `servicealarmid` field."""
  servicealarmid: BigInt

  """Checks for equality with the object’s `serviceid` field."""
  serviceid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `value` field."""
  value: Int
}

"""An input for mutations affecting `ServiceAlarm`"""
input ServiceAlarmInput {
  servicealarmid: BigInt!
  serviceid: BigInt!
  clock: Int
  value: Int
}

"""
Represents an update to a `ServiceAlarm`. Fields that are set will be updated.
"""
input ServiceAlarmPatch {
  servicealarmid: BigInt
  serviceid: BigInt
  clock: Int
  value: Int
}

"""A connection to a list of `ServiceAlarm` values."""
type ServiceAlarmsConnection {
  """A list of `ServiceAlarm` objects."""
  nodes: [ServiceAlarm]!

  """
  A list of edges which contains the `ServiceAlarm` and cursor to aid in pagination.
  """
  edges: [ServiceAlarmsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ServiceAlarm` you could get from the connection."""
  totalCount: Int
}

"""A `ServiceAlarm` edge in the connection."""
type ServiceAlarmsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ServiceAlarm` at the end of the edge."""
  node: ServiceAlarm
}

"""Methods to use when ordering `ServiceAlarm`."""
enum ServiceAlarmsOrderBy {
  NATURAL
  SERVICEALARMID_ASC
  SERVICEALARMID_DESC
  SERVICEID_ASC
  SERVICEID_DESC
  CLOCK_ASC
  CLOCK_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Service` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input ServiceCondition {
  """Checks for equality with the object’s `serviceid` field."""
  serviceid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `algorithm` field."""
  algorithm: Int

  """Checks for equality with the object’s `triggerid` field."""
  triggerid: BigInt

  """Checks for equality with the object’s `showsla` field."""
  showsla: Int

  """Checks for equality with the object’s `goodsla` field."""
  goodsla: BigFloat

  """Checks for equality with the object’s `sortorder` field."""
  sortorder: Int
}

"""An input for mutations affecting `Service`"""
input ServiceInput {
  serviceid: BigInt!
  name: String
  status: Int
  algorithm: Int
  triggerid: BigInt
  showsla: Int
  goodsla: BigFloat
  sortorder: Int
}

"""
Represents an update to a `Service`. Fields that are set will be updated.
"""
input ServicePatch {
  serviceid: BigInt
  name: String
  status: Int
  algorithm: Int
  triggerid: BigInt
  showsla: Int
  goodsla: BigFloat
  sortorder: Int
}

"""A connection to a list of `Service` values."""
type ServicesConnection {
  """A list of `Service` objects."""
  nodes: [Service]!

  """
  A list of edges which contains the `Service` and cursor to aid in pagination.
  """
  edges: [ServicesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Service` you could get from the connection."""
  totalCount: Int
}

"""A `Service` edge in the connection."""
type ServicesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Service` at the end of the edge."""
  node: Service
}

type ServicesLink implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  linkid: BigInt!
  serviceupid: BigInt!
  servicedownid: BigInt!
  soft: Int!

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServiceupid: Service

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServicedownid: Service
}

"""
A condition to be used against `ServicesLink` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ServicesLinkCondition {
  """Checks for equality with the object’s `linkid` field."""
  linkid: BigInt

  """Checks for equality with the object’s `serviceupid` field."""
  serviceupid: BigInt

  """Checks for equality with the object’s `servicedownid` field."""
  servicedownid: BigInt

  """Checks for equality with the object’s `soft` field."""
  soft: Int
}

"""An input for mutations affecting `ServicesLink`"""
input ServicesLinkInput {
  linkid: BigInt!
  serviceupid: BigInt!
  servicedownid: BigInt!
  soft: Int
}

"""
Represents an update to a `ServicesLink`. Fields that are set will be updated.
"""
input ServicesLinkPatch {
  linkid: BigInt
  serviceupid: BigInt
  servicedownid: BigInt
  soft: Int
}

"""A connection to a list of `ServicesLink` values."""
type ServicesLinksConnection {
  """A list of `ServicesLink` objects."""
  nodes: [ServicesLink]!

  """
  A list of edges which contains the `ServicesLink` and cursor to aid in pagination.
  """
  edges: [ServicesLinksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ServicesLink` you could get from the connection."""
  totalCount: Int
}

"""A `ServicesLink` edge in the connection."""
type ServicesLinksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ServicesLink` at the end of the edge."""
  node: ServicesLink
}

"""Methods to use when ordering `ServicesLink`."""
enum ServicesLinksOrderBy {
  NATURAL
  LINKID_ASC
  LINKID_DESC
  SERVICEUPID_ASC
  SERVICEUPID_DESC
  SERVICEDOWNID_ASC
  SERVICEDOWNID_DESC
  SOFT_ASC
  SOFT_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Service`."""
enum ServicesOrderBy {
  NATURAL
  SERVICEID_ASC
  SERVICEID_DESC
  NAME_ASC
  NAME_DESC
  STATUS_ASC
  STATUS_DESC
  ALGORITHM_ASC
  ALGORITHM_DESC
  TRIGGERID_ASC
  TRIGGERID_DESC
  SHOWSLA_ASC
  SHOWSLA_DESC
  GOODSLA_ASC
  GOODSLA_DESC
  SORTORDER_ASC
  SORTORDER_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type ServicesTime implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  timeid: BigInt!
  serviceid: BigInt!
  type: Int!
  tsFrom: Int!
  tsTo: Int!
  note: String!

  """Reads a single `Service` that is related to this `ServicesTime`."""
  serviceByServiceid: Service
}

"""
A condition to be used against `ServicesTime` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ServicesTimeCondition {
  """Checks for equality with the object’s `timeid` field."""
  timeid: BigInt

  """Checks for equality with the object’s `serviceid` field."""
  serviceid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `tsFrom` field."""
  tsFrom: Int

  """Checks for equality with the object’s `tsTo` field."""
  tsTo: Int

  """Checks for equality with the object’s `note` field."""
  note: String
}

"""An input for mutations affecting `ServicesTime`"""
input ServicesTimeInput {
  timeid: BigInt!
  serviceid: BigInt!
  type: Int
  tsFrom: Int
  tsTo: Int
  note: String
}

"""
Represents an update to a `ServicesTime`. Fields that are set will be updated.
"""
input ServicesTimePatch {
  timeid: BigInt
  serviceid: BigInt
  type: Int
  tsFrom: Int
  tsTo: Int
  note: String
}

"""A connection to a list of `ServicesTime` values."""
type ServicesTimesConnection {
  """A list of `ServicesTime` objects."""
  nodes: [ServicesTime]!

  """
  A list of edges which contains the `ServicesTime` and cursor to aid in pagination.
  """
  edges: [ServicesTimesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ServicesTime` you could get from the connection."""
  totalCount: Int
}

"""A `ServicesTime` edge in the connection."""
type ServicesTimesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ServicesTime` at the end of the edge."""
  node: ServicesTime
}

"""Methods to use when ordering `ServicesTime`."""
enum ServicesTimesOrderBy {
  NATURAL
  TIMEID_ASC
  TIMEID_DESC
  SERVICEID_ASC
  SERVICEID_DESC
  TYPE_ASC
  TYPE_DESC
  TS_FROM_ASC
  TS_FROM_DESC
  TS_TO_ASC
  TS_TO_DESC
  NOTE_ASC
  NOTE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Session implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sessionid: String!
  userid: BigInt!
  lastaccess: Int!
  status: Int!

  """Reads a single `User` that is related to this `Session`."""
  userByUserid: User
}

"""
A condition to be used against `Session` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SessionCondition {
  """Checks for equality with the object’s `sessionid` field."""
  sessionid: String

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `lastaccess` field."""
  lastaccess: Int

  """Checks for equality with the object’s `status` field."""
  status: Int
}

"""An input for mutations affecting `Session`"""
input SessionInput {
  sessionid: String
  userid: BigInt!
  lastaccess: Int
  status: Int
}

"""
Represents an update to a `Session`. Fields that are set will be updated.
"""
input SessionPatch {
  sessionid: String
  userid: BigInt
  lastaccess: Int
  status: Int
}

"""A connection to a list of `Session` values."""
type SessionsConnection {
  """A list of `Session` objects."""
  nodes: [Session]!

  """
  A list of edges which contains the `Session` and cursor to aid in pagination.
  """
  edges: [SessionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Session` you could get from the connection."""
  totalCount: Int
}

"""A `Session` edge in the connection."""
type SessionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Session` at the end of the edge."""
  node: Session
}

"""Methods to use when ordering `Session`."""
enum SessionsOrderBy {
  NATURAL
  SESSIONID_ASC
  SESSIONID_DESC
  USERID_ASC
  USERID_DESC
  LASTACCESS_ASC
  LASTACCESS_DESC
  STATUS_ASC
  STATUS_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Slide implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  slideid: BigInt!
  slideshowid: BigInt!
  screenid: BigInt!
  step: Int!
  delay: Int!

  """Reads a single `Slideshow` that is related to this `Slide`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Screen` that is related to this `Slide`."""
  screenByScreenid: Screen
}

"""
A condition to be used against `Slide` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SlideCondition {
  """Checks for equality with the object’s `slideid` field."""
  slideid: BigInt

  """Checks for equality with the object’s `slideshowid` field."""
  slideshowid: BigInt

  """Checks for equality with the object’s `screenid` field."""
  screenid: BigInt

  """Checks for equality with the object’s `step` field."""
  step: Int

  """Checks for equality with the object’s `delay` field."""
  delay: Int
}

"""An input for mutations affecting `Slide`"""
input SlideInput {
  slideid: BigInt!
  slideshowid: BigInt!
  screenid: BigInt!
  step: Int
  delay: Int
}

"""
Represents an update to a `Slide`. Fields that are set will be updated.
"""
input SlidePatch {
  slideid: BigInt
  slideshowid: BigInt
  screenid: BigInt
  step: Int
  delay: Int
}

"""A connection to a list of `Slide` values."""
type SlidesConnection {
  """A list of `Slide` objects."""
  nodes: [Slide]!

  """
  A list of edges which contains the `Slide` and cursor to aid in pagination.
  """
  edges: [SlidesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Slide` you could get from the connection."""
  totalCount: Int
}

"""A `Slide` edge in the connection."""
type SlidesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Slide` at the end of the edge."""
  node: Slide
}

type Slideshow implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  slideshowid: BigInt!
  name: String!
  delay: Int!
  userid: BigInt!
  private: Int!

  """Reads a single `User` that is related to this `Slideshow`."""
  userByUserid: User

  """Reads and enables pagination through a set of `SlideshowUser`."""
  slideshowUsersBySlideshowid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SlideshowUser`."""
    orderBy: [SlideshowUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowUserCondition
  ): SlideshowUsersConnection!

  """Reads and enables pagination through a set of `SlideshowUsrgrp`."""
  slideshowUsrgrpsBySlideshowid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SlideshowUsrgrp`."""
    orderBy: [SlideshowUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowUsrgrpCondition
  ): SlideshowUsrgrpsConnection!

  """Reads and enables pagination through a set of `Slide`."""
  slidesBySlideshowid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Slide`."""
    orderBy: [SlidesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideCondition
  ): SlidesConnection!
}

"""
A condition to be used against `Slideshow` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SlideshowCondition {
  """Checks for equality with the object’s `slideshowid` field."""
  slideshowid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `delay` field."""
  delay: Int

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `private` field."""
  private: Int
}

"""An input for mutations affecting `Slideshow`"""
input SlideshowInput {
  slideshowid: BigInt!
  name: String
  delay: Int
  userid: BigInt!
  private: Int
}

"""
Represents an update to a `Slideshow`. Fields that are set will be updated.
"""
input SlideshowPatch {
  slideshowid: BigInt
  name: String
  delay: Int
  userid: BigInt
  private: Int
}

"""A connection to a list of `Slideshow` values."""
type SlideshowsConnection {
  """A list of `Slideshow` objects."""
  nodes: [Slideshow]!

  """
  A list of edges which contains the `Slideshow` and cursor to aid in pagination.
  """
  edges: [SlideshowsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Slideshow` you could get from the connection."""
  totalCount: Int
}

"""A `Slideshow` edge in the connection."""
type SlideshowsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Slideshow` at the end of the edge."""
  node: Slideshow
}

"""Methods to use when ordering `Slideshow`."""
enum SlideshowsOrderBy {
  NATURAL
  SLIDESHOWID_ASC
  SLIDESHOWID_DESC
  NAME_ASC
  NAME_DESC
  DELAY_ASC
  DELAY_DESC
  USERID_ASC
  USERID_DESC
  PRIVATE_ASC
  PRIVATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SlideshowUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  slideshowuserid: BigInt!
  slideshowid: BigInt!
  userid: BigInt!
  permission: Int!

  """Reads a single `Slideshow` that is related to this `SlideshowUser`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `User` that is related to this `SlideshowUser`."""
  userByUserid: User
}

"""
A condition to be used against `SlideshowUser` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SlideshowUserCondition {
  """Checks for equality with the object’s `slideshowuserid` field."""
  slideshowuserid: BigInt

  """Checks for equality with the object’s `slideshowid` field."""
  slideshowid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `permission` field."""
  permission: Int
}

"""An input for mutations affecting `SlideshowUser`"""
input SlideshowUserInput {
  slideshowuserid: BigInt!
  slideshowid: BigInt!
  userid: BigInt!
  permission: Int
}

"""
Represents an update to a `SlideshowUser`. Fields that are set will be updated.
"""
input SlideshowUserPatch {
  slideshowuserid: BigInt
  slideshowid: BigInt
  userid: BigInt
  permission: Int
}

"""A connection to a list of `SlideshowUser` values."""
type SlideshowUsersConnection {
  """A list of `SlideshowUser` objects."""
  nodes: [SlideshowUser]!

  """
  A list of edges which contains the `SlideshowUser` and cursor to aid in pagination.
  """
  edges: [SlideshowUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SlideshowUser` you could get from the connection."""
  totalCount: Int
}

"""A `SlideshowUser` edge in the connection."""
type SlideshowUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SlideshowUser` at the end of the edge."""
  node: SlideshowUser
}

"""Methods to use when ordering `SlideshowUser`."""
enum SlideshowUsersOrderBy {
  NATURAL
  SLIDESHOWUSERID_ASC
  SLIDESHOWUSERID_DESC
  SLIDESHOWID_ASC
  SLIDESHOWID_DESC
  USERID_ASC
  USERID_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SlideshowUsrgrp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  slideshowusrgrpid: BigInt!
  slideshowid: BigInt!
  usrgrpid: BigInt!
  permission: Int!

  """Reads a single `Slideshow` that is related to this `SlideshowUsrgrp`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Usrgrp` that is related to this `SlideshowUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp
}

"""
A condition to be used against `SlideshowUsrgrp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SlideshowUsrgrpCondition {
  """Checks for equality with the object’s `slideshowusrgrpid` field."""
  slideshowusrgrpid: BigInt

  """Checks for equality with the object’s `slideshowid` field."""
  slideshowid: BigInt

  """Checks for equality with the object’s `usrgrpid` field."""
  usrgrpid: BigInt

  """Checks for equality with the object’s `permission` field."""
  permission: Int
}

"""An input for mutations affecting `SlideshowUsrgrp`"""
input SlideshowUsrgrpInput {
  slideshowusrgrpid: BigInt!
  slideshowid: BigInt!
  usrgrpid: BigInt!
  permission: Int
}

"""
Represents an update to a `SlideshowUsrgrp`. Fields that are set will be updated.
"""
input SlideshowUsrgrpPatch {
  slideshowusrgrpid: BigInt
  slideshowid: BigInt
  usrgrpid: BigInt
  permission: Int
}

"""A connection to a list of `SlideshowUsrgrp` values."""
type SlideshowUsrgrpsConnection {
  """A list of `SlideshowUsrgrp` objects."""
  nodes: [SlideshowUsrgrp]!

  """
  A list of edges which contains the `SlideshowUsrgrp` and cursor to aid in pagination.
  """
  edges: [SlideshowUsrgrpsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SlideshowUsrgrp` you could get from the connection.
  """
  totalCount: Int
}

"""A `SlideshowUsrgrp` edge in the connection."""
type SlideshowUsrgrpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SlideshowUsrgrp` at the end of the edge."""
  node: SlideshowUsrgrp
}

"""Methods to use when ordering `SlideshowUsrgrp`."""
enum SlideshowUsrgrpsOrderBy {
  NATURAL
  SLIDESHOWUSRGRPID_ASC
  SLIDESHOWUSRGRPID_DESC
  SLIDESHOWID_ASC
  SLIDESHOWID_DESC
  USRGRPID_ASC
  USRGRPID_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Slide`."""
enum SlidesOrderBy {
  NATURAL
  SLIDEID_ASC
  SLIDEID_DESC
  SLIDESHOWID_ASC
  SLIDESHOWID_DESC
  SCREENID_ASC
  SCREENID_DESC
  STEP_ASC
  STEP_DESC
  DELAY_ASC
  DELAY_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Sysmap implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sysmapid: BigInt!
  name: String!
  width: Int!
  height: Int!
  backgroundid: BigInt
  labelType: Int!
  labelLocation: Int!
  highlight: Int!
  expandproblem: Int!
  markelements: Int!
  showUnack: Int!
  gridSize: Int!
  gridShow: Int!
  gridAlign: Int!
  labelFormat: Int!
  labelTypeHost: Int!
  labelTypeHostgroup: Int!
  labelTypeTrigger: Int!
  labelTypeMap: Int!
  labelTypeImage: Int!
  labelStringHost: String!
  labelStringHostgroup: String!
  labelStringTrigger: String!
  labelStringMap: String!
  labelStringImage: String!
  iconmapid: BigInt
  expandMacros: Int!
  severityMin: Int!
  userid: BigInt!
  private: Int!

  """Reads a single `Image` that is related to this `Sysmap`."""
  imageByBackgroundid: Image

  """Reads a single `IconMap` that is related to this `Sysmap`."""
  iconMapByIconmapid: IconMap

  """Reads a single `User` that is related to this `Sysmap`."""
  userByUserid: User

  """Reads and enables pagination through a set of `SysmapsElement`."""
  sysmapsElementsBySysmapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsElementCondition
  ): SysmapsElementsConnection!

  """Reads and enables pagination through a set of `SysmapsLink`."""
  sysmapsLinksBySysmapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsLink`."""
    orderBy: [SysmapsLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsLinkCondition
  ): SysmapsLinksConnection!

  """Reads and enables pagination through a set of `SysmapUrl`."""
  sysmapUrlsBySysmapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUrl`."""
    orderBy: [SysmapUrlsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUrlCondition
  ): SysmapUrlsConnection!

  """Reads and enables pagination through a set of `SysmapUser`."""
  sysmapUsersBySysmapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUser`."""
    orderBy: [SysmapUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUserCondition
  ): SysmapUsersConnection!

  """Reads and enables pagination through a set of `SysmapUsrgrp`."""
  sysmapUsrgrpsBySysmapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUsrgrp`."""
    orderBy: [SysmapUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUsrgrpCondition
  ): SysmapUsrgrpsConnection!
}

"""
A condition to be used against `Sysmap` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input SysmapCondition {
  """Checks for equality with the object’s `sysmapid` field."""
  sysmapid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `width` field."""
  width: Int

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `backgroundid` field."""
  backgroundid: BigInt

  """Checks for equality with the object’s `labelType` field."""
  labelType: Int

  """Checks for equality with the object’s `labelLocation` field."""
  labelLocation: Int

  """Checks for equality with the object’s `highlight` field."""
  highlight: Int

  """Checks for equality with the object’s `expandproblem` field."""
  expandproblem: Int

  """Checks for equality with the object’s `markelements` field."""
  markelements: Int

  """Checks for equality with the object’s `showUnack` field."""
  showUnack: Int

  """Checks for equality with the object’s `gridSize` field."""
  gridSize: Int

  """Checks for equality with the object’s `gridShow` field."""
  gridShow: Int

  """Checks for equality with the object’s `gridAlign` field."""
  gridAlign: Int

  """Checks for equality with the object’s `labelFormat` field."""
  labelFormat: Int

  """Checks for equality with the object’s `labelTypeHost` field."""
  labelTypeHost: Int

  """Checks for equality with the object’s `labelTypeHostgroup` field."""
  labelTypeHostgroup: Int

  """Checks for equality with the object’s `labelTypeTrigger` field."""
  labelTypeTrigger: Int

  """Checks for equality with the object’s `labelTypeMap` field."""
  labelTypeMap: Int

  """Checks for equality with the object’s `labelTypeImage` field."""
  labelTypeImage: Int

  """Checks for equality with the object’s `labelStringHost` field."""
  labelStringHost: String

  """Checks for equality with the object’s `labelStringHostgroup` field."""
  labelStringHostgroup: String

  """Checks for equality with the object’s `labelStringTrigger` field."""
  labelStringTrigger: String

  """Checks for equality with the object’s `labelStringMap` field."""
  labelStringMap: String

  """Checks for equality with the object’s `labelStringImage` field."""
  labelStringImage: String

  """Checks for equality with the object’s `iconmapid` field."""
  iconmapid: BigInt

  """Checks for equality with the object’s `expandMacros` field."""
  expandMacros: Int

  """Checks for equality with the object’s `severityMin` field."""
  severityMin: Int

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `private` field."""
  private: Int
}

type SysmapElementUrl implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sysmapelementurlid: BigInt!
  selementid: BigInt!
  name: String!
  url: String!

  """
  Reads a single `SysmapsElement` that is related to this `SysmapElementUrl`.
  """
  sysmapsElementBySelementid: SysmapsElement
}

"""
A condition to be used against `SysmapElementUrl` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SysmapElementUrlCondition {
  """Checks for equality with the object’s `sysmapelementurlid` field."""
  sysmapelementurlid: BigInt

  """Checks for equality with the object’s `selementid` field."""
  selementid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `url` field."""
  url: String
}

"""An input for mutations affecting `SysmapElementUrl`"""
input SysmapElementUrlInput {
  sysmapelementurlid: BigInt!
  selementid: BigInt!
  name: String!
  url: String
}

"""
Represents an update to a `SysmapElementUrl`. Fields that are set will be updated.
"""
input SysmapElementUrlPatch {
  sysmapelementurlid: BigInt
  selementid: BigInt
  name: String
  url: String
}

"""A connection to a list of `SysmapElementUrl` values."""
type SysmapElementUrlsConnection {
  """A list of `SysmapElementUrl` objects."""
  nodes: [SysmapElementUrl]!

  """
  A list of edges which contains the `SysmapElementUrl` and cursor to aid in pagination.
  """
  edges: [SysmapElementUrlsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SysmapElementUrl` you could get from the connection.
  """
  totalCount: Int
}

"""A `SysmapElementUrl` edge in the connection."""
type SysmapElementUrlsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SysmapElementUrl` at the end of the edge."""
  node: SysmapElementUrl
}

"""Methods to use when ordering `SysmapElementUrl`."""
enum SysmapElementUrlsOrderBy {
  NATURAL
  SYSMAPELEMENTURLID_ASC
  SYSMAPELEMENTURLID_DESC
  SELEMENTID_ASC
  SELEMENTID_DESC
  NAME_ASC
  NAME_DESC
  URL_ASC
  URL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""An input for mutations affecting `Sysmap`"""
input SysmapInput {
  sysmapid: BigInt!
  name: String
  width: Int
  height: Int
  backgroundid: BigInt
  labelType: Int
  labelLocation: Int
  highlight: Int
  expandproblem: Int
  markelements: Int
  showUnack: Int
  gridSize: Int
  gridShow: Int
  gridAlign: Int
  labelFormat: Int
  labelTypeHost: Int
  labelTypeHostgroup: Int
  labelTypeTrigger: Int
  labelTypeMap: Int
  labelTypeImage: Int
  labelStringHost: String
  labelStringHostgroup: String
  labelStringTrigger: String
  labelStringMap: String
  labelStringImage: String
  iconmapid: BigInt
  expandMacros: Int
  severityMin: Int
  userid: BigInt!
  private: Int
}

"""
Represents an update to a `Sysmap`. Fields that are set will be updated.
"""
input SysmapPatch {
  sysmapid: BigInt
  name: String
  width: Int
  height: Int
  backgroundid: BigInt
  labelType: Int
  labelLocation: Int
  highlight: Int
  expandproblem: Int
  markelements: Int
  showUnack: Int
  gridSize: Int
  gridShow: Int
  gridAlign: Int
  labelFormat: Int
  labelTypeHost: Int
  labelTypeHostgroup: Int
  labelTypeTrigger: Int
  labelTypeMap: Int
  labelTypeImage: Int
  labelStringHost: String
  labelStringHostgroup: String
  labelStringTrigger: String
  labelStringMap: String
  labelStringImage: String
  iconmapid: BigInt
  expandMacros: Int
  severityMin: Int
  userid: BigInt
  private: Int
}

"""A connection to a list of `Sysmap` values."""
type SysmapsConnection {
  """A list of `Sysmap` objects."""
  nodes: [Sysmap]!

  """
  A list of edges which contains the `Sysmap` and cursor to aid in pagination.
  """
  edges: [SysmapsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Sysmap` you could get from the connection."""
  totalCount: Int
}

"""A `Sysmap` edge in the connection."""
type SysmapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Sysmap` at the end of the edge."""
  node: Sysmap
}

type SysmapsElement implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  selementid: BigInt!
  sysmapid: BigInt!
  elementid: BigInt!
  elementtype: Int!
  iconidOff: BigInt
  iconidOn: BigInt
  label: String!
  labelLocation: Int!
  x: Int!
  y: Int!
  iconidDisabled: BigInt
  iconidMaintenance: BigInt
  elementsubtype: Int!
  areatype: Int!
  width: Int!
  height: Int!
  viewtype: Int!
  useIconmap: Int!
  application: String!

  """Reads a single `Sysmap` that is related to this `SysmapsElement`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOff: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOn: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidDisabled: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidMaintenance: Image

  """Reads and enables pagination through a set of `SysmapsLink`."""
  sysmapsLinksBySelementid1(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsLink`."""
    orderBy: [SysmapsLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsLinkCondition
  ): SysmapsLinksConnection!

  """Reads and enables pagination through a set of `SysmapsLink`."""
  sysmapsLinksBySelementid2(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsLink`."""
    orderBy: [SysmapsLinksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsLinkCondition
  ): SysmapsLinksConnection!

  """Reads and enables pagination through a set of `SysmapElementUrl`."""
  sysmapElementUrlsBySelementid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapElementUrl`."""
    orderBy: [SysmapElementUrlsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapElementUrlCondition
  ): SysmapElementUrlsConnection!
}

"""
A condition to be used against `SysmapsElement` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SysmapsElementCondition {
  """Checks for equality with the object’s `selementid` field."""
  selementid: BigInt

  """Checks for equality with the object’s `sysmapid` field."""
  sysmapid: BigInt

  """Checks for equality with the object’s `elementid` field."""
  elementid: BigInt

  """Checks for equality with the object’s `elementtype` field."""
  elementtype: Int

  """Checks for equality with the object’s `iconidOff` field."""
  iconidOff: BigInt

  """Checks for equality with the object’s `iconidOn` field."""
  iconidOn: BigInt

  """Checks for equality with the object’s `label` field."""
  label: String

  """Checks for equality with the object’s `labelLocation` field."""
  labelLocation: Int

  """Checks for equality with the object’s `x` field."""
  x: Int

  """Checks for equality with the object’s `y` field."""
  y: Int

  """Checks for equality with the object’s `iconidDisabled` field."""
  iconidDisabled: BigInt

  """Checks for equality with the object’s `iconidMaintenance` field."""
  iconidMaintenance: BigInt

  """Checks for equality with the object’s `elementsubtype` field."""
  elementsubtype: Int

  """Checks for equality with the object’s `areatype` field."""
  areatype: Int

  """Checks for equality with the object’s `width` field."""
  width: Int

  """Checks for equality with the object’s `height` field."""
  height: Int

  """Checks for equality with the object’s `viewtype` field."""
  viewtype: Int

  """Checks for equality with the object’s `useIconmap` field."""
  useIconmap: Int

  """Checks for equality with the object’s `application` field."""
  application: String
}

"""An input for mutations affecting `SysmapsElement`"""
input SysmapsElementInput {
  selementid: BigInt!
  sysmapid: BigInt!
  elementid: BigInt
  elementtype: Int
  iconidOff: BigInt
  iconidOn: BigInt
  label: String
  labelLocation: Int
  x: Int
  y: Int
  iconidDisabled: BigInt
  iconidMaintenance: BigInt
  elementsubtype: Int
  areatype: Int
  width: Int
  height: Int
  viewtype: Int
  useIconmap: Int
  application: String
}

"""
Represents an update to a `SysmapsElement`. Fields that are set will be updated.
"""
input SysmapsElementPatch {
  selementid: BigInt
  sysmapid: BigInt
  elementid: BigInt
  elementtype: Int
  iconidOff: BigInt
  iconidOn: BigInt
  label: String
  labelLocation: Int
  x: Int
  y: Int
  iconidDisabled: BigInt
  iconidMaintenance: BigInt
  elementsubtype: Int
  areatype: Int
  width: Int
  height: Int
  viewtype: Int
  useIconmap: Int
  application: String
}

"""A connection to a list of `SysmapsElement` values."""
type SysmapsElementsConnection {
  """A list of `SysmapsElement` objects."""
  nodes: [SysmapsElement]!

  """
  A list of edges which contains the `SysmapsElement` and cursor to aid in pagination.
  """
  edges: [SysmapsElementsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SysmapsElement` you could get from the connection.
  """
  totalCount: Int
}

"""A `SysmapsElement` edge in the connection."""
type SysmapsElementsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SysmapsElement` at the end of the edge."""
  node: SysmapsElement
}

"""Methods to use when ordering `SysmapsElement`."""
enum SysmapsElementsOrderBy {
  NATURAL
  SELEMENTID_ASC
  SELEMENTID_DESC
  SYSMAPID_ASC
  SYSMAPID_DESC
  ELEMENTID_ASC
  ELEMENTID_DESC
  ELEMENTTYPE_ASC
  ELEMENTTYPE_DESC
  ICONID_OFF_ASC
  ICONID_OFF_DESC
  ICONID_ON_ASC
  ICONID_ON_DESC
  LABEL_ASC
  LABEL_DESC
  LABEL_LOCATION_ASC
  LABEL_LOCATION_DESC
  X_ASC
  X_DESC
  Y_ASC
  Y_DESC
  ICONID_DISABLED_ASC
  ICONID_DISABLED_DESC
  ICONID_MAINTENANCE_ASC
  ICONID_MAINTENANCE_DESC
  ELEMENTSUBTYPE_ASC
  ELEMENTSUBTYPE_DESC
  AREATYPE_ASC
  AREATYPE_DESC
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  VIEWTYPE_ASC
  VIEWTYPE_DESC
  USE_ICONMAP_ASC
  USE_ICONMAP_DESC
  APPLICATION_ASC
  APPLICATION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SysmapsLink implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  linkid: BigInt!
  sysmapid: BigInt!
  selementid1: BigInt!
  selementid2: BigInt!
  drawtype: Int!
  color: String!
  label: String!

  """Reads a single `Sysmap` that is related to this `SysmapsLink`."""
  sysmapBySysmapid: Sysmap

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid1: SysmapsElement

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid2: SysmapsElement

  """Reads and enables pagination through a set of `SysmapsLinkTrigger`."""
  sysmapsLinkTriggersByLinkid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsLinkTrigger`."""
    orderBy: [SysmapsLinkTriggersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsLinkTriggerCondition
  ): SysmapsLinkTriggersConnection!
}

"""
A condition to be used against `SysmapsLink` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SysmapsLinkCondition {
  """Checks for equality with the object’s `linkid` field."""
  linkid: BigInt

  """Checks for equality with the object’s `sysmapid` field."""
  sysmapid: BigInt

  """Checks for equality with the object’s `selementid1` field."""
  selementid1: BigInt

  """Checks for equality with the object’s `selementid2` field."""
  selementid2: BigInt

  """Checks for equality with the object’s `drawtype` field."""
  drawtype: Int

  """Checks for equality with the object’s `color` field."""
  color: String

  """Checks for equality with the object’s `label` field."""
  label: String
}

"""An input for mutations affecting `SysmapsLink`"""
input SysmapsLinkInput {
  linkid: BigInt!
  sysmapid: BigInt!
  selementid1: BigInt!
  selementid2: BigInt!
  drawtype: Int
  color: String
  label: String
}

"""
Represents an update to a `SysmapsLink`. Fields that are set will be updated.
"""
input SysmapsLinkPatch {
  linkid: BigInt
  sysmapid: BigInt
  selementid1: BigInt
  selementid2: BigInt
  drawtype: Int
  color: String
  label: String
}

"""A connection to a list of `SysmapsLink` values."""
type SysmapsLinksConnection {
  """A list of `SysmapsLink` objects."""
  nodes: [SysmapsLink]!

  """
  A list of edges which contains the `SysmapsLink` and cursor to aid in pagination.
  """
  edges: [SysmapsLinksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SysmapsLink` you could get from the connection."""
  totalCount: Int
}

"""A `SysmapsLink` edge in the connection."""
type SysmapsLinksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SysmapsLink` at the end of the edge."""
  node: SysmapsLink
}

"""Methods to use when ordering `SysmapsLink`."""
enum SysmapsLinksOrderBy {
  NATURAL
  LINKID_ASC
  LINKID_DESC
  SYSMAPID_ASC
  SYSMAPID_DESC
  SELEMENTID1_ASC
  SELEMENTID1_DESC
  SELEMENTID2_ASC
  SELEMENTID2_DESC
  DRAWTYPE_ASC
  DRAWTYPE_DESC
  COLOR_ASC
  COLOR_DESC
  LABEL_ASC
  LABEL_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SysmapsLinkTrigger implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  linktriggerid: BigInt!
  linkid: BigInt!
  triggerid: BigInt!
  drawtype: Int!
  color: String!

  """
  Reads a single `SysmapsLink` that is related to this `SysmapsLinkTrigger`.
  """
  sysmapsLinkByLinkid: SysmapsLink

  """
  Reads a single `Trigger` that is related to this `SysmapsLinkTrigger`.
  """
  triggerByTriggerid: Trigger
}

"""
A condition to be used against `SysmapsLinkTrigger` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SysmapsLinkTriggerCondition {
  """Checks for equality with the object’s `linktriggerid` field."""
  linktriggerid: BigInt

  """Checks for equality with the object’s `linkid` field."""
  linkid: BigInt

  """Checks for equality with the object’s `triggerid` field."""
  triggerid: BigInt

  """Checks for equality with the object’s `drawtype` field."""
  drawtype: Int

  """Checks for equality with the object’s `color` field."""
  color: String
}

"""An input for mutations affecting `SysmapsLinkTrigger`"""
input SysmapsLinkTriggerInput {
  linktriggerid: BigInt!
  linkid: BigInt!
  triggerid: BigInt!
  drawtype: Int
  color: String
}

"""
Represents an update to a `SysmapsLinkTrigger`. Fields that are set will be updated.
"""
input SysmapsLinkTriggerPatch {
  linktriggerid: BigInt
  linkid: BigInt
  triggerid: BigInt
  drawtype: Int
  color: String
}

"""A connection to a list of `SysmapsLinkTrigger` values."""
type SysmapsLinkTriggersConnection {
  """A list of `SysmapsLinkTrigger` objects."""
  nodes: [SysmapsLinkTrigger]!

  """
  A list of edges which contains the `SysmapsLinkTrigger` and cursor to aid in pagination.
  """
  edges: [SysmapsLinkTriggersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `SysmapsLinkTrigger` you could get from the connection.
  """
  totalCount: Int
}

"""A `SysmapsLinkTrigger` edge in the connection."""
type SysmapsLinkTriggersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SysmapsLinkTrigger` at the end of the edge."""
  node: SysmapsLinkTrigger
}

"""Methods to use when ordering `SysmapsLinkTrigger`."""
enum SysmapsLinkTriggersOrderBy {
  NATURAL
  LINKTRIGGERID_ASC
  LINKTRIGGERID_DESC
  LINKID_ASC
  LINKID_DESC
  TRIGGERID_ASC
  TRIGGERID_DESC
  DRAWTYPE_ASC
  DRAWTYPE_DESC
  COLOR_ASC
  COLOR_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `Sysmap`."""
enum SysmapsOrderBy {
  NATURAL
  SYSMAPID_ASC
  SYSMAPID_DESC
  NAME_ASC
  NAME_DESC
  WIDTH_ASC
  WIDTH_DESC
  HEIGHT_ASC
  HEIGHT_DESC
  BACKGROUNDID_ASC
  BACKGROUNDID_DESC
  LABEL_TYPE_ASC
  LABEL_TYPE_DESC
  LABEL_LOCATION_ASC
  LABEL_LOCATION_DESC
  HIGHLIGHT_ASC
  HIGHLIGHT_DESC
  EXPANDPROBLEM_ASC
  EXPANDPROBLEM_DESC
  MARKELEMENTS_ASC
  MARKELEMENTS_DESC
  SHOW_UNACK_ASC
  SHOW_UNACK_DESC
  GRID_SIZE_ASC
  GRID_SIZE_DESC
  GRID_SHOW_ASC
  GRID_SHOW_DESC
  GRID_ALIGN_ASC
  GRID_ALIGN_DESC
  LABEL_FORMAT_ASC
  LABEL_FORMAT_DESC
  LABEL_TYPE_HOST_ASC
  LABEL_TYPE_HOST_DESC
  LABEL_TYPE_HOSTGROUP_ASC
  LABEL_TYPE_HOSTGROUP_DESC
  LABEL_TYPE_TRIGGER_ASC
  LABEL_TYPE_TRIGGER_DESC
  LABEL_TYPE_MAP_ASC
  LABEL_TYPE_MAP_DESC
  LABEL_TYPE_IMAGE_ASC
  LABEL_TYPE_IMAGE_DESC
  LABEL_STRING_HOST_ASC
  LABEL_STRING_HOST_DESC
  LABEL_STRING_HOSTGROUP_ASC
  LABEL_STRING_HOSTGROUP_DESC
  LABEL_STRING_TRIGGER_ASC
  LABEL_STRING_TRIGGER_DESC
  LABEL_STRING_MAP_ASC
  LABEL_STRING_MAP_DESC
  LABEL_STRING_IMAGE_ASC
  LABEL_STRING_IMAGE_DESC
  ICONMAPID_ASC
  ICONMAPID_DESC
  EXPAND_MACROS_ASC
  EXPAND_MACROS_DESC
  SEVERITY_MIN_ASC
  SEVERITY_MIN_DESC
  USERID_ASC
  USERID_DESC
  PRIVATE_ASC
  PRIVATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SysmapUrl implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sysmapurlid: BigInt!
  sysmapid: BigInt!
  name: String!
  url: String!
  elementtype: Int!

  """Reads a single `Sysmap` that is related to this `SysmapUrl`."""
  sysmapBySysmapid: Sysmap
}

"""
A condition to be used against `SysmapUrl` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SysmapUrlCondition {
  """Checks for equality with the object’s `sysmapurlid` field."""
  sysmapurlid: BigInt

  """Checks for equality with the object’s `sysmapid` field."""
  sysmapid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `elementtype` field."""
  elementtype: Int
}

"""An input for mutations affecting `SysmapUrl`"""
input SysmapUrlInput {
  sysmapurlid: BigInt!
  sysmapid: BigInt!
  name: String!
  url: String
  elementtype: Int
}

"""
Represents an update to a `SysmapUrl`. Fields that are set will be updated.
"""
input SysmapUrlPatch {
  sysmapurlid: BigInt
  sysmapid: BigInt
  name: String
  url: String
  elementtype: Int
}

"""A connection to a list of `SysmapUrl` values."""
type SysmapUrlsConnection {
  """A list of `SysmapUrl` objects."""
  nodes: [SysmapUrl]!

  """
  A list of edges which contains the `SysmapUrl` and cursor to aid in pagination.
  """
  edges: [SysmapUrlsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SysmapUrl` you could get from the connection."""
  totalCount: Int
}

"""A `SysmapUrl` edge in the connection."""
type SysmapUrlsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SysmapUrl` at the end of the edge."""
  node: SysmapUrl
}

"""Methods to use when ordering `SysmapUrl`."""
enum SysmapUrlsOrderBy {
  NATURAL
  SYSMAPURLID_ASC
  SYSMAPURLID_DESC
  SYSMAPID_ASC
  SYSMAPID_DESC
  NAME_ASC
  NAME_DESC
  URL_ASC
  URL_DESC
  ELEMENTTYPE_ASC
  ELEMENTTYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SysmapUser implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sysmapuserid: BigInt!
  sysmapid: BigInt!
  userid: BigInt!
  permission: Int!

  """Reads a single `Sysmap` that is related to this `SysmapUser`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `User` that is related to this `SysmapUser`."""
  userByUserid: User
}

"""
A condition to be used against `SysmapUser` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input SysmapUserCondition {
  """Checks for equality with the object’s `sysmapuserid` field."""
  sysmapuserid: BigInt

  """Checks for equality with the object’s `sysmapid` field."""
  sysmapid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `permission` field."""
  permission: Int
}

"""An input for mutations affecting `SysmapUser`"""
input SysmapUserInput {
  sysmapuserid: BigInt!
  sysmapid: BigInt!
  userid: BigInt!
  permission: Int
}

"""
Represents an update to a `SysmapUser`. Fields that are set will be updated.
"""
input SysmapUserPatch {
  sysmapuserid: BigInt
  sysmapid: BigInt
  userid: BigInt
  permission: Int
}

"""A connection to a list of `SysmapUser` values."""
type SysmapUsersConnection {
  """A list of `SysmapUser` objects."""
  nodes: [SysmapUser]!

  """
  A list of edges which contains the `SysmapUser` and cursor to aid in pagination.
  """
  edges: [SysmapUsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SysmapUser` you could get from the connection."""
  totalCount: Int
}

"""A `SysmapUser` edge in the connection."""
type SysmapUsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SysmapUser` at the end of the edge."""
  node: SysmapUser
}

"""Methods to use when ordering `SysmapUser`."""
enum SysmapUsersOrderBy {
  NATURAL
  SYSMAPUSERID_ASC
  SYSMAPUSERID_DESC
  SYSMAPID_ASC
  SYSMAPID_DESC
  USERID_ASC
  USERID_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type SysmapUsrgrp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  sysmapusrgrpid: BigInt!
  sysmapid: BigInt!
  usrgrpid: BigInt!
  permission: Int!

  """Reads a single `Sysmap` that is related to this `SysmapUsrgrp`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Usrgrp` that is related to this `SysmapUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp
}

"""
A condition to be used against `SysmapUsrgrp` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input SysmapUsrgrpCondition {
  """Checks for equality with the object’s `sysmapusrgrpid` field."""
  sysmapusrgrpid: BigInt

  """Checks for equality with the object’s `sysmapid` field."""
  sysmapid: BigInt

  """Checks for equality with the object’s `usrgrpid` field."""
  usrgrpid: BigInt

  """Checks for equality with the object’s `permission` field."""
  permission: Int
}

"""An input for mutations affecting `SysmapUsrgrp`"""
input SysmapUsrgrpInput {
  sysmapusrgrpid: BigInt!
  sysmapid: BigInt!
  usrgrpid: BigInt!
  permission: Int
}

"""
Represents an update to a `SysmapUsrgrp`. Fields that are set will be updated.
"""
input SysmapUsrgrpPatch {
  sysmapusrgrpid: BigInt
  sysmapid: BigInt
  usrgrpid: BigInt
  permission: Int
}

"""A connection to a list of `SysmapUsrgrp` values."""
type SysmapUsrgrpsConnection {
  """A list of `SysmapUsrgrp` objects."""
  nodes: [SysmapUsrgrp]!

  """
  A list of edges which contains the `SysmapUsrgrp` and cursor to aid in pagination.
  """
  edges: [SysmapUsrgrpsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `SysmapUsrgrp` you could get from the connection."""
  totalCount: Int
}

"""A `SysmapUsrgrp` edge in the connection."""
type SysmapUsrgrpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `SysmapUsrgrp` at the end of the edge."""
  node: SysmapUsrgrp
}

"""Methods to use when ordering `SysmapUsrgrp`."""
enum SysmapUsrgrpsOrderBy {
  NATURAL
  SYSMAPUSRGRPID_ASC
  SYSMAPUSRGRPID_DESC
  SYSMAPID_ASC
  SYSMAPID_DESC
  USRGRPID_ASC
  USRGRPID_DESC
  PERMISSION_ASC
  PERMISSION_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Task implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  taskid: BigInt!
  type: Int!

  """Reads a single `TaskCloseProblem` that is related to this `Task`."""
  taskCloseProblemByTaskid: TaskCloseProblem

  """Reads and enables pagination through a set of `TaskCloseProblem`."""
  taskCloseProblemsByTaskid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TaskCloseProblem`."""
    orderBy: [TaskCloseProblemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TaskCloseProblemCondition
  ): TaskCloseProblemsConnection! @deprecated(reason: "Please use taskCloseProblemByTaskid instead")
}

type TaskCloseProblem implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  taskid: BigInt!
  acknowledgeid: BigInt!

  """Reads a single `Task` that is related to this `TaskCloseProblem`."""
  taskByTaskid: Task
}

"""
A condition to be used against `TaskCloseProblem` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TaskCloseProblemCondition {
  """Checks for equality with the object’s `taskid` field."""
  taskid: BigInt

  """Checks for equality with the object’s `acknowledgeid` field."""
  acknowledgeid: BigInt
}

"""An input for mutations affecting `TaskCloseProblem`"""
input TaskCloseProblemInput {
  taskid: BigInt!
  acknowledgeid: BigInt!
}

"""
Represents an update to a `TaskCloseProblem`. Fields that are set will be updated.
"""
input TaskCloseProblemPatch {
  taskid: BigInt
  acknowledgeid: BigInt
}

"""A connection to a list of `TaskCloseProblem` values."""
type TaskCloseProblemsConnection {
  """A list of `TaskCloseProblem` objects."""
  nodes: [TaskCloseProblem]!

  """
  A list of edges which contains the `TaskCloseProblem` and cursor to aid in pagination.
  """
  edges: [TaskCloseProblemsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TaskCloseProblem` you could get from the connection.
  """
  totalCount: Int
}

"""A `TaskCloseProblem` edge in the connection."""
type TaskCloseProblemsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TaskCloseProblem` at the end of the edge."""
  node: TaskCloseProblem
}

"""Methods to use when ordering `TaskCloseProblem`."""
enum TaskCloseProblemsOrderBy {
  NATURAL
  TASKID_ASC
  TASKID_DESC
  ACKNOWLEDGEID_ASC
  ACKNOWLEDGEID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
A condition to be used against `Task` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TaskCondition {
  """Checks for equality with the object’s `taskid` field."""
  taskid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int
}

"""An input for mutations affecting `Task`"""
input TaskInput {
  taskid: BigInt!
  type: Int!
}

"""
Represents an update to a `Task`. Fields that are set will be updated.
"""
input TaskPatch {
  taskid: BigInt
  type: Int
}

"""A connection to a list of `Task` values."""
type TasksConnection {
  """A list of `Task` objects."""
  nodes: [Task]!

  """
  A list of edges which contains the `Task` and cursor to aid in pagination.
  """
  edges: [TasksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Task` you could get from the connection."""
  totalCount: Int
}

"""A `Task` edge in the connection."""
type TasksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Task` at the end of the edge."""
  node: Task
}

"""Methods to use when ordering `Task`."""
enum TasksOrderBy {
  NATURAL
  TASKID_ASC
  TASKID_DESC
  TYPE_ASC
  TYPE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Timeperiod implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  timeperiodid: BigInt!
  timeperiodType: Int!
  every: Int!
  month: Int!
  dayofweek: Int!
  day: Int!
  startTime: Int!
  period: Int!
  startDate: Int!

  """Reads and enables pagination through a set of `MaintenancesWindow`."""
  maintenancesWindowsByTimeperiodid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MaintenancesWindow`."""
    orderBy: [MaintenancesWindowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MaintenancesWindowCondition
  ): MaintenancesWindowsConnection!
}

"""
A condition to be used against `Timeperiod` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TimeperiodCondition {
  """Checks for equality with the object’s `timeperiodid` field."""
  timeperiodid: BigInt

  """Checks for equality with the object’s `timeperiodType` field."""
  timeperiodType: Int

  """Checks for equality with the object’s `every` field."""
  every: Int

  """Checks for equality with the object’s `month` field."""
  month: Int

  """Checks for equality with the object’s `dayofweek` field."""
  dayofweek: Int

  """Checks for equality with the object’s `day` field."""
  day: Int

  """Checks for equality with the object’s `startTime` field."""
  startTime: Int

  """Checks for equality with the object’s `period` field."""
  period: Int

  """Checks for equality with the object’s `startDate` field."""
  startDate: Int
}

"""An input for mutations affecting `Timeperiod`"""
input TimeperiodInput {
  timeperiodid: BigInt!
  timeperiodType: Int
  every: Int
  month: Int
  dayofweek: Int
  day: Int
  startTime: Int
  period: Int
  startDate: Int
}

"""
Represents an update to a `Timeperiod`. Fields that are set will be updated.
"""
input TimeperiodPatch {
  timeperiodid: BigInt
  timeperiodType: Int
  every: Int
  month: Int
  dayofweek: Int
  day: Int
  startTime: Int
  period: Int
  startDate: Int
}

"""A connection to a list of `Timeperiod` values."""
type TimeperiodsConnection {
  """A list of `Timeperiod` objects."""
  nodes: [Timeperiod]!

  """
  A list of edges which contains the `Timeperiod` and cursor to aid in pagination.
  """
  edges: [TimeperiodsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Timeperiod` you could get from the connection."""
  totalCount: Int
}

"""A `Timeperiod` edge in the connection."""
type TimeperiodsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Timeperiod` at the end of the edge."""
  node: Timeperiod
}

"""Methods to use when ordering `Timeperiod`."""
enum TimeperiodsOrderBy {
  NATURAL
  TIMEPERIODID_ASC
  TIMEPERIODID_DESC
  TIMEPERIOD_TYPE_ASC
  TIMEPERIOD_TYPE_DESC
  EVERY_ASC
  EVERY_DESC
  MONTH_ASC
  MONTH_DESC
  DAYOFWEEK_ASC
  DAYOFWEEK_DESC
  DAY_ASC
  DAY_DESC
  START_TIME_ASC
  START_TIME_DESC
  PERIOD_ASC
  PERIOD_DESC
  START_DATE_ASC
  START_DATE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Trend implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemid: BigInt!
  clock: Int!
  num: Int!
  valueMin: BigFloat!
  valueAvg: BigFloat!
  valueMax: BigFloat!
}

"""
A condition to be used against `Trend` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TrendCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `num` field."""
  num: Int

  """Checks for equality with the object’s `valueMin` field."""
  valueMin: BigFloat

  """Checks for equality with the object’s `valueAvg` field."""
  valueAvg: BigFloat

  """Checks for equality with the object’s `valueMax` field."""
  valueMax: BigFloat
}

"""An input for mutations affecting `Trend`"""
input TrendInput {
  itemid: BigInt!
  clock: Int
  num: Int
  valueMin: BigFloat
  valueAvg: BigFloat
  valueMax: BigFloat
}

"""
Represents an update to a `Trend`. Fields that are set will be updated.
"""
input TrendPatch {
  itemid: BigInt
  clock: Int
  num: Int
  valueMin: BigFloat
  valueAvg: BigFloat
  valueMax: BigFloat
}

"""A connection to a list of `Trend` values."""
type TrendsConnection {
  """A list of `Trend` objects."""
  nodes: [Trend]!

  """
  A list of edges which contains the `Trend` and cursor to aid in pagination.
  """
  edges: [TrendsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Trend` you could get from the connection."""
  totalCount: Int
}

"""A `Trend` edge in the connection."""
type TrendsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Trend` at the end of the edge."""
  node: Trend
}

"""Methods to use when ordering `Trend`."""
enum TrendsOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  NUM_ASC
  NUM_DESC
  VALUE_MIN_ASC
  VALUE_MIN_DESC
  VALUE_AVG_ASC
  VALUE_AVG_DESC
  VALUE_MAX_ASC
  VALUE_MAX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TrendsUint implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  itemid: BigInt!
  clock: Int!
  num: Int!
  valueMin: BigFloat!
  valueAvg: BigFloat!
  valueMax: BigFloat!
}

"""
A condition to be used against `TrendsUint` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TrendsUintCondition {
  """Checks for equality with the object’s `itemid` field."""
  itemid: BigInt

  """Checks for equality with the object’s `clock` field."""
  clock: Int

  """Checks for equality with the object’s `num` field."""
  num: Int

  """Checks for equality with the object’s `valueMin` field."""
  valueMin: BigFloat

  """Checks for equality with the object’s `valueAvg` field."""
  valueAvg: BigFloat

  """Checks for equality with the object’s `valueMax` field."""
  valueMax: BigFloat
}

"""An input for mutations affecting `TrendsUint`"""
input TrendsUintInput {
  itemid: BigInt!
  clock: Int
  num: Int
  valueMin: BigFloat
  valueAvg: BigFloat
  valueMax: BigFloat
}

"""
Represents an update to a `TrendsUint`. Fields that are set will be updated.
"""
input TrendsUintPatch {
  itemid: BigInt
  clock: Int
  num: Int
  valueMin: BigFloat
  valueAvg: BigFloat
  valueMax: BigFloat
}

"""A connection to a list of `TrendsUint` values."""
type TrendsUintsConnection {
  """A list of `TrendsUint` objects."""
  nodes: [TrendsUint]!

  """
  A list of edges which contains the `TrendsUint` and cursor to aid in pagination.
  """
  edges: [TrendsUintsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TrendsUint` you could get from the connection."""
  totalCount: Int
}

"""A `TrendsUint` edge in the connection."""
type TrendsUintsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TrendsUint` at the end of the edge."""
  node: TrendsUint
}

"""Methods to use when ordering `TrendsUint`."""
enum TrendsUintsOrderBy {
  NATURAL
  ITEMID_ASC
  ITEMID_DESC
  CLOCK_ASC
  CLOCK_DESC
  NUM_ASC
  NUM_DESC
  VALUE_MIN_ASC
  VALUE_MIN_DESC
  VALUE_AVG_ASC
  VALUE_AVG_DESC
  VALUE_MAX_ASC
  VALUE_MAX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Trigger implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  triggerid: BigInt!
  expression: String!
  description: String!
  url: String!
  status: Int!
  value: Int!
  priority: Int!
  lastchange: Int!
  comments: String!
  error: String!
  templateid: BigInt
  type: Int!
  state: Int!
  flags: Int!
  recoveryMode: Int!
  recoveryExpression: String!
  correlationMode: Int!
  correlationTag: String!
  manualClose: Int!

  """Reads a single `Trigger` that is related to this `Trigger`."""
  triggerByTemplateid: Trigger

  """Reads and enables pagination through a set of `Trigger`."""
  triggersByTemplateid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Trigger`."""
    orderBy: [TriggersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerCondition
  ): TriggersConnection!

  """Reads and enables pagination through a set of `TriggerDepend`."""
  triggerDependsByTriggeridDown(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerDepend`."""
    orderBy: [TriggerDependsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerDependCondition
  ): TriggerDependsConnection!

  """Reads and enables pagination through a set of `TriggerDepend`."""
  triggerDependsByTriggeridUp(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerDepend`."""
    orderBy: [TriggerDependsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerDependCondition
  ): TriggerDependsConnection!

  """Reads and enables pagination through a set of `Function`."""
  functionsByTriggerid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Function`."""
    orderBy: [FunctionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: FunctionCondition
  ): FunctionsConnection!

  """Reads and enables pagination through a set of `Service`."""
  servicesByTriggerid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ServiceCondition
  ): ServicesConnection!

  """Reads and enables pagination through a set of `SysmapsLinkTrigger`."""
  sysmapsLinkTriggersByTriggerid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapsLinkTrigger`."""
    orderBy: [SysmapsLinkTriggersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapsLinkTriggerCondition
  ): SysmapsLinkTriggersConnection!

  """Reads a single `TriggerDiscovery` that is related to this `Trigger`."""
  triggerDiscoveryByTriggerid: TriggerDiscovery

  """Reads and enables pagination through a set of `TriggerDiscovery`."""
  triggerDiscoveriesByTriggerid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerDiscovery`."""
    orderBy: [TriggerDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerDiscoveryCondition
  ): TriggerDiscoveriesConnection! @deprecated(reason: "Please use triggerDiscoveryByTriggerid instead")

  """Reads and enables pagination through a set of `TriggerDiscovery`."""
  triggerDiscoveriesByParentTriggerid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerDiscovery`."""
    orderBy: [TriggerDiscoveriesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerDiscoveryCondition
  ): TriggerDiscoveriesConnection!

  """Reads and enables pagination through a set of `TriggerTag`."""
  triggerTagsByTriggerid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `TriggerTag`."""
    orderBy: [TriggerTagsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: TriggerTagCondition
  ): TriggerTagsConnection!
}

"""
A condition to be used against `Trigger` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input TriggerCondition {
  """Checks for equality with the object’s `triggerid` field."""
  triggerid: BigInt

  """Checks for equality with the object’s `expression` field."""
  expression: String

  """Checks for equality with the object’s `description` field."""
  description: String

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `status` field."""
  status: Int

  """Checks for equality with the object’s `value` field."""
  value: Int

  """Checks for equality with the object’s `priority` field."""
  priority: Int

  """Checks for equality with the object’s `lastchange` field."""
  lastchange: Int

  """Checks for equality with the object’s `comments` field."""
  comments: String

  """Checks for equality with the object’s `error` field."""
  error: String

  """Checks for equality with the object’s `templateid` field."""
  templateid: BigInt

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `state` field."""
  state: Int

  """Checks for equality with the object’s `flags` field."""
  flags: Int

  """Checks for equality with the object’s `recoveryMode` field."""
  recoveryMode: Int

  """Checks for equality with the object’s `recoveryExpression` field."""
  recoveryExpression: String

  """Checks for equality with the object’s `correlationMode` field."""
  correlationMode: Int

  """Checks for equality with the object’s `correlationTag` field."""
  correlationTag: String

  """Checks for equality with the object’s `manualClose` field."""
  manualClose: Int
}

type TriggerDepend implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  triggerdepid: BigInt!
  triggeridDown: BigInt!
  triggeridUp: BigInt!

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridDown: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridUp: Trigger
}

"""
A condition to be used against `TriggerDepend` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TriggerDependCondition {
  """Checks for equality with the object’s `triggerdepid` field."""
  triggerdepid: BigInt

  """Checks for equality with the object’s `triggeridDown` field."""
  triggeridDown: BigInt

  """Checks for equality with the object’s `triggeridUp` field."""
  triggeridUp: BigInt
}

"""An input for mutations affecting `TriggerDepend`"""
input TriggerDependInput {
  triggerdepid: BigInt!
  triggeridDown: BigInt!
  triggeridUp: BigInt!
}

"""
Represents an update to a `TriggerDepend`. Fields that are set will be updated.
"""
input TriggerDependPatch {
  triggerdepid: BigInt
  triggeridDown: BigInt
  triggeridUp: BigInt
}

"""A connection to a list of `TriggerDepend` values."""
type TriggerDependsConnection {
  """A list of `TriggerDepend` objects."""
  nodes: [TriggerDepend]!

  """
  A list of edges which contains the `TriggerDepend` and cursor to aid in pagination.
  """
  edges: [TriggerDependsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TriggerDepend` you could get from the connection."""
  totalCount: Int
}

"""A `TriggerDepend` edge in the connection."""
type TriggerDependsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TriggerDepend` at the end of the edge."""
  node: TriggerDepend
}

"""Methods to use when ordering `TriggerDepend`."""
enum TriggerDependsOrderBy {
  NATURAL
  TRIGGERDEPID_ASC
  TRIGGERDEPID_DESC
  TRIGGERID_DOWN_ASC
  TRIGGERID_DOWN_DESC
  TRIGGERID_UP_ASC
  TRIGGERID_UP_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""A connection to a list of `TriggerDiscovery` values."""
type TriggerDiscoveriesConnection {
  """A list of `TriggerDiscovery` objects."""
  nodes: [TriggerDiscovery]!

  """
  A list of edges which contains the `TriggerDiscovery` and cursor to aid in pagination.
  """
  edges: [TriggerDiscoveriesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `TriggerDiscovery` you could get from the connection.
  """
  totalCount: Int
}

"""A `TriggerDiscovery` edge in the connection."""
type TriggerDiscoveriesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TriggerDiscovery` at the end of the edge."""
  node: TriggerDiscovery
}

"""Methods to use when ordering `TriggerDiscovery`."""
enum TriggerDiscoveriesOrderBy {
  NATURAL
  TRIGGERID_ASC
  TRIGGERID_DESC
  PARENT_TRIGGERID_ASC
  PARENT_TRIGGERID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TriggerDiscovery implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  triggerid: BigInt!
  parentTriggerid: BigInt!

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByTriggerid: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByParentTriggerid: Trigger
}

"""
A condition to be used against `TriggerDiscovery` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input TriggerDiscoveryCondition {
  """Checks for equality with the object’s `triggerid` field."""
  triggerid: BigInt

  """Checks for equality with the object’s `parentTriggerid` field."""
  parentTriggerid: BigInt
}

"""An input for mutations affecting `TriggerDiscovery`"""
input TriggerDiscoveryInput {
  triggerid: BigInt!
  parentTriggerid: BigInt!
}

"""
Represents an update to a `TriggerDiscovery`. Fields that are set will be updated.
"""
input TriggerDiscoveryPatch {
  triggerid: BigInt
  parentTriggerid: BigInt
}

"""An input for mutations affecting `Trigger`"""
input TriggerInput {
  triggerid: BigInt!
  expression: String
  description: String
  url: String
  status: Int
  value: Int
  priority: Int
  lastchange: Int
  comments: String
  error: String
  templateid: BigInt
  type: Int
  state: Int
  flags: Int
  recoveryMode: Int
  recoveryExpression: String
  correlationMode: Int
  correlationTag: String
  manualClose: Int
}

"""
Represents an update to a `Trigger`. Fields that are set will be updated.
"""
input TriggerPatch {
  triggerid: BigInt
  expression: String
  description: String
  url: String
  status: Int
  value: Int
  priority: Int
  lastchange: Int
  comments: String
  error: String
  templateid: BigInt
  type: Int
  state: Int
  flags: Int
  recoveryMode: Int
  recoveryExpression: String
  correlationMode: Int
  correlationTag: String
  manualClose: Int
}

"""A connection to a list of `Trigger` values."""
type TriggersConnection {
  """A list of `Trigger` objects."""
  nodes: [Trigger]!

  """
  A list of edges which contains the `Trigger` and cursor to aid in pagination.
  """
  edges: [TriggersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Trigger` you could get from the connection."""
  totalCount: Int
}

"""A `Trigger` edge in the connection."""
type TriggersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Trigger` at the end of the edge."""
  node: Trigger
}

"""Methods to use when ordering `Trigger`."""
enum TriggersOrderBy {
  NATURAL
  TRIGGERID_ASC
  TRIGGERID_DESC
  EXPRESSION_ASC
  EXPRESSION_DESC
  DESCRIPTION_ASC
  DESCRIPTION_DESC
  URL_ASC
  URL_DESC
  STATUS_ASC
  STATUS_DESC
  VALUE_ASC
  VALUE_DESC
  PRIORITY_ASC
  PRIORITY_DESC
  LASTCHANGE_ASC
  LASTCHANGE_DESC
  COMMENTS_ASC
  COMMENTS_DESC
  ERROR_ASC
  ERROR_DESC
  TEMPLATEID_ASC
  TEMPLATEID_DESC
  TYPE_ASC
  TYPE_DESC
  STATE_ASC
  STATE_DESC
  FLAGS_ASC
  FLAGS_DESC
  RECOVERY_MODE_ASC
  RECOVERY_MODE_DESC
  RECOVERY_EXPRESSION_ASC
  RECOVERY_EXPRESSION_DESC
  CORRELATION_MODE_ASC
  CORRELATION_MODE_DESC
  CORRELATION_TAG_ASC
  CORRELATION_TAG_DESC
  MANUAL_CLOSE_ASC
  MANUAL_CLOSE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type TriggerTag implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  triggertagid: BigInt!
  triggerid: BigInt!
  tag: String!
  value: String!

  """Reads a single `Trigger` that is related to this `TriggerTag`."""
  triggerByTriggerid: Trigger
}

"""
A condition to be used against `TriggerTag` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input TriggerTagCondition {
  """Checks for equality with the object’s `triggertagid` field."""
  triggertagid: BigInt

  """Checks for equality with the object’s `triggerid` field."""
  triggerid: BigInt

  """Checks for equality with the object’s `tag` field."""
  tag: String

  """Checks for equality with the object’s `value` field."""
  value: String
}

"""An input for mutations affecting `TriggerTag`"""
input TriggerTagInput {
  triggertagid: BigInt!
  triggerid: BigInt!
  tag: String
  value: String
}

"""
Represents an update to a `TriggerTag`. Fields that are set will be updated.
"""
input TriggerTagPatch {
  triggertagid: BigInt
  triggerid: BigInt
  tag: String
  value: String
}

"""A connection to a list of `TriggerTag` values."""
type TriggerTagsConnection {
  """A list of `TriggerTag` objects."""
  nodes: [TriggerTag]!

  """
  A list of edges which contains the `TriggerTag` and cursor to aid in pagination.
  """
  edges: [TriggerTagsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `TriggerTag` you could get from the connection."""
  totalCount: Int
}

"""A `TriggerTag` edge in the connection."""
type TriggerTagsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `TriggerTag` at the end of the edge."""
  node: TriggerTag
}

"""Methods to use when ordering `TriggerTag`."""
enum TriggerTagsOrderBy {
  NATURAL
  TRIGGERTAGID_ASC
  TRIGGERTAGID_DESC
  TRIGGERID_ASC
  TRIGGERID_DESC
  TAG_ASC
  TAG_DESC
  VALUE_ASC
  VALUE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `updateAcknowledgeByAcknowledgeid` mutation."""
input UpdateAcknowledgeByAcknowledgeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Acknowledge` being updated.
  """
  acknowledgePatch: AcknowledgePatch!
  acknowledgeid: BigInt!
}

"""All input for the `updateAcknowledge` mutation."""
input UpdateAcknowledgeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Acknowledge` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Acknowledge` being updated.
  """
  acknowledgePatch: AcknowledgePatch!
}

"""The output of our update `Acknowledge` mutation."""
type UpdateAcknowledgePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Acknowledge` that was updated by this mutation."""
  acknowledge: Acknowledge

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Acknowledge`."""
  userByUserid: User

  """Reads a single `Event` that is related to this `Acknowledge`."""
  eventByEventid: Event

  """An edge for our `Acknowledge`. May be used by Relay 1."""
  acknowledgeEdge(
    """The method to use when ordering `Acknowledge`."""
    orderBy: [AcknowledgesOrderBy!] = PRIMARY_KEY_ASC
  ): AcknowledgesEdge
}

"""All input for the `updateActionByActionid` mutation."""
input UpdateActionByActionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  actionPatch: ActionPatch!
  actionid: BigInt!
}

"""All input for the `updateAction` mutation."""
input UpdateActionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Action` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Action` being updated.
  """
  actionPatch: ActionPatch!
}

"""The output of our update `Action` mutation."""
type UpdateActionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Action` that was updated by this mutation."""
  action: Action

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Action`. May be used by Relay 1."""
  actionEdge(
    """The method to use when ordering `Action`."""
    orderBy: [ActionsOrderBy!] = PRIMARY_KEY_ASC
  ): ActionsEdge
}

"""All input for the `updateAlertByAlertid` mutation."""
input UpdateAlertByAlertidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Alert` being updated.
  """
  alertPatch: AlertPatch!
  alertid: BigInt!
}

"""All input for the `updateAlert` mutation."""
input UpdateAlertInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Alert` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Alert` being updated.
  """
  alertPatch: AlertPatch!
}

"""The output of our update `Alert` mutation."""
type UpdateAlertPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Alert` that was updated by this mutation."""
  alert: Alert

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Alert`."""
  actionByActionid: Action

  """Reads a single `Event` that is related to this `Alert`."""
  eventByEventid: Event

  """Reads a single `User` that is related to this `Alert`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Alert`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Alert`. May be used by Relay 1."""
  alertEdge(
    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = PRIMARY_KEY_ASC
  ): AlertsEdge
}

"""All input for the `updateApplicationByApplicationid` mutation."""
input UpdateApplicationByApplicationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
  applicationid: BigInt!
}

"""
All input for the `updateApplicationDiscoveryByApplicationDiscoveryid` mutation.
"""
input UpdateApplicationDiscoveryByApplicationDiscoveryidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationDiscovery` being updated.
  """
  applicationDiscoveryPatch: ApplicationDiscoveryPatch!
  applicationDiscoveryid: BigInt!
}

"""All input for the `updateApplicationDiscovery` mutation."""
input UpdateApplicationDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationDiscovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ApplicationDiscovery` being updated.
  """
  applicationDiscoveryPatch: ApplicationDiscoveryPatch!
}

"""The output of our update `ApplicationDiscovery` mutation."""
type UpdateApplicationDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationDiscovery` that was updated by this mutation."""
  applicationDiscovery: ApplicationDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationDiscovery`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationDiscovery`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype

  """An edge for our `ApplicationDiscovery`. May be used by Relay 1."""
  applicationDiscoveryEdge(
    """The method to use when ordering `ApplicationDiscovery`."""
    orderBy: [ApplicationDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationDiscoveriesEdge
}

"""All input for the `updateApplication` mutation."""
input UpdateApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Application` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Application` being updated.
  """
  applicationPatch: ApplicationPatch!
}

"""The output of our update `Application` mutation."""
type UpdateApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Application` that was updated by this mutation."""
  application: Application

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Application`."""
  hostByHostid: Host

  """An edge for our `Application`. May be used by Relay 1."""
  applicationEdge(
    """The method to use when ordering `Application`."""
    orderBy: [ApplicationsOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationsEdge
}

"""
All input for the `updateApplicationPrototypeByApplicationPrototypeid` mutation.
"""
input UpdateApplicationPrototypeByApplicationPrototypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationPrototype` being updated.
  """
  applicationPrototypePatch: ApplicationPrototypePatch!
  applicationPrototypeid: BigInt!
}

"""All input for the `updateApplicationPrototype` mutation."""
input UpdateApplicationPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationPrototype` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ApplicationPrototype` being updated.
  """
  applicationPrototypePatch: ApplicationPrototypePatch!
}

"""The output of our update `ApplicationPrototype` mutation."""
type UpdateApplicationPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationPrototype` that was updated by this mutation."""
  applicationPrototype: ApplicationPrototype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ApplicationPrototype`."""
  itemByItemid: Item

  """
  Reads a single `ApplicationPrototype` that is related to this `ApplicationPrototype`.
  """
  applicationPrototypeByTemplateid: ApplicationPrototype

  """An edge for our `ApplicationPrototype`. May be used by Relay 1."""
  applicationPrototypeEdge(
    """The method to use when ordering `ApplicationPrototype`."""
    orderBy: [ApplicationPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationPrototypesEdge
}

"""
All input for the `updateApplicationTemplateByApplicationTemplateid` mutation.
"""
input UpdateApplicationTemplateByApplicationTemplateidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ApplicationTemplate` being updated.
  """
  applicationTemplatePatch: ApplicationTemplatePatch!
  applicationTemplateid: BigInt!
}

"""All input for the `updateApplicationTemplate` mutation."""
input UpdateApplicationTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ApplicationTemplate` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ApplicationTemplate` being updated.
  """
  applicationTemplatePatch: ApplicationTemplatePatch!
}

"""The output of our update `ApplicationTemplate` mutation."""
type UpdateApplicationTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ApplicationTemplate` that was updated by this mutation."""
  applicationTemplate: ApplicationTemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByApplicationid: Application

  """
  Reads a single `Application` that is related to this `ApplicationTemplate`.
  """
  applicationByTemplateid: Application

  """An edge for our `ApplicationTemplate`. May be used by Relay 1."""
  applicationTemplateEdge(
    """The method to use when ordering `ApplicationTemplate`."""
    orderBy: [ApplicationTemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): ApplicationTemplatesEdge
}

"""All input for the `updateAuditlogByAuditid` mutation."""
input UpdateAuditlogByAuditidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Auditlog` being updated.
  """
  auditlogPatch: AuditlogPatch!
  auditid: BigInt!
}

"""All input for the `updateAuditlogDetailByAuditdetailid` mutation."""
input UpdateAuditlogDetailByAuditdetailidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AuditlogDetail` being updated.
  """
  auditlogDetailPatch: AuditlogDetailPatch!
  auditdetailid: BigInt!
}

"""All input for the `updateAuditlogDetail` mutation."""
input UpdateAuditlogDetailInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AuditlogDetail` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AuditlogDetail` being updated.
  """
  auditlogDetailPatch: AuditlogDetailPatch!
}

"""The output of our update `AuditlogDetail` mutation."""
type UpdateAuditlogDetailPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AuditlogDetail` that was updated by this mutation."""
  auditlogDetail: AuditlogDetail

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Auditlog` that is related to this `AuditlogDetail`."""
  auditlogByAuditid: Auditlog

  """An edge for our `AuditlogDetail`. May be used by Relay 1."""
  auditlogDetailEdge(
    """The method to use when ordering `AuditlogDetail`."""
    orderBy: [AuditlogDetailsOrderBy!] = PRIMARY_KEY_ASC
  ): AuditlogDetailsEdge
}

"""All input for the `updateAuditlog` mutation."""
input UpdateAuditlogInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Auditlog` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Auditlog` being updated.
  """
  auditlogPatch: AuditlogPatch!
}

"""The output of our update `Auditlog` mutation."""
type UpdateAuditlogPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Auditlog` that was updated by this mutation."""
  auditlog: Auditlog

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Auditlog`."""
  userByUserid: User

  """An edge for our `Auditlog`. May be used by Relay 1."""
  auditlogEdge(
    """The method to use when ordering `Auditlog`."""
    orderBy: [AuditlogsOrderBy!] = PRIMARY_KEY_ASC
  ): AuditlogsEdge
}

"""All input for the `updateAutoregHostByAutoregHostid` mutation."""
input UpdateAutoregHostByAutoregHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `AutoregHost` being updated.
  """
  autoregHostPatch: AutoregHostPatch!
  autoregHostid: BigInt!
}

"""All input for the `updateAutoregHost` mutation."""
input UpdateAutoregHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `AutoregHost` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `AutoregHost` being updated.
  """
  autoregHostPatch: AutoregHostPatch!
}

"""The output of our update `AutoregHost` mutation."""
type UpdateAutoregHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `AutoregHost` that was updated by this mutation."""
  autoregHost: AutoregHost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `AutoregHost`."""
  hostByProxyHostid: Host

  """An edge for our `AutoregHost`. May be used by Relay 1."""
  autoregHostEdge(
    """The method to use when ordering `AutoregHost`."""
    orderBy: [AutoregHostsOrderBy!] = PRIMARY_KEY_ASC
  ): AutoregHostsEdge
}

"""All input for the `updateConditionByConditionid` mutation."""
input UpdateConditionByConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Condition` being updated.
  """
  conditionPatch: ConditionPatch!
  conditionid: BigInt!
}

"""All input for the `updateCondition` mutation."""
input UpdateConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Condition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Condition` being updated.
  """
  conditionPatch: ConditionPatch!
}

"""The output of our update `Condition` mutation."""
type UpdateConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Condition` that was updated by this mutation."""
  condition: Condition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Condition`."""
  actionByActionid: Action

  """An edge for our `Condition`. May be used by Relay 1."""
  conditionEdge(
    """The method to use when ordering `Condition`."""
    orderBy: [ConditionsOrderBy!] = PRIMARY_KEY_ASC
  ): ConditionsEdge
}

"""All input for the `updateConfigByConfigid` mutation."""
input UpdateConfigByConfigidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Config` being updated.
  """
  configPatch: ConfigPatch!
  configid: BigInt!
}

"""All input for the `updateConfig` mutation."""
input UpdateConfigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Config` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Config` being updated.
  """
  configPatch: ConfigPatch!
}

"""The output of our update `Config` mutation."""
type UpdateConfigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Config` that was updated by this mutation."""
  config: Config

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Config`."""
  usrgrpByAlertUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Config`."""
  groupByDiscoveryGroupid: Group

  """An edge for our `Config`. May be used by Relay 1."""
  configEdge(
    """The method to use when ordering `Config`."""
    orderBy: [ConfigsOrderBy!] = PRIMARY_KEY_ASC
  ): ConfigsEdge
}

"""All input for the `updateCorrConditionByCorrConditionid` mutation."""
input UpdateCorrConditionByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CorrCondition` being updated.
  """
  corrConditionPatch: CorrConditionPatch!
  corrConditionid: BigInt!
}

"""
All input for the `updateCorrConditionGroupByCorrConditionid` mutation.
"""
input UpdateCorrConditionGroupByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CorrConditionGroup` being updated.
  """
  corrConditionGroupPatch: CorrConditionGroupPatch!
  corrConditionid: BigInt!
}

"""All input for the `updateCorrConditionGroup` mutation."""
input UpdateCorrConditionGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CorrConditionGroup` being updated.
  """
  corrConditionGroupPatch: CorrConditionGroupPatch!
}

"""The output of our update `CorrConditionGroup` mutation."""
type UpdateCorrConditionGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionGroup` that was updated by this mutation."""
  corrConditionGroup: CorrConditionGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionGroup`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """Reads a single `Group` that is related to this `CorrConditionGroup`."""
  groupByGroupid: Group

  """An edge for our `CorrConditionGroup`. May be used by Relay 1."""
  corrConditionGroupEdge(
    """The method to use when ordering `CorrConditionGroup`."""
    orderBy: [CorrConditionGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionGroupsEdge
}

"""All input for the `updateCorrCondition` mutation."""
input UpdateCorrConditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrCondition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CorrCondition` being updated.
  """
  corrConditionPatch: CorrConditionPatch!
}

"""The output of our update `CorrCondition` mutation."""
type UpdateCorrConditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrCondition` that was updated by this mutation."""
  corrCondition: CorrCondition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Correlation` that is related to this `CorrCondition`."""
  correlationByCorrelationid: Correlation

  """An edge for our `CorrCondition`. May be used by Relay 1."""
  corrConditionEdge(
    """The method to use when ordering `CorrCondition`."""
    orderBy: [CorrConditionsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionsEdge
}

"""All input for the `updateCorrConditionTagByCorrConditionid` mutation."""
input UpdateCorrConditionTagByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CorrConditionTag` being updated.
  """
  corrConditionTagPatch: CorrConditionTagPatch!
  corrConditionid: BigInt!
}

"""All input for the `updateCorrConditionTag` mutation."""
input UpdateCorrConditionTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CorrConditionTag` being updated.
  """
  corrConditionTagPatch: CorrConditionTagPatch!
}

"""
All input for the `updateCorrConditionTagpairByCorrConditionid` mutation.
"""
input UpdateCorrConditionTagpairByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CorrConditionTagpair` being updated.
  """
  corrConditionTagpairPatch: CorrConditionTagpairPatch!
  corrConditionid: BigInt!
}

"""All input for the `updateCorrConditionTagpair` mutation."""
input UpdateCorrConditionTagpairInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionTagpair` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CorrConditionTagpair` being updated.
  """
  corrConditionTagpairPatch: CorrConditionTagpairPatch!
}

"""The output of our update `CorrConditionTagpair` mutation."""
type UpdateCorrConditionTagpairPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTagpair` that was updated by this mutation."""
  corrConditionTagpair: CorrConditionTagpair

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagpair`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTagpair`. May be used by Relay 1."""
  corrConditionTagpairEdge(
    """The method to use when ordering `CorrConditionTagpair`."""
    orderBy: [CorrConditionTagpairsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagpairsEdge
}

"""The output of our update `CorrConditionTag` mutation."""
type UpdateCorrConditionTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTag` that was updated by this mutation."""
  corrConditionTag: CorrConditionTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTag`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTag`. May be used by Relay 1."""
  corrConditionTagEdge(
    """The method to use when ordering `CorrConditionTag`."""
    orderBy: [CorrConditionTagsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagsEdge
}

"""
All input for the `updateCorrConditionTagvalueByCorrConditionid` mutation.
"""
input UpdateCorrConditionTagvalueByCorrConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CorrConditionTagvalue` being updated.
  """
  corrConditionTagvaluePatch: CorrConditionTagvaluePatch!
  corrConditionid: BigInt!
}

"""All input for the `updateCorrConditionTagvalue` mutation."""
input UpdateCorrConditionTagvalueInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrConditionTagvalue` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CorrConditionTagvalue` being updated.
  """
  corrConditionTagvaluePatch: CorrConditionTagvaluePatch!
}

"""The output of our update `CorrConditionTagvalue` mutation."""
type UpdateCorrConditionTagvaluePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrConditionTagvalue` that was updated by this mutation."""
  corrConditionTagvalue: CorrConditionTagvalue

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `CorrCondition` that is related to this `CorrConditionTagvalue`.
  """
  corrConditionByCorrConditionid: CorrCondition

  """An edge for our `CorrConditionTagvalue`. May be used by Relay 1."""
  corrConditionTagvalueEdge(
    """The method to use when ordering `CorrConditionTagvalue`."""
    orderBy: [CorrConditionTagvaluesOrderBy!] = PRIMARY_KEY_ASC
  ): CorrConditionTagvaluesEdge
}

"""All input for the `updateCorrelationByCorrelationid` mutation."""
input UpdateCorrelationByCorrelationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Correlation` being updated.
  """
  correlationPatch: CorrelationPatch!
  correlationid: BigInt!
}

"""All input for the `updateCorrelation` mutation."""
input UpdateCorrelationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Correlation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Correlation` being updated.
  """
  correlationPatch: CorrelationPatch!
}

"""The output of our update `Correlation` mutation."""
type UpdateCorrelationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Correlation` that was updated by this mutation."""
  correlation: Correlation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Correlation`. May be used by Relay 1."""
  correlationEdge(
    """The method to use when ordering `Correlation`."""
    orderBy: [CorrelationsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrelationsEdge
}

"""All input for the `updateCorrOperationByCorrOperationid` mutation."""
input UpdateCorrOperationByCorrOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `CorrOperation` being updated.
  """
  corrOperationPatch: CorrOperationPatch!
  corrOperationid: BigInt!
}

"""All input for the `updateCorrOperation` mutation."""
input UpdateCorrOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `CorrOperation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `CorrOperation` being updated.
  """
  corrOperationPatch: CorrOperationPatch!
}

"""The output of our update `CorrOperation` mutation."""
type UpdateCorrOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `CorrOperation` that was updated by this mutation."""
  corrOperation: CorrOperation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Correlation` that is related to this `CorrOperation`."""
  correlationByCorrelationid: Correlation

  """An edge for our `CorrOperation`. May be used by Relay 1."""
  corrOperationEdge(
    """The method to use when ordering `CorrOperation`."""
    orderBy: [CorrOperationsOrderBy!] = PRIMARY_KEY_ASC
  ): CorrOperationsEdge
}

"""All input for the `updateDcheckByDcheckid` mutation."""
input UpdateDcheckByDcheckidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Dcheck` being updated.
  """
  dcheckPatch: DcheckPatch!
  dcheckid: BigInt!
}

"""All input for the `updateDcheck` mutation."""
input UpdateDcheckInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dcheck` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Dcheck` being updated.
  """
  dcheckPatch: DcheckPatch!
}

"""The output of our update `Dcheck` mutation."""
type UpdateDcheckPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dcheck` that was updated by this mutation."""
  dcheck: Dcheck

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Drule` that is related to this `Dcheck`."""
  druleByDruleid: Drule

  """An edge for our `Dcheck`. May be used by Relay 1."""
  dcheckEdge(
    """The method to use when ordering `Dcheck`."""
    orderBy: [DchecksOrderBy!] = PRIMARY_KEY_ASC
  ): DchecksEdge
}

"""All input for the `updateDhostByDhostid` mutation."""
input UpdateDhostByDhostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Dhost` being updated.
  """
  dhostPatch: DhostPatch!
  dhostid: BigInt!
}

"""All input for the `updateDhost` mutation."""
input UpdateDhostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dhost` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Dhost` being updated.
  """
  dhostPatch: DhostPatch!
}

"""The output of our update `Dhost` mutation."""
type UpdateDhostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dhost` that was updated by this mutation."""
  dhost: Dhost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Drule` that is related to this `Dhost`."""
  druleByDruleid: Drule

  """An edge for our `Dhost`. May be used by Relay 1."""
  dhostEdge(
    """The method to use when ordering `Dhost`."""
    orderBy: [DhostsOrderBy!] = PRIMARY_KEY_ASC
  ): DhostsEdge
}

"""All input for the `updateDruleByDruleid` mutation."""
input UpdateDruleByDruleidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Drule` being updated.
  """
  drulePatch: DrulePatch!
  druleid: BigInt!
}

"""All input for the `updateDrule` mutation."""
input UpdateDruleInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Drule` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Drule` being updated.
  """
  drulePatch: DrulePatch!
}

"""The output of our update `Drule` mutation."""
type UpdateDrulePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Drule` that was updated by this mutation."""
  drule: Drule

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Drule`."""
  hostByProxyHostid: Host

  """An edge for our `Drule`. May be used by Relay 1."""
  druleEdge(
    """The method to use when ordering `Drule`."""
    orderBy: [DrulesOrderBy!] = PRIMARY_KEY_ASC
  ): DrulesEdge
}

"""All input for the `updateDserviceByDserviceid` mutation."""
input UpdateDserviceByDserviceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Dservice` being updated.
  """
  dservicePatch: DservicePatch!
  dserviceid: BigInt!
}

"""All input for the `updateDservice` mutation."""
input UpdateDserviceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Dservice` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Dservice` being updated.
  """
  dservicePatch: DservicePatch!
}

"""The output of our update `Dservice` mutation."""
type UpdateDservicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Dservice` that was updated by this mutation."""
  dservice: Dservice

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Dhost` that is related to this `Dservice`."""
  dhostByDhostid: Dhost

  """Reads a single `Dcheck` that is related to this `Dservice`."""
  dcheckByDcheckid: Dcheck

  """An edge for our `Dservice`. May be used by Relay 1."""
  dserviceEdge(
    """The method to use when ordering `Dservice`."""
    orderBy: [DservicesOrderBy!] = PRIMARY_KEY_ASC
  ): DservicesEdge
}

"""All input for the `updateEscalationByEscalationid` mutation."""
input UpdateEscalationByEscalationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Escalation` being updated.
  """
  escalationPatch: EscalationPatch!
  escalationid: BigInt!
}

"""All input for the `updateEscalation` mutation."""
input UpdateEscalationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Escalation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Escalation` being updated.
  """
  escalationPatch: EscalationPatch!
}

"""The output of our update `Escalation` mutation."""
type UpdateEscalationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Escalation` that was updated by this mutation."""
  escalation: Escalation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Escalation`. May be used by Relay 1."""
  escalationEdge(
    """The method to use when ordering `Escalation`."""
    orderBy: [EscalationsOrderBy!] = PRIMARY_KEY_ASC
  ): EscalationsEdge
}

"""All input for the `updateEventByEventid` mutation."""
input UpdateEventByEventidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  eventPatch: EventPatch!
  eventid: BigInt!
}

"""All input for the `updateEvent` mutation."""
input UpdateEventInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Event` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Event` being updated.
  """
  eventPatch: EventPatch!
}

"""The output of our update `Event` mutation."""
type UpdateEventPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Event` that was updated by this mutation."""
  event: Event

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Event`. May be used by Relay 1."""
  eventEdge(
    """The method to use when ordering `Event`."""
    orderBy: [EventsOrderBy!] = PRIMARY_KEY_ASC
  ): EventsEdge
}

"""All input for the `updateEventRecoveryByEventid` mutation."""
input UpdateEventRecoveryByEventidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EventRecovery` being updated.
  """
  eventRecoveryPatch: EventRecoveryPatch!
  eventid: BigInt!
}

"""All input for the `updateEventRecovery` mutation."""
input UpdateEventRecoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventRecovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EventRecovery` being updated.
  """
  eventRecoveryPatch: EventRecoveryPatch!
}

"""The output of our update `EventRecovery` mutation."""
type UpdateEventRecoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventRecovery` that was updated by this mutation."""
  eventRecovery: EventRecovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByREventid: Event

  """Reads a single `Event` that is related to this `EventRecovery`."""
  eventByCEventid: Event

  """An edge for our `EventRecovery`. May be used by Relay 1."""
  eventRecoveryEdge(
    """The method to use when ordering `EventRecovery`."""
    orderBy: [EventRecoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): EventRecoveriesEdge
}

"""All input for the `updateEventTagByEventtagid` mutation."""
input UpdateEventTagByEventtagidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `EventTag` being updated.
  """
  eventTagPatch: EventTagPatch!
  eventtagid: BigInt!
}

"""All input for the `updateEventTag` mutation."""
input UpdateEventTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `EventTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `EventTag` being updated.
  """
  eventTagPatch: EventTagPatch!
}

"""The output of our update `EventTag` mutation."""
type UpdateEventTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `EventTag` that was updated by this mutation."""
  eventTag: EventTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `EventTag`."""
  eventByEventid: Event

  """An edge for our `EventTag`. May be used by Relay 1."""
  eventTagEdge(
    """The method to use when ordering `EventTag`."""
    orderBy: [EventTagsOrderBy!] = PRIMARY_KEY_ASC
  ): EventTagsEdge
}

"""All input for the `updateExpressionByExpressionid` mutation."""
input UpdateExpressionByExpressionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Expression` being updated.
  """
  expressionPatch: ExpressionPatch!
  expressionid: BigInt!
}

"""All input for the `updateExpression` mutation."""
input UpdateExpressionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Expression` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Expression` being updated.
  """
  expressionPatch: ExpressionPatch!
}

"""The output of our update `Expression` mutation."""
type UpdateExpressionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Expression` that was updated by this mutation."""
  expression: Expression

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Regexp` that is related to this `Expression`."""
  regexpByRegexpid: Regexp

  """An edge for our `Expression`. May be used by Relay 1."""
  expressionEdge(
    """The method to use when ordering `Expression`."""
    orderBy: [ExpressionsOrderBy!] = PRIMARY_KEY_ASC
  ): ExpressionsEdge
}

"""All input for the `updateFactById` mutation."""
input UpdateFactByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Fact` being updated.
  """
  factPatch: FactPatch!
  id: Int!
}

"""All input for the `updateFact` mutation."""
input UpdateFactInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Fact` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Fact` being updated.
  """
  factPatch: FactPatch!
}

"""The output of our update `Fact` mutation."""
type UpdateFactPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Fact` that was updated by this mutation."""
  fact: Fact

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Fact`. May be used by Relay 1."""
  factEdge(
    """The method to use when ordering `Fact`."""
    orderBy: [FactsOrderBy!] = PRIMARY_KEY_ASC
  ): FactsEdge
}

"""All input for the `updateFunctionByFunctionid` mutation."""
input UpdateFunctionByFunctionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Function` being updated.
  """
  functionPatch: FunctionPatch!
  functionid: BigInt!
}

"""All input for the `updateFunction` mutation."""
input UpdateFunctionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Function` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Function` being updated.
  """
  functionPatch: FunctionPatch!
}

"""The output of our update `Function` mutation."""
type UpdateFunctionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Function` that was updated by this mutation."""
  function: Function

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `Function`."""
  itemByItemid: Item

  """Reads a single `Trigger` that is related to this `Function`."""
  triggerByTriggerid: Trigger

  """An edge for our `Function`. May be used by Relay 1."""
  functionEdge(
    """The method to use when ordering `Function`."""
    orderBy: [FunctionsOrderBy!] = PRIMARY_KEY_ASC
  ): FunctionsEdge
}

"""All input for the `updateGlobalmacroByGlobalmacroid` mutation."""
input UpdateGlobalmacroByGlobalmacroidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Globalmacro` being updated.
  """
  globalmacroPatch: GlobalmacroPatch!
  globalmacroid: BigInt!
}

"""All input for the `updateGlobalmacro` mutation."""
input UpdateGlobalmacroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Globalmacro` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Globalmacro` being updated.
  """
  globalmacroPatch: GlobalmacroPatch!
}

"""The output of our update `Globalmacro` mutation."""
type UpdateGlobalmacroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Globalmacro` that was updated by this mutation."""
  globalmacro: Globalmacro

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Globalmacro`. May be used by Relay 1."""
  globalmacroEdge(
    """The method to use when ordering `Globalmacro`."""
    orderBy: [GlobalmacrosOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalmacrosEdge
}

"""All input for the `updateGlobalvarByGlobalvarid` mutation."""
input UpdateGlobalvarByGlobalvaridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Globalvar` being updated.
  """
  globalvarPatch: GlobalvarPatch!
  globalvarid: BigInt!
}

"""All input for the `updateGlobalvar` mutation."""
input UpdateGlobalvarInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Globalvar` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Globalvar` being updated.
  """
  globalvarPatch: GlobalvarPatch!
}

"""The output of our update `Globalvar` mutation."""
type UpdateGlobalvarPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Globalvar` that was updated by this mutation."""
  globalvar: Globalvar

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Globalvar`. May be used by Relay 1."""
  globalvarEdge(
    """The method to use when ordering `Globalvar`."""
    orderBy: [GlobalvarsOrderBy!] = PRIMARY_KEY_ASC
  ): GlobalvarsEdge
}

"""All input for the `updateGraphByGraphid` mutation."""
input UpdateGraphByGraphidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Graph` being updated.
  """
  graphPatch: GraphPatch!
  graphid: BigInt!
}

"""All input for the `updateGraphDiscoveryByGraphid` mutation."""
input UpdateGraphDiscoveryByGraphidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GraphDiscovery` being updated.
  """
  graphDiscoveryPatch: GraphDiscoveryPatch!
  graphid: BigInt!
}

"""All input for the `updateGraphDiscovery` mutation."""
input UpdateGraphDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GraphDiscovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GraphDiscovery` being updated.
  """
  graphDiscoveryPatch: GraphDiscoveryPatch!
}

"""The output of our update `GraphDiscovery` mutation."""
type UpdateGraphDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphDiscovery` that was updated by this mutation."""
  graphDiscovery: GraphDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByGraphid: Graph

  """Reads a single `Graph` that is related to this `GraphDiscovery`."""
  graphByParentGraphid: Graph

  """An edge for our `GraphDiscovery`. May be used by Relay 1."""
  graphDiscoveryEdge(
    """The method to use when ordering `GraphDiscovery`."""
    orderBy: [GraphDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): GraphDiscoveriesEdge
}

"""All input for the `updateGraph` mutation."""
input UpdateGraphInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Graph` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Graph` being updated.
  """
  graphPatch: GraphPatch!
}

"""The output of our update `Graph` mutation."""
type UpdateGraphPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Graph` that was updated by this mutation."""
  graph: Graph

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `Graph`."""
  graphByTemplateid: Graph

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYminItemid: Item

  """Reads a single `Item` that is related to this `Graph`."""
  itemByYmaxItemid: Item

  """An edge for our `Graph`. May be used by Relay 1."""
  graphEdge(
    """The method to use when ordering `Graph`."""
    orderBy: [GraphsOrderBy!] = PRIMARY_KEY_ASC
  ): GraphsEdge
}

"""All input for the `updateGraphsItemByGitemid` mutation."""
input UpdateGraphsItemByGitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GraphsItem` being updated.
  """
  graphsItemPatch: GraphsItemPatch!
  gitemid: BigInt!
}

"""All input for the `updateGraphsItem` mutation."""
input UpdateGraphsItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GraphsItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GraphsItem` being updated.
  """
  graphsItemPatch: GraphsItemPatch!
}

"""The output of our update `GraphsItem` mutation."""
type UpdateGraphsItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphsItem` that was updated by this mutation."""
  graphsItem: GraphsItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Graph` that is related to this `GraphsItem`."""
  graphByGraphid: Graph

  """Reads a single `Item` that is related to this `GraphsItem`."""
  itemByItemid: Item

  """An edge for our `GraphsItem`. May be used by Relay 1."""
  graphsItemEdge(
    """The method to use when ordering `GraphsItem`."""
    orderBy: [GraphsItemsOrderBy!] = PRIMARY_KEY_ASC
  ): GraphsItemsEdge
}

"""All input for the `updateGraphThemeByGraphthemeid` mutation."""
input UpdateGraphThemeByGraphthemeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GraphTheme` being updated.
  """
  graphThemePatch: GraphThemePatch!
  graphthemeid: BigInt!
}

"""All input for the `updateGraphTheme` mutation."""
input UpdateGraphThemeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GraphTheme` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GraphTheme` being updated.
  """
  graphThemePatch: GraphThemePatch!
}

"""The output of our update `GraphTheme` mutation."""
type UpdateGraphThemePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GraphTheme` that was updated by this mutation."""
  graphTheme: GraphTheme

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `GraphTheme`. May be used by Relay 1."""
  graphThemeEdge(
    """The method to use when ordering `GraphTheme`."""
    orderBy: [GraphThemesOrderBy!] = PRIMARY_KEY_ASC
  ): GraphThemesEdge
}

"""All input for the `updateGroupByGroupid` mutation."""
input UpdateGroupByGroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  groupPatch: GroupPatch!
  groupid: BigInt!
}

"""All input for the `updateGroupDiscoveryByGroupid` mutation."""
input UpdateGroupDiscoveryByGroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupDiscovery` being updated.
  """
  groupDiscoveryPatch: GroupDiscoveryPatch!
  groupid: BigInt!
}

"""All input for the `updateGroupDiscovery` mutation."""
input UpdateGroupDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupDiscovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupDiscovery` being updated.
  """
  groupDiscoveryPatch: GroupDiscoveryPatch!
}

"""The output of our update `GroupDiscovery` mutation."""
type UpdateGroupDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupDiscovery` that was updated by this mutation."""
  groupDiscovery: GroupDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Group` that is related to this `GroupDiscovery`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupDiscovery`.
  """
  groupPrototypeByParentGroupPrototypeid: GroupPrototype

  """An edge for our `GroupDiscovery`. May be used by Relay 1."""
  groupDiscoveryEdge(
    """The method to use when ordering `GroupDiscovery`."""
    orderBy: [GroupDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): GroupDiscoveriesEdge
}

"""All input for the `updateGroup` mutation."""
input UpdateGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Group` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Group` being updated.
  """
  groupPatch: GroupPatch!
}

"""The output of our update `Group` mutation."""
type UpdateGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Group` that was updated by this mutation."""
  group: Group

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Group`. May be used by Relay 1."""
  groupEdge(
    """The method to use when ordering `Group`."""
    orderBy: [GroupsOrderBy!] = PRIMARY_KEY_ASC
  ): GroupsEdge
}

"""All input for the `updateGroupPrototypeByGroupPrototypeid` mutation."""
input UpdateGroupPrototypeByGroupPrototypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `GroupPrototype` being updated.
  """
  groupPrototypePatch: GroupPrototypePatch!
  groupPrototypeid: BigInt!
}

"""All input for the `updateGroupPrototype` mutation."""
input UpdateGroupPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `GroupPrototype` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `GroupPrototype` being updated.
  """
  groupPrototypePatch: GroupPrototypePatch!
}

"""The output of our update `GroupPrototype` mutation."""
type UpdateGroupPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `GroupPrototype` that was updated by this mutation."""
  groupPrototype: GroupPrototype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `GroupPrototype`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `GroupPrototype`."""
  groupByGroupid: Group

  """
  Reads a single `GroupPrototype` that is related to this `GroupPrototype`.
  """
  groupPrototypeByTemplateid: GroupPrototype

  """An edge for our `GroupPrototype`. May be used by Relay 1."""
  groupPrototypeEdge(
    """The method to use when ordering `GroupPrototype`."""
    orderBy: [GroupPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): GroupPrototypesEdge
}

"""All input for the `updateHostByHostid` mutation."""
input UpdateHostByHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Host` being updated.
  """
  hostPatch: HostPatch!
  hostid: BigInt!
}

"""All input for the `updateHostDiscoveryByHostid` mutation."""
input UpdateHostDiscoveryByHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HostDiscovery` being updated.
  """
  hostDiscoveryPatch: HostDiscoveryPatch!
  hostid: BigInt!
}

"""All input for the `updateHostDiscovery` mutation."""
input UpdateHostDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostDiscovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HostDiscovery` being updated.
  """
  hostDiscoveryPatch: HostDiscoveryPatch!
}

"""The output of our update `HostDiscovery` mutation."""
type UpdateHostDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostDiscovery` that was updated by this mutation."""
  hostDiscovery: HostDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostDiscovery`."""
  hostByParentHostid: Host

  """Reads a single `Item` that is related to this `HostDiscovery`."""
  itemByParentItemid: Item

  """An edge for our `HostDiscovery`. May be used by Relay 1."""
  hostDiscoveryEdge(
    """The method to use when ordering `HostDiscovery`."""
    orderBy: [HostDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): HostDiscoveriesEdge
}

"""All input for the `updateHost` mutation."""
input UpdateHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Host` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Host` being updated.
  """
  hostPatch: HostPatch!
}

"""All input for the `updateHostInventoryByHostid` mutation."""
input UpdateHostInventoryByHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HostInventory` being updated.
  """
  hostInventoryPatch: HostInventoryPatch!
  hostid: BigInt!
}

"""All input for the `updateHostInventory` mutation."""
input UpdateHostInventoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostInventory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HostInventory` being updated.
  """
  hostInventoryPatch: HostInventoryPatch!
}

"""The output of our update `HostInventory` mutation."""
type UpdateHostInventoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostInventory` that was updated by this mutation."""
  hostInventory: HostInventory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostInventory`."""
  hostByHostid: Host

  """An edge for our `HostInventory`. May be used by Relay 1."""
  hostInventoryEdge(
    """The method to use when ordering `HostInventory`."""
    orderBy: [HostInventoriesOrderBy!] = PRIMARY_KEY_ASC
  ): HostInventoriesEdge
}

"""All input for the `updateHostmacroByHostmacroid` mutation."""
input UpdateHostmacroByHostmacroidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Hostmacro` being updated.
  """
  hostmacroPatch: HostmacroPatch!
  hostmacroid: BigInt!
}

"""All input for the `updateHostmacro` mutation."""
input UpdateHostmacroInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Hostmacro` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Hostmacro` being updated.
  """
  hostmacroPatch: HostmacroPatch!
}

"""The output of our update `Hostmacro` mutation."""
type UpdateHostmacroPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Hostmacro` that was updated by this mutation."""
  hostmacro: Hostmacro

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Hostmacro`."""
  hostByHostid: Host

  """An edge for our `Hostmacro`. May be used by Relay 1."""
  hostmacroEdge(
    """The method to use when ordering `Hostmacro`."""
    orderBy: [HostmacrosOrderBy!] = PRIMARY_KEY_ASC
  ): HostmacrosEdge
}

"""The output of our update `Host` mutation."""
type UpdateHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Host` that was updated by this mutation."""
  host: Host

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Host`."""
  hostByProxyHostid: Host

  """Reads a single `Maintenance` that is related to this `Host`."""
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `Host`."""
  hostByTemplateid: Host

  """An edge for our `Host`. May be used by Relay 1."""
  hostEdge(
    """The method to use when ordering `Host`."""
    orderBy: [HostsOrderBy!] = PRIMARY_KEY_ASC
  ): HostsEdge
}

"""All input for the `updateHostsGroupByHostgroupid` mutation."""
input UpdateHostsGroupByHostgroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HostsGroup` being updated.
  """
  hostsGroupPatch: HostsGroupPatch!
  hostgroupid: BigInt!
}

"""All input for the `updateHostsGroup` mutation."""
input UpdateHostsGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostsGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HostsGroup` being updated.
  """
  hostsGroupPatch: HostsGroupPatch!
}

"""The output of our update `HostsGroup` mutation."""
type UpdateHostsGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostsGroup` that was updated by this mutation."""
  hostsGroup: HostsGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostsGroup`."""
  hostByHostid: Host

  """Reads a single `Group` that is related to this `HostsGroup`."""
  groupByGroupid: Group

  """An edge for our `HostsGroup`. May be used by Relay 1."""
  hostsGroupEdge(
    """The method to use when ordering `HostsGroup`."""
    orderBy: [HostsGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): HostsGroupsEdge
}

"""All input for the `updateHostsTemplateByHosttemplateid` mutation."""
input UpdateHostsTemplateByHosttemplateidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `HostsTemplate` being updated.
  """
  hostsTemplatePatch: HostsTemplatePatch!
  hosttemplateid: BigInt!
}

"""All input for the `updateHostsTemplate` mutation."""
input UpdateHostsTemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `HostsTemplate` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `HostsTemplate` being updated.
  """
  hostsTemplatePatch: HostsTemplatePatch!
}

"""The output of our update `HostsTemplate` mutation."""
type UpdateHostsTemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `HostsTemplate` that was updated by this mutation."""
  hostsTemplate: HostsTemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByHostid: Host

  """Reads a single `Host` that is related to this `HostsTemplate`."""
  hostByTemplateid: Host

  """An edge for our `HostsTemplate`. May be used by Relay 1."""
  hostsTemplateEdge(
    """The method to use when ordering `HostsTemplate`."""
    orderBy: [HostsTemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): HostsTemplatesEdge
}

"""All input for the `updateHousekeeperByHousekeeperid` mutation."""
input UpdateHousekeeperByHousekeeperidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Housekeeper` being updated.
  """
  housekeeperPatch: HousekeeperPatch!
  housekeeperid: BigInt!
}

"""All input for the `updateHousekeeper` mutation."""
input UpdateHousekeeperInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Housekeeper` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Housekeeper` being updated.
  """
  housekeeperPatch: HousekeeperPatch!
}

"""The output of our update `Housekeeper` mutation."""
type UpdateHousekeeperPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Housekeeper` that was updated by this mutation."""
  housekeeper: Housekeeper

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Housekeeper`. May be used by Relay 1."""
  housekeeperEdge(
    """The method to use when ordering `Housekeeper`."""
    orderBy: [HousekeepersOrderBy!] = PRIMARY_KEY_ASC
  ): HousekeepersEdge
}

"""All input for the `updateHttpstepByHttpstepid` mutation."""
input UpdateHttpstepByHttpstepidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Httpstep` being updated.
  """
  httpstepPatch: HttpstepPatch!
  httpstepid: BigInt!
}

"""All input for the `updateHttpstep` mutation."""
input UpdateHttpstepInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httpstep` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Httpstep` being updated.
  """
  httpstepPatch: HttpstepPatch!
}

"""All input for the `updateHttpstepitemByHttpstepitemid` mutation."""
input UpdateHttpstepitemByHttpstepitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Httpstepitem` being updated.
  """
  httpstepitemPatch: HttpstepitemPatch!
  httpstepitemid: BigInt!
}

"""All input for the `updateHttpstepitem` mutation."""
input UpdateHttpstepitemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httpstepitem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Httpstepitem` being updated.
  """
  httpstepitemPatch: HttpstepitemPatch!
}

"""The output of our update `Httpstepitem` mutation."""
type UpdateHttpstepitemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httpstepitem` that was updated by this mutation."""
  httpstepitem: Httpstepitem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httpstep` that is related to this `Httpstepitem`."""
  httpstepByHttpstepid: Httpstep

  """Reads a single `Item` that is related to this `Httpstepitem`."""
  itemByItemid: Item

  """An edge for our `Httpstepitem`. May be used by Relay 1."""
  httpstepitemEdge(
    """The method to use when ordering `Httpstepitem`."""
    orderBy: [HttpstepitemsOrderBy!] = PRIMARY_KEY_ASC
  ): HttpstepitemsEdge
}

"""The output of our update `Httpstep` mutation."""
type UpdateHttpstepPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httpstep` that was updated by this mutation."""
  httpstep: Httpstep

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httptest` that is related to this `Httpstep`."""
  httptestByHttptestid: Httptest

  """An edge for our `Httpstep`. May be used by Relay 1."""
  httpstepEdge(
    """The method to use when ordering `Httpstep`."""
    orderBy: [HttpstepsOrderBy!] = PRIMARY_KEY_ASC
  ): HttpstepsEdge
}

"""All input for the `updateHttptestByHttptestid` mutation."""
input UpdateHttptestByHttptestidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Httptest` being updated.
  """
  httptestPatch: HttptestPatch!
  httptestid: BigInt!
}

"""All input for the `updateHttptest` mutation."""
input UpdateHttptestInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httptest` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Httptest` being updated.
  """
  httptestPatch: HttptestPatch!
}

"""All input for the `updateHttptestitemByHttptestitemid` mutation."""
input UpdateHttptestitemByHttptestitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Httptestitem` being updated.
  """
  httptestitemPatch: HttptestitemPatch!
  httptestitemid: BigInt!
}

"""All input for the `updateHttptestitem` mutation."""
input UpdateHttptestitemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Httptestitem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Httptestitem` being updated.
  """
  httptestitemPatch: HttptestitemPatch!
}

"""The output of our update `Httptestitem` mutation."""
type UpdateHttptestitemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httptestitem` that was updated by this mutation."""
  httptestitem: Httptestitem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Httptest` that is related to this `Httptestitem`."""
  httptestByHttptestid: Httptest

  """Reads a single `Item` that is related to this `Httptestitem`."""
  itemByItemid: Item

  """An edge for our `Httptestitem`. May be used by Relay 1."""
  httptestitemEdge(
    """The method to use when ordering `Httptestitem`."""
    orderBy: [HttptestitemsOrderBy!] = PRIMARY_KEY_ASC
  ): HttptestitemsEdge
}

"""The output of our update `Httptest` mutation."""
type UpdateHttptestPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Httptest` that was updated by this mutation."""
  httptest: Httptest

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Application` that is related to this `Httptest`."""
  applicationByApplicationid: Application

  """Reads a single `Host` that is related to this `Httptest`."""
  hostByHostid: Host

  """Reads a single `Httptest` that is related to this `Httptest`."""
  httptestByTemplateid: Httptest

  """An edge for our `Httptest`. May be used by Relay 1."""
  httptestEdge(
    """The method to use when ordering `Httptest`."""
    orderBy: [HttptestsOrderBy!] = PRIMARY_KEY_ASC
  ): HttptestsEdge
}

"""All input for the `updateIconMapByIconmapid` mutation."""
input UpdateIconMapByIconmapidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `IconMap` being updated.
  """
  iconMapPatch: IconMapPatch!
  iconmapid: BigInt!
}

"""All input for the `updateIconMap` mutation."""
input UpdateIconMapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IconMap` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `IconMap` being updated.
  """
  iconMapPatch: IconMapPatch!
}

"""The output of our update `IconMap` mutation."""
type UpdateIconMapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IconMap` that was updated by this mutation."""
  iconMap: IconMap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `IconMap`."""
  imageByDefaultIconid: Image

  """An edge for our `IconMap`. May be used by Relay 1."""
  iconMapEdge(
    """The method to use when ordering `IconMap`."""
    orderBy: [IconMapsOrderBy!] = PRIMARY_KEY_ASC
  ): IconMapsEdge
}

"""All input for the `updateIconMappingByIconmappingid` mutation."""
input UpdateIconMappingByIconmappingidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `IconMapping` being updated.
  """
  iconMappingPatch: IconMappingPatch!
  iconmappingid: BigInt!
}

"""All input for the `updateIconMapping` mutation."""
input UpdateIconMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `IconMapping` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `IconMapping` being updated.
  """
  iconMappingPatch: IconMappingPatch!
}

"""The output of our update `IconMapping` mutation."""
type UpdateIconMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `IconMapping` that was updated by this mutation."""
  iconMapping: IconMapping

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `IconMap` that is related to this `IconMapping`."""
  iconMapByIconmapid: IconMap

  """Reads a single `Image` that is related to this `IconMapping`."""
  imageByIconid: Image

  """An edge for our `IconMapping`. May be used by Relay 1."""
  iconMappingEdge(
    """The method to use when ordering `IconMapping`."""
    orderBy: [IconMappingsOrderBy!] = PRIMARY_KEY_ASC
  ): IconMappingsEdge
}

"""All input for the `updateIdByTableNameAndFieldName` mutation."""
input UpdateIdByTableNameAndFieldNameInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Id` being updated.
  """
  idPatch: IdPatch!
  tableName: String!
  fieldName: String!
}

"""All input for the `updateId` mutation."""
input UpdateIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Id` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Id` being updated.
  """
  idPatch: IdPatch!
}

"""The output of our update `Id` mutation."""
type UpdateIdPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Id` that was updated by this mutation."""
  id: Id

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Id`. May be used by Relay 1."""
  idEdge(
    """The method to use when ordering `Id`."""
    orderBy: [IdsOrderBy!] = PRIMARY_KEY_ASC
  ): IdsEdge
}

"""All input for the `updateImageByImageid` mutation."""
input UpdateImageByImageidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  imagePatch: ImagePatch!
  imageid: BigInt!
}

"""All input for the `updateImage` mutation."""
input UpdateImageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Image` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Image` being updated.
  """
  imagePatch: ImagePatch!
}

"""The output of our update `Image` mutation."""
type UpdateImagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Image` that was updated by this mutation."""
  image: Image

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Image`. May be used by Relay 1."""
  imageEdge(
    """The method to use when ordering `Image`."""
    orderBy: [ImagesOrderBy!] = PRIMARY_KEY_ASC
  ): ImagesEdge
}

"""All input for the `updateInterfaceByInterfaceid` mutation."""
input UpdateInterfaceByInterfaceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Interface` being updated.
  """
  interfacePatch: InterfacePatch!
  interfaceid: BigInt!
}

"""All input for the `updateInterfaceDiscoveryByInterfaceid` mutation."""
input UpdateInterfaceDiscoveryByInterfaceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `InterfaceDiscovery` being updated.
  """
  interfaceDiscoveryPatch: InterfaceDiscoveryPatch!
  interfaceid: BigInt!
}

"""All input for the `updateInterfaceDiscovery` mutation."""
input UpdateInterfaceDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `InterfaceDiscovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `InterfaceDiscovery` being updated.
  """
  interfaceDiscoveryPatch: InterfaceDiscoveryPatch!
}

"""The output of our update `InterfaceDiscovery` mutation."""
type UpdateInterfaceDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `InterfaceDiscovery` that was updated by this mutation."""
  interfaceDiscovery: InterfaceDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByInterfaceid: Interface

  """
  Reads a single `Interface` that is related to this `InterfaceDiscovery`.
  """
  interfaceByParentInterfaceid: Interface

  """An edge for our `InterfaceDiscovery`. May be used by Relay 1."""
  interfaceDiscoveryEdge(
    """The method to use when ordering `InterfaceDiscovery`."""
    orderBy: [InterfaceDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): InterfaceDiscoveriesEdge
}

"""All input for the `updateInterface` mutation."""
input UpdateInterfaceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Interface` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Interface` being updated.
  """
  interfacePatch: InterfacePatch!
}

"""The output of our update `Interface` mutation."""
type UpdateInterfacePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Interface` that was updated by this mutation."""
  interface: Interface

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Interface`."""
  hostByHostid: Host

  """An edge for our `Interface`. May be used by Relay 1."""
  interfaceEdge(
    """The method to use when ordering `Interface`."""
    orderBy: [InterfacesOrderBy!] = PRIMARY_KEY_ASC
  ): InterfacesEdge
}

"""
All input for the `updateItemApplicationPrototypeByItemApplicationPrototypeid` mutation.
"""
input UpdateItemApplicationPrototypeByItemApplicationPrototypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItemApplicationPrototype` being updated.
  """
  itemApplicationPrototypePatch: ItemApplicationPrototypePatch!
  itemApplicationPrototypeid: BigInt!
}

"""All input for the `updateItemApplicationPrototype` mutation."""
input UpdateItemApplicationPrototypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemApplicationPrototype` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItemApplicationPrototype` being updated.
  """
  itemApplicationPrototypePatch: ItemApplicationPrototypePatch!
}

"""The output of our update `ItemApplicationPrototype` mutation."""
type UpdateItemApplicationPrototypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemApplicationPrototype` that was updated by this mutation."""
  itemApplicationPrototype: ItemApplicationPrototype

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `ApplicationPrototype` that is related to this `ItemApplicationPrototype`.
  """
  applicationPrototypeByApplicationPrototypeid: ApplicationPrototype

  """
  Reads a single `Item` that is related to this `ItemApplicationPrototype`.
  """
  itemByItemid: Item

  """An edge for our `ItemApplicationPrototype`. May be used by Relay 1."""
  itemApplicationPrototypeEdge(
    """The method to use when ordering `ItemApplicationPrototype`."""
    orderBy: [ItemApplicationPrototypesOrderBy!] = PRIMARY_KEY_ASC
  ): ItemApplicationPrototypesEdge
}

"""All input for the `updateItemByItemid` mutation."""
input UpdateItemByItemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  itemPatch: ItemPatch!
  itemid: BigInt!
}

"""
All input for the `updateItemConditionOrigByItemConditionid` mutation.
"""
input UpdateItemConditionOrigByItemConditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItemConditionOrig` being updated.
  """
  itemConditionOrigPatch: ItemConditionOrigPatch!
  itemConditionid: BigInt!
}

"""All input for the `updateItemConditionOrig` mutation."""
input UpdateItemConditionOrigInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemConditionOrig` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItemConditionOrig` being updated.
  """
  itemConditionOrigPatch: ItemConditionOrigPatch!
}

"""The output of our update `ItemConditionOrig` mutation."""
type UpdateItemConditionOrigPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemConditionOrig` that was updated by this mutation."""
  itemConditionOrig: ItemConditionOrig

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ItemConditionOrig`."""
  itemByItemid: Item

  """An edge for our `ItemConditionOrig`. May be used by Relay 1."""
  itemConditionOrigEdge(
    """The method to use when ordering `ItemConditionOrig`."""
    orderBy: [ItemConditionOrigsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemConditionOrigsEdge
}

"""All input for the `updateItemDiscoveryByItemdiscoveryid` mutation."""
input UpdateItemDiscoveryByItemdiscoveryidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItemDiscovery` being updated.
  """
  itemDiscoveryPatch: ItemDiscoveryPatch!
  itemdiscoveryid: BigInt!
}

"""All input for the `updateItemDiscovery` mutation."""
input UpdateItemDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemDiscovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItemDiscovery` being updated.
  """
  itemDiscoveryPatch: ItemDiscoveryPatch!
}

"""The output of our update `ItemDiscovery` mutation."""
type UpdateItemDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemDiscovery` that was updated by this mutation."""
  itemDiscovery: ItemDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByItemid: Item

  """Reads a single `Item` that is related to this `ItemDiscovery`."""
  itemByParentItemid: Item

  """An edge for our `ItemDiscovery`. May be used by Relay 1."""
  itemDiscoveryEdge(
    """The method to use when ordering `ItemDiscovery`."""
    orderBy: [ItemDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): ItemDiscoveriesEdge
}

"""All input for the `updateItem` mutation."""
input UpdateItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Item` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Item` being updated.
  """
  itemPatch: ItemPatch!
}

"""The output of our update `Item` mutation."""
type UpdateItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Item` that was updated by this mutation."""
  item: Item

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Item`."""
  hostByHostid: Host

  """Reads a single `Item` that is related to this `Item`."""
  itemByTemplateid: Item

  """Reads a single `Valuemap` that is related to this `Item`."""
  valuemapByValuemapid: Valuemap

  """Reads a single `Interface` that is related to this `Item`."""
  interfaceByInterfaceid: Interface

  """An edge for our `Item`. May be used by Relay 1."""
  itemEdge(
    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemsEdge
}

"""All input for the `updateItemsApplicationByItemappid` mutation."""
input UpdateItemsApplicationByItemappidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ItemsApplication` being updated.
  """
  itemsApplicationPatch: ItemsApplicationPatch!
  itemappid: BigInt!
}

"""All input for the `updateItemsApplication` mutation."""
input UpdateItemsApplicationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ItemsApplication` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ItemsApplication` being updated.
  """
  itemsApplicationPatch: ItemsApplicationPatch!
}

"""The output of our update `ItemsApplication` mutation."""
type UpdateItemsApplicationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ItemsApplication` that was updated by this mutation."""
  itemsApplication: ItemsApplication

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Application` that is related to this `ItemsApplication`.
  """
  applicationByApplicationid: Application

  """Reads a single `Item` that is related to this `ItemsApplication`."""
  itemByItemid: Item

  """An edge for our `ItemsApplication`. May be used by Relay 1."""
  itemsApplicationEdge(
    """The method to use when ordering `ItemsApplication`."""
    orderBy: [ItemsApplicationsOrderBy!] = PRIMARY_KEY_ASC
  ): ItemsApplicationsEdge
}

"""All input for the `updateMaintenanceByMaintenanceid` mutation."""
input UpdateMaintenanceByMaintenanceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Maintenance` being updated.
  """
  maintenancePatch: MaintenancePatch!
  maintenanceid: BigInt!
}

"""All input for the `updateMaintenance` mutation."""
input UpdateMaintenanceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Maintenance` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Maintenance` being updated.
  """
  maintenancePatch: MaintenancePatch!
}

"""The output of our update `Maintenance` mutation."""
type UpdateMaintenancePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Maintenance` that was updated by this mutation."""
  maintenance: Maintenance

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Maintenance`. May be used by Relay 1."""
  maintenanceEdge(
    """The method to use when ordering `Maintenance`."""
    orderBy: [MaintenancesOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesEdge
}

"""
All input for the `updateMaintenancesGroupByMaintenanceGroupid` mutation.
"""
input UpdateMaintenancesGroupByMaintenanceGroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenancesGroup` being updated.
  """
  maintenancesGroupPatch: MaintenancesGroupPatch!
  maintenanceGroupid: BigInt!
}

"""All input for the `updateMaintenancesGroup` mutation."""
input UpdateMaintenancesGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenancesGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MaintenancesGroup` being updated.
  """
  maintenancesGroupPatch: MaintenancesGroupPatch!
}

"""The output of our update `MaintenancesGroup` mutation."""
type UpdateMaintenancesGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesGroup` that was updated by this mutation."""
  maintenancesGroup: MaintenancesGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesGroup`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Group` that is related to this `MaintenancesGroup`."""
  groupByGroupid: Group

  """An edge for our `MaintenancesGroup`. May be used by Relay 1."""
  maintenancesGroupEdge(
    """The method to use when ordering `MaintenancesGroup`."""
    orderBy: [MaintenancesGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesGroupsEdge
}

"""
All input for the `updateMaintenancesHostByMaintenanceHostid` mutation.
"""
input UpdateMaintenancesHostByMaintenanceHostidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenancesHost` being updated.
  """
  maintenancesHostPatch: MaintenancesHostPatch!
  maintenanceHostid: BigInt!
}

"""All input for the `updateMaintenancesHost` mutation."""
input UpdateMaintenancesHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenancesHost` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MaintenancesHost` being updated.
  """
  maintenancesHostPatch: MaintenancesHostPatch!
}

"""The output of our update `MaintenancesHost` mutation."""
type UpdateMaintenancesHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesHost` that was updated by this mutation."""
  maintenancesHost: MaintenancesHost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesHost`.
  """
  maintenanceByMaintenanceid: Maintenance

  """Reads a single `Host` that is related to this `MaintenancesHost`."""
  hostByHostid: Host

  """An edge for our `MaintenancesHost`. May be used by Relay 1."""
  maintenancesHostEdge(
    """The method to use when ordering `MaintenancesHost`."""
    orderBy: [MaintenancesHostsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesHostsEdge
}

"""
All input for the `updateMaintenancesWindowByMaintenanceTimeperiodid` mutation.
"""
input UpdateMaintenancesWindowByMaintenanceTimeperiodidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MaintenancesWindow` being updated.
  """
  maintenancesWindowPatch: MaintenancesWindowPatch!
  maintenanceTimeperiodid: BigInt!
}

"""All input for the `updateMaintenancesWindow` mutation."""
input UpdateMaintenancesWindowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MaintenancesWindow` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MaintenancesWindow` being updated.
  """
  maintenancesWindowPatch: MaintenancesWindowPatch!
}

"""The output of our update `MaintenancesWindow` mutation."""
type UpdateMaintenancesWindowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MaintenancesWindow` that was updated by this mutation."""
  maintenancesWindow: MaintenancesWindow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `Maintenance` that is related to this `MaintenancesWindow`.
  """
  maintenanceByMaintenanceid: Maintenance

  """
  Reads a single `Timeperiod` that is related to this `MaintenancesWindow`.
  """
  timeperiodByTimeperiodid: Timeperiod

  """An edge for our `MaintenancesWindow`. May be used by Relay 1."""
  maintenancesWindowEdge(
    """The method to use when ordering `MaintenancesWindow`."""
    orderBy: [MaintenancesWindowsOrderBy!] = PRIMARY_KEY_ASC
  ): MaintenancesWindowsEdge
}

"""All input for the `updateMappingByMappingid` mutation."""
input UpdateMappingByMappingidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Mapping` being updated.
  """
  mappingPatch: MappingPatch!
  mappingid: BigInt!
}

"""All input for the `updateMapping` mutation."""
input UpdateMappingInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Mapping` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Mapping` being updated.
  """
  mappingPatch: MappingPatch!
}

"""The output of our update `Mapping` mutation."""
type UpdateMappingPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Mapping` that was updated by this mutation."""
  mapping: Mapping

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Valuemap` that is related to this `Mapping`."""
  valuemapByValuemapid: Valuemap

  """An edge for our `Mapping`. May be used by Relay 1."""
  mappingEdge(
    """The method to use when ordering `Mapping`."""
    orderBy: [MappingsOrderBy!] = PRIMARY_KEY_ASC
  ): MappingsEdge
}

"""All input for the `updateMediaByMediaid` mutation."""
input UpdateMediaByMediaidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  mediaPatch: MediaPatch!
  mediaid: BigInt!
}

"""All input for the `updateMedia` mutation."""
input UpdateMediaInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Media` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Media` being updated.
  """
  mediaPatch: MediaPatch!
}

"""The output of our update `Media` mutation."""
type UpdateMediaPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Media` that was updated by this mutation."""
  media: Media

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Media`."""
  userByUserid: User

  """Reads a single `MediaType` that is related to this `Media`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Media`. May be used by Relay 1."""
  mediaEdge(
    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = PRIMARY_KEY_ASC
  ): MediaEdge
}

"""All input for the `updateMediaTypeByMediatypeid` mutation."""
input UpdateMediaTypeByMediatypeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MediaType` being updated.
  """
  mediaTypePatch: MediaTypePatch!
  mediatypeid: BigInt!
}

"""All input for the `updateMediaType` mutation."""
input UpdateMediaTypeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MediaType` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `MediaType` being updated.
  """
  mediaTypePatch: MediaTypePatch!
}

"""The output of our update `MediaType` mutation."""
type UpdateMediaTypePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MediaType` that was updated by this mutation."""
  mediaType: MediaType

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MediaType`. May be used by Relay 1."""
  mediaTypeEdge(
    """The method to use when ordering `MediaType`."""
    orderBy: [MediaTypesOrderBy!] = PRIMARY_KEY_ASC
  ): MediaTypesEdge
}

"""All input for the `updateOpcommandByOperationid` mutation."""
input UpdateOpcommandByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Opcommand` being updated.
  """
  opcommandPatch: OpcommandPatch!
  operationid: BigInt!
}

"""All input for the `updateOpcommandGrpByOpcommandGrpid` mutation."""
input UpdateOpcommandGrpByOpcommandGrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OpcommandGrp` being updated.
  """
  opcommandGrpPatch: OpcommandGrpPatch!
  opcommandGrpid: BigInt!
}

"""All input for the `updateOpcommandGrp` mutation."""
input UpdateOpcommandGrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpcommandGrp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OpcommandGrp` being updated.
  """
  opcommandGrpPatch: OpcommandGrpPatch!
}

"""The output of our update `OpcommandGrp` mutation."""
type UpdateOpcommandGrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpcommandGrp` that was updated by this mutation."""
  opcommandGrp: OpcommandGrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpcommandGrp`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `OpcommandGrp`."""
  groupByGroupid: Group

  """An edge for our `OpcommandGrp`. May be used by Relay 1."""
  opcommandGrpEdge(
    """The method to use when ordering `OpcommandGrp`."""
    orderBy: [OpcommandGrpsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandGrpsEdge
}

"""All input for the `updateOpcommandHstByOpcommandHstid` mutation."""
input UpdateOpcommandHstByOpcommandHstidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OpcommandHst` being updated.
  """
  opcommandHstPatch: OpcommandHstPatch!
  opcommandHstid: BigInt!
}

"""All input for the `updateOpcommandHst` mutation."""
input UpdateOpcommandHstInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpcommandHst` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OpcommandHst` being updated.
  """
  opcommandHstPatch: OpcommandHstPatch!
}

"""The output of our update `OpcommandHst` mutation."""
type UpdateOpcommandHstPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpcommandHst` that was updated by this mutation."""
  opcommandHst: OpcommandHst

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpcommandHst`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `OpcommandHst`."""
  hostByHostid: Host

  """An edge for our `OpcommandHst`. May be used by Relay 1."""
  opcommandHstEdge(
    """The method to use when ordering `OpcommandHst`."""
    orderBy: [OpcommandHstsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandHstsEdge
}

"""All input for the `updateOpcommand` mutation."""
input UpdateOpcommandInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opcommand` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Opcommand` being updated.
  """
  opcommandPatch: OpcommandPatch!
}

"""The output of our update `Opcommand` mutation."""
type UpdateOpcommandPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opcommand` that was updated by this mutation."""
  opcommand: Opcommand

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opcommand`."""
  operationByOperationid: Operation

  """Reads a single `Script` that is related to this `Opcommand`."""
  scriptByScriptid: Script

  """An edge for our `Opcommand`. May be used by Relay 1."""
  opcommandEdge(
    """The method to use when ordering `Opcommand`."""
    orderBy: [OpcommandsOrderBy!] = PRIMARY_KEY_ASC
  ): OpcommandsEdge
}

"""All input for the `updateOpconditionByOpconditionid` mutation."""
input UpdateOpconditionByOpconditionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Opcondition` being updated.
  """
  opconditionPatch: OpconditionPatch!
  opconditionid: BigInt!
}

"""All input for the `updateOpcondition` mutation."""
input UpdateOpconditionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opcondition` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Opcondition` being updated.
  """
  opconditionPatch: OpconditionPatch!
}

"""The output of our update `Opcondition` mutation."""
type UpdateOpconditionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opcondition` that was updated by this mutation."""
  opcondition: Opcondition

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opcondition`."""
  operationByOperationid: Operation

  """An edge for our `Opcondition`. May be used by Relay 1."""
  opconditionEdge(
    """The method to use when ordering `Opcondition`."""
    orderBy: [OpconditionsOrderBy!] = PRIMARY_KEY_ASC
  ): OpconditionsEdge
}

"""All input for the `updateOperationByOperationid` mutation."""
input UpdateOperationByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Operation` being updated.
  """
  operationPatch: OperationPatch!
  operationid: BigInt!
}

"""All input for the `updateOperation` mutation."""
input UpdateOperationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Operation` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Operation` being updated.
  """
  operationPatch: OperationPatch!
}

"""The output of our update `Operation` mutation."""
type UpdateOperationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Operation` that was updated by this mutation."""
  operation: Operation

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Action` that is related to this `Operation`."""
  actionByActionid: Action

  """An edge for our `Operation`. May be used by Relay 1."""
  operationEdge(
    """The method to use when ordering `Operation`."""
    orderBy: [OperationsOrderBy!] = PRIMARY_KEY_ASC
  ): OperationsEdge
}

"""All input for the `updateOpgroupByOpgroupid` mutation."""
input UpdateOpgroupByOpgroupidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Opgroup` being updated.
  """
  opgroupPatch: OpgroupPatch!
  opgroupid: BigInt!
}

"""All input for the `updateOpgroup` mutation."""
input UpdateOpgroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opgroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Opgroup` being updated.
  """
  opgroupPatch: OpgroupPatch!
}

"""The output of our update `Opgroup` mutation."""
type UpdateOpgroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opgroup` that was updated by this mutation."""
  opgroup: Opgroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opgroup`."""
  operationByOperationid: Operation

  """Reads a single `Group` that is related to this `Opgroup`."""
  groupByGroupid: Group

  """An edge for our `Opgroup`. May be used by Relay 1."""
  opgroupEdge(
    """The method to use when ordering `Opgroup`."""
    orderBy: [OpgroupsOrderBy!] = PRIMARY_KEY_ASC
  ): OpgroupsEdge
}

"""All input for the `updateOpinventoryByOperationid` mutation."""
input UpdateOpinventoryByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Opinventory` being updated.
  """
  opinventoryPatch: OpinventoryPatch!
  operationid: BigInt!
}

"""All input for the `updateOpinventory` mutation."""
input UpdateOpinventoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opinventory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Opinventory` being updated.
  """
  opinventoryPatch: OpinventoryPatch!
}

"""The output of our update `Opinventory` mutation."""
type UpdateOpinventoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opinventory` that was updated by this mutation."""
  opinventory: Opinventory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opinventory`."""
  operationByOperationid: Operation

  """An edge for our `Opinventory`. May be used by Relay 1."""
  opinventoryEdge(
    """The method to use when ordering `Opinventory`."""
    orderBy: [OpinventoriesOrderBy!] = PRIMARY_KEY_ASC
  ): OpinventoriesEdge
}

"""All input for the `updateOpmessageByOperationid` mutation."""
input UpdateOpmessageByOperationidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Opmessage` being updated.
  """
  opmessagePatch: OpmessagePatch!
  operationid: BigInt!
}

"""All input for the `updateOpmessageGrpByOpmessageGrpid` mutation."""
input UpdateOpmessageGrpByOpmessageGrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OpmessageGrp` being updated.
  """
  opmessageGrpPatch: OpmessageGrpPatch!
  opmessageGrpid: BigInt!
}

"""All input for the `updateOpmessageGrp` mutation."""
input UpdateOpmessageGrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpmessageGrp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OpmessageGrp` being updated.
  """
  opmessageGrpPatch: OpmessageGrpPatch!
}

"""The output of our update `OpmessageGrp` mutation."""
type UpdateOpmessageGrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpmessageGrp` that was updated by this mutation."""
  opmessageGrp: OpmessageGrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpmessageGrp`."""
  operationByOperationid: Operation

  """Reads a single `Usrgrp` that is related to this `OpmessageGrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `OpmessageGrp`. May be used by Relay 1."""
  opmessageGrpEdge(
    """The method to use when ordering `OpmessageGrp`."""
    orderBy: [OpmessageGrpsOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessageGrpsEdge
}

"""All input for the `updateOpmessage` mutation."""
input UpdateOpmessageInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Opmessage` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Opmessage` being updated.
  """
  opmessagePatch: OpmessagePatch!
}

"""The output of our update `Opmessage` mutation."""
type UpdateOpmessagePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Opmessage` that was updated by this mutation."""
  opmessage: Opmessage

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Opmessage`."""
  operationByOperationid: Operation

  """Reads a single `MediaType` that is related to this `Opmessage`."""
  mediaTypeByMediatypeid: MediaType

  """An edge for our `Opmessage`. May be used by Relay 1."""
  opmessageEdge(
    """The method to use when ordering `Opmessage`."""
    orderBy: [OpmessagesOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessagesEdge
}

"""All input for the `updateOpmessageUsrByOpmessageUsrid` mutation."""
input UpdateOpmessageUsrByOpmessageUsridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `OpmessageUsr` being updated.
  """
  opmessageUsrPatch: OpmessageUsrPatch!
  opmessageUsrid: BigInt!
}

"""All input for the `updateOpmessageUsr` mutation."""
input UpdateOpmessageUsrInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `OpmessageUsr` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `OpmessageUsr` being updated.
  """
  opmessageUsrPatch: OpmessageUsrPatch!
}

"""The output of our update `OpmessageUsr` mutation."""
type UpdateOpmessageUsrPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `OpmessageUsr` that was updated by this mutation."""
  opmessageUsr: OpmessageUsr

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `OpmessageUsr`."""
  operationByOperationid: Operation

  """Reads a single `User` that is related to this `OpmessageUsr`."""
  userByUserid: User

  """An edge for our `OpmessageUsr`. May be used by Relay 1."""
  opmessageUsrEdge(
    """The method to use when ordering `OpmessageUsr`."""
    orderBy: [OpmessageUsrsOrderBy!] = PRIMARY_KEY_ASC
  ): OpmessageUsrsEdge
}

"""All input for the `updateOptemplateByOptemplateid` mutation."""
input UpdateOptemplateByOptemplateidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Optemplate` being updated.
  """
  optemplatePatch: OptemplatePatch!
  optemplateid: BigInt!
}

"""All input for the `updateOptemplate` mutation."""
input UpdateOptemplateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Optemplate` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Optemplate` being updated.
  """
  optemplatePatch: OptemplatePatch!
}

"""The output of our update `Optemplate` mutation."""
type UpdateOptemplatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Optemplate` that was updated by this mutation."""
  optemplate: Optemplate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Operation` that is related to this `Optemplate`."""
  operationByOperationid: Operation

  """Reads a single `Host` that is related to this `Optemplate`."""
  hostByTemplateid: Host

  """An edge for our `Optemplate`. May be used by Relay 1."""
  optemplateEdge(
    """The method to use when ordering `Optemplate`."""
    orderBy: [OptemplatesOrderBy!] = PRIMARY_KEY_ASC
  ): OptemplatesEdge
}

"""All input for the `updateProblemByEventid` mutation."""
input UpdateProblemByEventidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Problem` being updated.
  """
  problemPatch: ProblemPatch!
  eventid: BigInt!
}

"""All input for the `updateProblem` mutation."""
input UpdateProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Problem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Problem` being updated.
  """
  problemPatch: ProblemPatch!
}

"""The output of our update `Problem` mutation."""
type UpdateProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Problem` that was updated by this mutation."""
  problem: Problem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Event` that is related to this `Problem`."""
  eventByEventid: Event

  """Reads a single `Event` that is related to this `Problem`."""
  eventByREventid: Event

  """An edge for our `Problem`. May be used by Relay 1."""
  problemEdge(
    """The method to use when ordering `Problem`."""
    orderBy: [ProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemsEdge
}

"""All input for the `updateProblemTagByProblemtagid` mutation."""
input UpdateProblemTagByProblemtagidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProblemTag` being updated.
  """
  problemTagPatch: ProblemTagPatch!
  problemtagid: BigInt!
}

"""All input for the `updateProblemTag` mutation."""
input UpdateProblemTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProblemTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProblemTag` being updated.
  """
  problemTagPatch: ProblemTagPatch!
}

"""The output of our update `ProblemTag` mutation."""
type UpdateProblemTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProblemTag` that was updated by this mutation."""
  problemTag: ProblemTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Problem` that is related to this `ProblemTag`."""
  problemByEventid: Problem

  """An edge for our `ProblemTag`. May be used by Relay 1."""
  problemTagEdge(
    """The method to use when ordering `ProblemTag`."""
    orderBy: [ProblemTagsOrderBy!] = PRIMARY_KEY_ASC
  ): ProblemTagsEdge
}

"""All input for the `updateProfileByProfileid` mutation."""
input UpdateProfileByProfileidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  profilePatch: ProfilePatch!
  profileid: BigInt!
}

"""All input for the `updateProfile` mutation."""
input UpdateProfileInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Profile` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Profile` being updated.
  """
  profilePatch: ProfilePatch!
}

"""The output of our update `Profile` mutation."""
type UpdateProfilePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Profile` that was updated by this mutation."""
  profile: Profile

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Profile`."""
  userByUserid: User

  """An edge for our `Profile`. May be used by Relay 1."""
  profileEdge(
    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = PRIMARY_KEY_ASC
  ): ProfilesEdge
}

"""All input for the `updateProxyAutoregHostById` mutation."""
input UpdateProxyAutoregHostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProxyAutoregHost` being updated.
  """
  proxyAutoregHostPatch: ProxyAutoregHostPatch!
  id: BigInt!
}

"""All input for the `updateProxyAutoregHost` mutation."""
input UpdateProxyAutoregHostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyAutoregHost` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProxyAutoregHost` being updated.
  """
  proxyAutoregHostPatch: ProxyAutoregHostPatch!
}

"""The output of our update `ProxyAutoregHost` mutation."""
type UpdateProxyAutoregHostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyAutoregHost` that was updated by this mutation."""
  proxyAutoregHost: ProxyAutoregHost

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyAutoregHost`. May be used by Relay 1."""
  proxyAutoregHostEdge(
    """The method to use when ordering `ProxyAutoregHost`."""
    orderBy: [ProxyAutoregHostsOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyAutoregHostsEdge
}

"""All input for the `updateProxyDhistoryById` mutation."""
input UpdateProxyDhistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProxyDhistory` being updated.
  """
  proxyDhistoryPatch: ProxyDhistoryPatch!
  id: BigInt!
}

"""All input for the `updateProxyDhistory` mutation."""
input UpdateProxyDhistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyDhistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProxyDhistory` being updated.
  """
  proxyDhistoryPatch: ProxyDhistoryPatch!
}

"""The output of our update `ProxyDhistory` mutation."""
type UpdateProxyDhistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyDhistory` that was updated by this mutation."""
  proxyDhistory: ProxyDhistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyDhistory`. May be used by Relay 1."""
  proxyDhistoryEdge(
    """The method to use when ordering `ProxyDhistory`."""
    orderBy: [ProxyDhistoriesOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyDhistoriesEdge
}

"""All input for the `updateProxyHistoryById` mutation."""
input UpdateProxyHistoryByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ProxyHistory` being updated.
  """
  proxyHistoryPatch: ProxyHistoryPatch!
  id: BigInt!
}

"""All input for the `updateProxyHistory` mutation."""
input UpdateProxyHistoryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ProxyHistory` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ProxyHistory` being updated.
  """
  proxyHistoryPatch: ProxyHistoryPatch!
}

"""The output of our update `ProxyHistory` mutation."""
type UpdateProxyHistoryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ProxyHistory` that was updated by this mutation."""
  proxyHistory: ProxyHistory

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `ProxyHistory`. May be used by Relay 1."""
  proxyHistoryEdge(
    """The method to use when ordering `ProxyHistory`."""
    orderBy: [ProxyHistoriesOrderBy!] = PRIMARY_KEY_ASC
  ): ProxyHistoriesEdge
}

"""All input for the `updateRegexpByRegexpid` mutation."""
input UpdateRegexpByRegexpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Regexp` being updated.
  """
  regexpPatch: RegexpPatch!
  regexpid: BigInt!
}

"""All input for the `updateRegexp` mutation."""
input UpdateRegexpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Regexp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Regexp` being updated.
  """
  regexpPatch: RegexpPatch!
}

"""The output of our update `Regexp` mutation."""
type UpdateRegexpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Regexp` that was updated by this mutation."""
  regexp: Regexp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Regexp`. May be used by Relay 1."""
  regexpEdge(
    """The method to use when ordering `Regexp`."""
    orderBy: [RegexpsOrderBy!] = PRIMARY_KEY_ASC
  ): RegexpsEdge
}

"""All input for the `updateRightByRightid` mutation."""
input UpdateRightByRightidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Right` being updated.
  """
  rightPatch: RightPatch!
  rightid: BigInt!
}

"""All input for the `updateRight` mutation."""
input UpdateRightInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Right` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Right` being updated.
  """
  rightPatch: RightPatch!
}

"""The output of our update `Right` mutation."""
type UpdateRightPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Right` that was updated by this mutation."""
  right: Right

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Right`."""
  usrgrpByGroupid: Usrgrp

  """Reads a single `Group` that is related to this `Right`."""
  groupById: Group

  """An edge for our `Right`. May be used by Relay 1."""
  rightEdge(
    """The method to use when ordering `Right`."""
    orderBy: [RightsOrderBy!] = PRIMARY_KEY_ASC
  ): RightsEdge
}

"""All input for the `updateScreenByScreenid` mutation."""
input UpdateScreenByScreenidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Screen` being updated.
  """
  screenPatch: ScreenPatch!
  screenid: BigInt!
}

"""All input for the `updateScreen` mutation."""
input UpdateScreenInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Screen` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Screen` being updated.
  """
  screenPatch: ScreenPatch!
}

"""The output of our update `Screen` mutation."""
type UpdateScreenPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Screen` that was updated by this mutation."""
  screen: Screen

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Host` that is related to this `Screen`."""
  hostByTemplateid: Host

  """Reads a single `User` that is related to this `Screen`."""
  userByUserid: User

  """An edge for our `Screen`. May be used by Relay 1."""
  screenEdge(
    """The method to use when ordering `Screen`."""
    orderBy: [ScreensOrderBy!] = PRIMARY_KEY_ASC
  ): ScreensEdge
}

"""All input for the `updateScreensItemByScreenitemid` mutation."""
input UpdateScreensItemByScreenitemidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ScreensItem` being updated.
  """
  screensItemPatch: ScreensItemPatch!
  screenitemid: BigInt!
}

"""All input for the `updateScreensItem` mutation."""
input UpdateScreensItemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScreensItem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ScreensItem` being updated.
  """
  screensItemPatch: ScreensItemPatch!
}

"""The output of our update `ScreensItem` mutation."""
type UpdateScreensItemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreensItem` that was updated by this mutation."""
  screensItem: ScreensItem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreensItem`."""
  screenByScreenid: Screen

  """An edge for our `ScreensItem`. May be used by Relay 1."""
  screensItemEdge(
    """The method to use when ordering `ScreensItem`."""
    orderBy: [ScreensItemsOrderBy!] = PRIMARY_KEY_ASC
  ): ScreensItemsEdge
}

"""All input for the `updateScreenUserByScreenuserid` mutation."""
input UpdateScreenUserByScreenuseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ScreenUser` being updated.
  """
  screenUserPatch: ScreenUserPatch!
  screenuserid: BigInt!
}

"""All input for the `updateScreenUser` mutation."""
input UpdateScreenUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScreenUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ScreenUser` being updated.
  """
  screenUserPatch: ScreenUserPatch!
}

"""The output of our update `ScreenUser` mutation."""
type UpdateScreenUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreenUser` that was updated by this mutation."""
  screenUser: ScreenUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreenUser`."""
  screenByScreenid: Screen

  """Reads a single `User` that is related to this `ScreenUser`."""
  userByUserid: User

  """An edge for our `ScreenUser`. May be used by Relay 1."""
  screenUserEdge(
    """The method to use when ordering `ScreenUser`."""
    orderBy: [ScreenUsersOrderBy!] = PRIMARY_KEY_ASC
  ): ScreenUsersEdge
}

"""All input for the `updateScreenUsrgrpByScreenusrgrpid` mutation."""
input UpdateScreenUsrgrpByScreenusrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ScreenUsrgrp` being updated.
  """
  screenUsrgrpPatch: ScreenUsrgrpPatch!
  screenusrgrpid: BigInt!
}

"""All input for the `updateScreenUsrgrp` mutation."""
input UpdateScreenUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ScreenUsrgrp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ScreenUsrgrp` being updated.
  """
  screenUsrgrpPatch: ScreenUsrgrpPatch!
}

"""The output of our update `ScreenUsrgrp` mutation."""
type UpdateScreenUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ScreenUsrgrp` that was updated by this mutation."""
  screenUsrgrp: ScreenUsrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Screen` that is related to this `ScreenUsrgrp`."""
  screenByScreenid: Screen

  """Reads a single `Usrgrp` that is related to this `ScreenUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `ScreenUsrgrp`. May be used by Relay 1."""
  screenUsrgrpEdge(
    """The method to use when ordering `ScreenUsrgrp`."""
    orderBy: [ScreenUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): ScreenUsrgrpsEdge
}

"""All input for the `updateScriptByScriptid` mutation."""
input UpdateScriptByScriptidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Script` being updated.
  """
  scriptPatch: ScriptPatch!
  scriptid: BigInt!
}

"""All input for the `updateScript` mutation."""
input UpdateScriptInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Script` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Script` being updated.
  """
  scriptPatch: ScriptPatch!
}

"""The output of our update `Script` mutation."""
type UpdateScriptPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Script` that was updated by this mutation."""
  script: Script

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `Script`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `Group` that is related to this `Script`."""
  groupByGroupid: Group

  """An edge for our `Script`. May be used by Relay 1."""
  scriptEdge(
    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!] = PRIMARY_KEY_ASC
  ): ScriptsEdge
}

"""All input for the `updateServiceAlarmByServicealarmid` mutation."""
input UpdateServiceAlarmByServicealarmidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ServiceAlarm` being updated.
  """
  serviceAlarmPatch: ServiceAlarmPatch!
  servicealarmid: BigInt!
}

"""All input for the `updateServiceAlarm` mutation."""
input UpdateServiceAlarmInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServiceAlarm` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ServiceAlarm` being updated.
  """
  serviceAlarmPatch: ServiceAlarmPatch!
}

"""The output of our update `ServiceAlarm` mutation."""
type UpdateServiceAlarmPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServiceAlarm` that was updated by this mutation."""
  serviceAlarm: ServiceAlarm

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServiceAlarm`."""
  serviceByServiceid: Service

  """An edge for our `ServiceAlarm`. May be used by Relay 1."""
  serviceAlarmEdge(
    """The method to use when ordering `ServiceAlarm`."""
    orderBy: [ServiceAlarmsOrderBy!] = PRIMARY_KEY_ASC
  ): ServiceAlarmsEdge
}

"""All input for the `updateServiceByServiceid` mutation."""
input UpdateServiceByServiceidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  servicePatch: ServicePatch!
  serviceid: BigInt!
}

"""All input for the `updateService` mutation."""
input UpdateServiceInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Service` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Service` being updated.
  """
  servicePatch: ServicePatch!
}

"""The output of our update `Service` mutation."""
type UpdateServicePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Service` that was updated by this mutation."""
  service: Service

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `Service`."""
  triggerByTriggerid: Trigger

  """An edge for our `Service`. May be used by Relay 1."""
  serviceEdge(
    """The method to use when ordering `Service`."""
    orderBy: [ServicesOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesEdge
}

"""All input for the `updateServicesLinkByLinkid` mutation."""
input UpdateServicesLinkByLinkidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ServicesLink` being updated.
  """
  servicesLinkPatch: ServicesLinkPatch!
  linkid: BigInt!
}

"""All input for the `updateServicesLink` mutation."""
input UpdateServicesLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServicesLink` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ServicesLink` being updated.
  """
  servicesLinkPatch: ServicesLinkPatch!
}

"""The output of our update `ServicesLink` mutation."""
type UpdateServicesLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServicesLink` that was updated by this mutation."""
  servicesLink: ServicesLink

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServiceupid: Service

  """Reads a single `Service` that is related to this `ServicesLink`."""
  serviceByServicedownid: Service

  """An edge for our `ServicesLink`. May be used by Relay 1."""
  servicesLinkEdge(
    """The method to use when ordering `ServicesLink`."""
    orderBy: [ServicesLinksOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesLinksEdge
}

"""All input for the `updateServicesTimeByTimeid` mutation."""
input UpdateServicesTimeByTimeidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `ServicesTime` being updated.
  """
  servicesTimePatch: ServicesTimePatch!
  timeid: BigInt!
}

"""All input for the `updateServicesTime` mutation."""
input UpdateServicesTimeInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `ServicesTime` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `ServicesTime` being updated.
  """
  servicesTimePatch: ServicesTimePatch!
}

"""The output of our update `ServicesTime` mutation."""
type UpdateServicesTimePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `ServicesTime` that was updated by this mutation."""
  servicesTime: ServicesTime

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Service` that is related to this `ServicesTime`."""
  serviceByServiceid: Service

  """An edge for our `ServicesTime`. May be used by Relay 1."""
  servicesTimeEdge(
    """The method to use when ordering `ServicesTime`."""
    orderBy: [ServicesTimesOrderBy!] = PRIMARY_KEY_ASC
  ): ServicesTimesEdge
}

"""All input for the `updateSessionBySessionid` mutation."""
input UpdateSessionBySessionidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Session` being updated.
  """
  sessionPatch: SessionPatch!
  sessionid: String!
}

"""All input for the `updateSession` mutation."""
input UpdateSessionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Session` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Session` being updated.
  """
  sessionPatch: SessionPatch!
}

"""The output of our update `Session` mutation."""
type UpdateSessionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Session` that was updated by this mutation."""
  session: Session

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Session`."""
  userByUserid: User

  """An edge for our `Session`. May be used by Relay 1."""
  sessionEdge(
    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = PRIMARY_KEY_ASC
  ): SessionsEdge
}

"""All input for the `updateSlideBySlideid` mutation."""
input UpdateSlideBySlideidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Slide` being updated.
  """
  slidePatch: SlidePatch!
  slideid: BigInt!
}

"""All input for the `updateSlide` mutation."""
input UpdateSlideInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Slide` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Slide` being updated.
  """
  slidePatch: SlidePatch!
}

"""The output of our update `Slide` mutation."""
type UpdateSlidePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Slide` that was updated by this mutation."""
  slide: Slide

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `Slide`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Screen` that is related to this `Slide`."""
  screenByScreenid: Screen

  """An edge for our `Slide`. May be used by Relay 1."""
  slideEdge(
    """The method to use when ordering `Slide`."""
    orderBy: [SlidesOrderBy!] = PRIMARY_KEY_ASC
  ): SlidesEdge
}

"""All input for the `updateSlideshowBySlideshowid` mutation."""
input UpdateSlideshowBySlideshowidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Slideshow` being updated.
  """
  slideshowPatch: SlideshowPatch!
  slideshowid: BigInt!
}

"""All input for the `updateSlideshow` mutation."""
input UpdateSlideshowInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Slideshow` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Slideshow` being updated.
  """
  slideshowPatch: SlideshowPatch!
}

"""The output of our update `Slideshow` mutation."""
type UpdateSlideshowPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Slideshow` that was updated by this mutation."""
  slideshow: Slideshow

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `User` that is related to this `Slideshow`."""
  userByUserid: User

  """An edge for our `Slideshow`. May be used by Relay 1."""
  slideshowEdge(
    """The method to use when ordering `Slideshow`."""
    orderBy: [SlideshowsOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowsEdge
}

"""All input for the `updateSlideshowUserBySlideshowuserid` mutation."""
input UpdateSlideshowUserBySlideshowuseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SlideshowUser` being updated.
  """
  slideshowUserPatch: SlideshowUserPatch!
  slideshowuserid: BigInt!
}

"""All input for the `updateSlideshowUser` mutation."""
input UpdateSlideshowUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SlideshowUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SlideshowUser` being updated.
  """
  slideshowUserPatch: SlideshowUserPatch!
}

"""The output of our update `SlideshowUser` mutation."""
type UpdateSlideshowUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SlideshowUser` that was updated by this mutation."""
  slideshowUser: SlideshowUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `SlideshowUser`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `User` that is related to this `SlideshowUser`."""
  userByUserid: User

  """An edge for our `SlideshowUser`. May be used by Relay 1."""
  slideshowUserEdge(
    """The method to use when ordering `SlideshowUser`."""
    orderBy: [SlideshowUsersOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowUsersEdge
}

"""
All input for the `updateSlideshowUsrgrpBySlideshowusrgrpid` mutation.
"""
input UpdateSlideshowUsrgrpBySlideshowusrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SlideshowUsrgrp` being updated.
  """
  slideshowUsrgrpPatch: SlideshowUsrgrpPatch!
  slideshowusrgrpid: BigInt!
}

"""All input for the `updateSlideshowUsrgrp` mutation."""
input UpdateSlideshowUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SlideshowUsrgrp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SlideshowUsrgrp` being updated.
  """
  slideshowUsrgrpPatch: SlideshowUsrgrpPatch!
}

"""The output of our update `SlideshowUsrgrp` mutation."""
type UpdateSlideshowUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SlideshowUsrgrp` that was updated by this mutation."""
  slideshowUsrgrp: SlideshowUsrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Slideshow` that is related to this `SlideshowUsrgrp`."""
  slideshowBySlideshowid: Slideshow

  """Reads a single `Usrgrp` that is related to this `SlideshowUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `SlideshowUsrgrp`. May be used by Relay 1."""
  slideshowUsrgrpEdge(
    """The method to use when ordering `SlideshowUsrgrp`."""
    orderBy: [SlideshowUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): SlideshowUsrgrpsEdge
}

"""All input for the `updateSysmapBySysmapid` mutation."""
input UpdateSysmapBySysmapidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Sysmap` being updated.
  """
  sysmapPatch: SysmapPatch!
  sysmapid: BigInt!
}

"""
All input for the `updateSysmapElementUrlBySysmapelementurlid` mutation.
"""
input UpdateSysmapElementUrlBySysmapelementurlidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SysmapElementUrl` being updated.
  """
  sysmapElementUrlPatch: SysmapElementUrlPatch!
  sysmapelementurlid: BigInt!
}

"""All input for the `updateSysmapElementUrl` mutation."""
input UpdateSysmapElementUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapElementUrl` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SysmapElementUrl` being updated.
  """
  sysmapElementUrlPatch: SysmapElementUrlPatch!
}

"""The output of our update `SysmapElementUrl` mutation."""
type UpdateSysmapElementUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapElementUrl` that was updated by this mutation."""
  sysmapElementUrl: SysmapElementUrl

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SysmapsElement` that is related to this `SysmapElementUrl`.
  """
  sysmapsElementBySelementid: SysmapsElement

  """An edge for our `SysmapElementUrl`. May be used by Relay 1."""
  sysmapElementUrlEdge(
    """The method to use when ordering `SysmapElementUrl`."""
    orderBy: [SysmapElementUrlsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapElementUrlsEdge
}

"""All input for the `updateSysmap` mutation."""
input UpdateSysmapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Sysmap` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Sysmap` being updated.
  """
  sysmapPatch: SysmapPatch!
}

"""The output of our update `Sysmap` mutation."""
type UpdateSysmapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Sysmap` that was updated by this mutation."""
  sysmap: Sysmap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Image` that is related to this `Sysmap`."""
  imageByBackgroundid: Image

  """Reads a single `IconMap` that is related to this `Sysmap`."""
  iconMapByIconmapid: IconMap

  """Reads a single `User` that is related to this `Sysmap`."""
  userByUserid: User

  """An edge for our `Sysmap`. May be used by Relay 1."""
  sysmapEdge(
    """The method to use when ordering `Sysmap`."""
    orderBy: [SysmapsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsEdge
}

"""All input for the `updateSysmapsElementBySelementid` mutation."""
input UpdateSysmapsElementBySelementidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SysmapsElement` being updated.
  """
  sysmapsElementPatch: SysmapsElementPatch!
  selementid: BigInt!
}

"""All input for the `updateSysmapsElement` mutation."""
input UpdateSysmapsElementInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapsElement` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SysmapsElement` being updated.
  """
  sysmapsElementPatch: SysmapsElementPatch!
}

"""The output of our update `SysmapsElement` mutation."""
type UpdateSysmapsElementPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsElement` that was updated by this mutation."""
  sysmapsElement: SysmapsElement

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapsElement`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOff: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidOn: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidDisabled: Image

  """Reads a single `Image` that is related to this `SysmapsElement`."""
  imageByIconidMaintenance: Image

  """An edge for our `SysmapsElement`. May be used by Relay 1."""
  sysmapsElementEdge(
    """The method to use when ordering `SysmapsElement`."""
    orderBy: [SysmapsElementsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsElementsEdge
}

"""All input for the `updateSysmapsLinkByLinkid` mutation."""
input UpdateSysmapsLinkByLinkidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SysmapsLink` being updated.
  """
  sysmapsLinkPatch: SysmapsLinkPatch!
  linkid: BigInt!
}

"""All input for the `updateSysmapsLink` mutation."""
input UpdateSysmapsLinkInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapsLink` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SysmapsLink` being updated.
  """
  sysmapsLinkPatch: SysmapsLinkPatch!
}

"""The output of our update `SysmapsLink` mutation."""
type UpdateSysmapsLinkPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsLink` that was updated by this mutation."""
  sysmapsLink: SysmapsLink

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapsLink`."""
  sysmapBySysmapid: Sysmap

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid1: SysmapsElement

  """
  Reads a single `SysmapsElement` that is related to this `SysmapsLink`.
  """
  sysmapsElementBySelementid2: SysmapsElement

  """An edge for our `SysmapsLink`. May be used by Relay 1."""
  sysmapsLinkEdge(
    """The method to use when ordering `SysmapsLink`."""
    orderBy: [SysmapsLinksOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsLinksEdge
}

"""All input for the `updateSysmapsLinkTriggerByLinktriggerid` mutation."""
input UpdateSysmapsLinkTriggerByLinktriggeridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SysmapsLinkTrigger` being updated.
  """
  sysmapsLinkTriggerPatch: SysmapsLinkTriggerPatch!
  linktriggerid: BigInt!
}

"""All input for the `updateSysmapsLinkTrigger` mutation."""
input UpdateSysmapsLinkTriggerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapsLinkTrigger` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SysmapsLinkTrigger` being updated.
  """
  sysmapsLinkTriggerPatch: SysmapsLinkTriggerPatch!
}

"""The output of our update `SysmapsLinkTrigger` mutation."""
type UpdateSysmapsLinkTriggerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapsLinkTrigger` that was updated by this mutation."""
  sysmapsLinkTrigger: SysmapsLinkTrigger

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """
  Reads a single `SysmapsLink` that is related to this `SysmapsLinkTrigger`.
  """
  sysmapsLinkByLinkid: SysmapsLink

  """
  Reads a single `Trigger` that is related to this `SysmapsLinkTrigger`.
  """
  triggerByTriggerid: Trigger

  """An edge for our `SysmapsLinkTrigger`. May be used by Relay 1."""
  sysmapsLinkTriggerEdge(
    """The method to use when ordering `SysmapsLinkTrigger`."""
    orderBy: [SysmapsLinkTriggersOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapsLinkTriggersEdge
}

"""All input for the `updateSysmapUrlBySysmapurlid` mutation."""
input UpdateSysmapUrlBySysmapurlidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SysmapUrl` being updated.
  """
  sysmapUrlPatch: SysmapUrlPatch!
  sysmapurlid: BigInt!
}

"""All input for the `updateSysmapUrl` mutation."""
input UpdateSysmapUrlInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapUrl` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SysmapUrl` being updated.
  """
  sysmapUrlPatch: SysmapUrlPatch!
}

"""The output of our update `SysmapUrl` mutation."""
type UpdateSysmapUrlPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUrl` that was updated by this mutation."""
  sysmapUrl: SysmapUrl

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUrl`."""
  sysmapBySysmapid: Sysmap

  """An edge for our `SysmapUrl`. May be used by Relay 1."""
  sysmapUrlEdge(
    """The method to use when ordering `SysmapUrl`."""
    orderBy: [SysmapUrlsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUrlsEdge
}

"""All input for the `updateSysmapUserBySysmapuserid` mutation."""
input UpdateSysmapUserBySysmapuseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SysmapUser` being updated.
  """
  sysmapUserPatch: SysmapUserPatch!
  sysmapuserid: BigInt!
}

"""All input for the `updateSysmapUser` mutation."""
input UpdateSysmapUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapUser` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SysmapUser` being updated.
  """
  sysmapUserPatch: SysmapUserPatch!
}

"""The output of our update `SysmapUser` mutation."""
type UpdateSysmapUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUser` that was updated by this mutation."""
  sysmapUser: SysmapUser

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUser`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `User` that is related to this `SysmapUser`."""
  userByUserid: User

  """An edge for our `SysmapUser`. May be used by Relay 1."""
  sysmapUserEdge(
    """The method to use when ordering `SysmapUser`."""
    orderBy: [SysmapUsersOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUsersEdge
}

"""All input for the `updateSysmapUsrgrpBySysmapusrgrpid` mutation."""
input UpdateSysmapUsrgrpBySysmapusrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `SysmapUsrgrp` being updated.
  """
  sysmapUsrgrpPatch: SysmapUsrgrpPatch!
  sysmapusrgrpid: BigInt!
}

"""All input for the `updateSysmapUsrgrp` mutation."""
input UpdateSysmapUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `SysmapUsrgrp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `SysmapUsrgrp` being updated.
  """
  sysmapUsrgrpPatch: SysmapUsrgrpPatch!
}

"""The output of our update `SysmapUsrgrp` mutation."""
type UpdateSysmapUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `SysmapUsrgrp` that was updated by this mutation."""
  sysmapUsrgrp: SysmapUsrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Sysmap` that is related to this `SysmapUsrgrp`."""
  sysmapBySysmapid: Sysmap

  """Reads a single `Usrgrp` that is related to this `SysmapUsrgrp`."""
  usrgrpByUsrgrpid: Usrgrp

  """An edge for our `SysmapUsrgrp`. May be used by Relay 1."""
  sysmapUsrgrpEdge(
    """The method to use when ordering `SysmapUsrgrp`."""
    orderBy: [SysmapUsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): SysmapUsrgrpsEdge
}

"""All input for the `updateTaskByTaskid` mutation."""
input UpdateTaskByTaskidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  taskPatch: TaskPatch!
  taskid: BigInt!
}

"""All input for the `updateTaskCloseProblemByTaskid` mutation."""
input UpdateTaskCloseProblemByTaskidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TaskCloseProblem` being updated.
  """
  taskCloseProblemPatch: TaskCloseProblemPatch!
  taskid: BigInt!
}

"""All input for the `updateTaskCloseProblem` mutation."""
input UpdateTaskCloseProblemInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TaskCloseProblem` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TaskCloseProblem` being updated.
  """
  taskCloseProblemPatch: TaskCloseProblemPatch!
}

"""The output of our update `TaskCloseProblem` mutation."""
type UpdateTaskCloseProblemPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TaskCloseProblem` that was updated by this mutation."""
  taskCloseProblem: TaskCloseProblem

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Task` that is related to this `TaskCloseProblem`."""
  taskByTaskid: Task

  """An edge for our `TaskCloseProblem`. May be used by Relay 1."""
  taskCloseProblemEdge(
    """The method to use when ordering `TaskCloseProblem`."""
    orderBy: [TaskCloseProblemsOrderBy!] = PRIMARY_KEY_ASC
  ): TaskCloseProblemsEdge
}

"""All input for the `updateTask` mutation."""
input UpdateTaskInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Task` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Task` being updated.
  """
  taskPatch: TaskPatch!
}

"""The output of our update `Task` mutation."""
type UpdateTaskPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Task` that was updated by this mutation."""
  task: Task

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Task`. May be used by Relay 1."""
  taskEdge(
    """The method to use when ordering `Task`."""
    orderBy: [TasksOrderBy!] = PRIMARY_KEY_ASC
  ): TasksEdge
}

"""All input for the `updateTimeperiodByTimeperiodid` mutation."""
input UpdateTimeperiodByTimeperiodidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Timeperiod` being updated.
  """
  timeperiodPatch: TimeperiodPatch!
  timeperiodid: BigInt!
}

"""All input for the `updateTimeperiod` mutation."""
input UpdateTimeperiodInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Timeperiod` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Timeperiod` being updated.
  """
  timeperiodPatch: TimeperiodPatch!
}

"""The output of our update `Timeperiod` mutation."""
type UpdateTimeperiodPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Timeperiod` that was updated by this mutation."""
  timeperiod: Timeperiod

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Timeperiod`. May be used by Relay 1."""
  timeperiodEdge(
    """The method to use when ordering `Timeperiod`."""
    orderBy: [TimeperiodsOrderBy!] = PRIMARY_KEY_ASC
  ): TimeperiodsEdge
}

"""All input for the `updateTrendByItemidAndClock` mutation."""
input UpdateTrendByItemidAndClockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Trend` being updated.
  """
  trendPatch: TrendPatch!
  itemid: BigInt!
  clock: Int!
}

"""All input for the `updateTrend` mutation."""
input UpdateTrendInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Trend` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Trend` being updated.
  """
  trendPatch: TrendPatch!
}

"""The output of our update `Trend` mutation."""
type UpdateTrendPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Trend` that was updated by this mutation."""
  trend: Trend

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Trend`. May be used by Relay 1."""
  trendEdge(
    """The method to use when ordering `Trend`."""
    orderBy: [TrendsOrderBy!] = PRIMARY_KEY_ASC
  ): TrendsEdge
}

"""All input for the `updateTrendsUintByItemidAndClock` mutation."""
input UpdateTrendsUintByItemidAndClockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TrendsUint` being updated.
  """
  trendsUintPatch: TrendsUintPatch!
  itemid: BigInt!
  clock: Int!
}

"""All input for the `updateTrendsUint` mutation."""
input UpdateTrendsUintInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TrendsUint` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TrendsUint` being updated.
  """
  trendsUintPatch: TrendsUintPatch!
}

"""The output of our update `TrendsUint` mutation."""
type UpdateTrendsUintPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TrendsUint` that was updated by this mutation."""
  trendsUint: TrendsUint

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `TrendsUint`. May be used by Relay 1."""
  trendsUintEdge(
    """The method to use when ordering `TrendsUint`."""
    orderBy: [TrendsUintsOrderBy!] = PRIMARY_KEY_ASC
  ): TrendsUintsEdge
}

"""All input for the `updateTriggerByTriggerid` mutation."""
input UpdateTriggerByTriggeridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Trigger` being updated.
  """
  triggerPatch: TriggerPatch!
  triggerid: BigInt!
}

"""All input for the `updateTriggerDependByTriggerdepid` mutation."""
input UpdateTriggerDependByTriggerdepidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TriggerDepend` being updated.
  """
  triggerDependPatch: TriggerDependPatch!
  triggerdepid: BigInt!
}

"""All input for the `updateTriggerDepend` mutation."""
input UpdateTriggerDependInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerDepend` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TriggerDepend` being updated.
  """
  triggerDependPatch: TriggerDependPatch!
}

"""The output of our update `TriggerDepend` mutation."""
type UpdateTriggerDependPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerDepend` that was updated by this mutation."""
  triggerDepend: TriggerDepend

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridDown: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDepend`."""
  triggerByTriggeridUp: Trigger

  """An edge for our `TriggerDepend`. May be used by Relay 1."""
  triggerDependEdge(
    """The method to use when ordering `TriggerDepend`."""
    orderBy: [TriggerDependsOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerDependsEdge
}

"""All input for the `updateTriggerDiscoveryByTriggerid` mutation."""
input UpdateTriggerDiscoveryByTriggeridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TriggerDiscovery` being updated.
  """
  triggerDiscoveryPatch: TriggerDiscoveryPatch!
  triggerid: BigInt!
}

"""All input for the `updateTriggerDiscovery` mutation."""
input UpdateTriggerDiscoveryInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerDiscovery` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TriggerDiscovery` being updated.
  """
  triggerDiscoveryPatch: TriggerDiscoveryPatch!
}

"""The output of our update `TriggerDiscovery` mutation."""
type UpdateTriggerDiscoveryPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerDiscovery` that was updated by this mutation."""
  triggerDiscovery: TriggerDiscovery

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByTriggerid: Trigger

  """Reads a single `Trigger` that is related to this `TriggerDiscovery`."""
  triggerByParentTriggerid: Trigger

  """An edge for our `TriggerDiscovery`. May be used by Relay 1."""
  triggerDiscoveryEdge(
    """The method to use when ordering `TriggerDiscovery`."""
    orderBy: [TriggerDiscoveriesOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerDiscoveriesEdge
}

"""All input for the `updateTrigger` mutation."""
input UpdateTriggerInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Trigger` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Trigger` being updated.
  """
  triggerPatch: TriggerPatch!
}

"""The output of our update `Trigger` mutation."""
type UpdateTriggerPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Trigger` that was updated by this mutation."""
  trigger: Trigger

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `Trigger`."""
  triggerByTemplateid: Trigger

  """An edge for our `Trigger`. May be used by Relay 1."""
  triggerEdge(
    """The method to use when ordering `Trigger`."""
    orderBy: [TriggersOrderBy!] = PRIMARY_KEY_ASC
  ): TriggersEdge
}

"""All input for the `updateTriggerTagByTriggertagid` mutation."""
input UpdateTriggerTagByTriggertagidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `TriggerTag` being updated.
  """
  triggerTagPatch: TriggerTagPatch!
  triggertagid: BigInt!
}

"""All input for the `updateTriggerTag` mutation."""
input UpdateTriggerTagInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `TriggerTag` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `TriggerTag` being updated.
  """
  triggerTagPatch: TriggerTagPatch!
}

"""The output of our update `TriggerTag` mutation."""
type UpdateTriggerTagPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `TriggerTag` that was updated by this mutation."""
  triggerTag: TriggerTag

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Trigger` that is related to this `TriggerTag`."""
  triggerByTriggerid: Trigger

  """An edge for our `TriggerTag`. May be used by Relay 1."""
  triggerTagEdge(
    """The method to use when ordering `TriggerTag`."""
    orderBy: [TriggerTagsOrderBy!] = PRIMARY_KEY_ASC
  ): TriggerTagsEdge
}

"""All input for the `updateUserByUserid` mutation."""
input UpdateUserByUseridInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
  userid: BigInt!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  userPatch: UserPatch!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = PRIMARY_KEY_ASC
  ): UsersEdge
}

"""All input for the `updateUsersGroupById` mutation."""
input UpdateUsersGroupByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `UsersGroup` being updated.
  """
  usersGroupPatch: UsersGroupPatch!
  id: BigInt!
}

"""All input for the `updateUsersGroup` mutation."""
input UpdateUsersGroupInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `UsersGroup` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `UsersGroup` being updated.
  """
  usersGroupPatch: UsersGroupPatch!
}

"""The output of our update `UsersGroup` mutation."""
type UpdateUsersGroupPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `UsersGroup` that was updated by this mutation."""
  usersGroup: UsersGroup

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """Reads a single `Usrgrp` that is related to this `UsersGroup`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `User` that is related to this `UsersGroup`."""
  userByUserid: User

  """An edge for our `UsersGroup`. May be used by Relay 1."""
  usersGroupEdge(
    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = PRIMARY_KEY_ASC
  ): UsersGroupsEdge
}

"""All input for the `updateUsrgrpByUsrgrpid` mutation."""
input UpdateUsrgrpByUsrgrpidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Usrgrp` being updated.
  """
  usrgrpPatch: UsrgrpPatch!
  usrgrpid: BigInt!
}

"""All input for the `updateUsrgrp` mutation."""
input UpdateUsrgrpInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Usrgrp` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Usrgrp` being updated.
  """
  usrgrpPatch: UsrgrpPatch!
}

"""The output of our update `Usrgrp` mutation."""
type UpdateUsrgrpPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Usrgrp` that was updated by this mutation."""
  usrgrp: Usrgrp

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Usrgrp`. May be used by Relay 1."""
  usrgrpEdge(
    """The method to use when ordering `Usrgrp`."""
    orderBy: [UsrgrpsOrderBy!] = PRIMARY_KEY_ASC
  ): UsrgrpsEdge
}

"""All input for the `updateValuemapByValuemapid` mutation."""
input UpdateValuemapByValuemapidInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Valuemap` being updated.
  """
  valuemapPatch: ValuemapPatch!
  valuemapid: BigInt!
}

"""All input for the `updateValuemap` mutation."""
input UpdateValuemapInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Valuemap` to be updated.
  """
  nodeId: ID!

  """
  An object where the defined keys will be set on the `Valuemap` being updated.
  """
  valuemapPatch: ValuemapPatch!
}

"""The output of our update `Valuemap` mutation."""
type UpdateValuemapPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Valuemap` that was updated by this mutation."""
  valuemap: Valuemap

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Valuemap`. May be used by Relay 1."""
  valuemapEdge(
    """The method to use when ordering `Valuemap`."""
    orderBy: [ValuemapsOrderBy!] = PRIMARY_KEY_ASC
  ): ValuemapsEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  userid: BigInt!
  alias: String!
  name: String!
  surname: String!
  passwd: String!
  url: String!
  autologin: Int!
  autologout: Int!
  lang: String!
  refresh: Int!
  type: Int!
  theme: String!
  attemptFailed: Int!
  attemptIp: String!
  attemptClock: Int!
  rowsPerPage: Int!

  """Reads and enables pagination through a set of `Screen`."""
  screensByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Screen`."""
    orderBy: [ScreensOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenCondition
  ): ScreensConnection!

  """Reads and enables pagination through a set of `ScreenUser`."""
  screenUsersByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreenUser`."""
    orderBy: [ScreenUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenUserCondition
  ): ScreenUsersConnection!

  """Reads and enables pagination through a set of `Slideshow`."""
  slideshowsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Slideshow`."""
    orderBy: [SlideshowsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowCondition
  ): SlideshowsConnection!

  """Reads and enables pagination through a set of `SlideshowUser`."""
  slideshowUsersByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SlideshowUser`."""
    orderBy: [SlideshowUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowUserCondition
  ): SlideshowUsersConnection!

  """Reads and enables pagination through a set of `UsersGroup`."""
  usersGroupsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersGroupCondition
  ): UsersGroupsConnection!

  """Reads and enables pagination through a set of `OpmessageUsr`."""
  opmessageUsrsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpmessageUsr`."""
    orderBy: [OpmessageUsrsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageUsrCondition
  ): OpmessageUsrsConnection!

  """Reads and enables pagination through a set of `Media`."""
  mediaByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Media`."""
    orderBy: [MediaOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MediaCondition
  ): MediaConnection!

  """Reads and enables pagination through a set of `Sysmap`."""
  sysmapsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Sysmap`."""
    orderBy: [SysmapsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapCondition
  ): SysmapsConnection!

  """Reads and enables pagination through a set of `SysmapUser`."""
  sysmapUsersByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUser`."""
    orderBy: [SysmapUsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUserCondition
  ): SysmapUsersConnection!

  """Reads and enables pagination through a set of `Alert`."""
  alertsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Alert`."""
    orderBy: [AlertsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AlertCondition
  ): AlertsConnection!

  """Reads and enables pagination through a set of `Acknowledge`."""
  acknowledgesByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Acknowledge`."""
    orderBy: [AcknowledgesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AcknowledgeCondition
  ): AcknowledgesConnection!

  """Reads and enables pagination through a set of `Auditlog`."""
  auditlogsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Auditlog`."""
    orderBy: [AuditlogsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: AuditlogCondition
  ): AuditlogsConnection!

  """Reads and enables pagination through a set of `Profile`."""
  profilesByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Profile`."""
    orderBy: [ProfilesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ProfileCondition
  ): ProfilesConnection!

  """Reads and enables pagination through a set of `Session`."""
  sessionsByUserid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Session`."""
    orderBy: [SessionsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SessionCondition
  ): SessionsConnection!
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `userid` field."""
  userid: BigInt

  """Checks for equality with the object’s `alias` field."""
  alias: String

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `surname` field."""
  surname: String

  """Checks for equality with the object’s `passwd` field."""
  passwd: String

  """Checks for equality with the object’s `url` field."""
  url: String

  """Checks for equality with the object’s `autologin` field."""
  autologin: Int

  """Checks for equality with the object’s `autologout` field."""
  autologout: Int

  """Checks for equality with the object’s `lang` field."""
  lang: String

  """Checks for equality with the object’s `refresh` field."""
  refresh: Int

  """Checks for equality with the object’s `type` field."""
  type: Int

  """Checks for equality with the object’s `theme` field."""
  theme: String

  """Checks for equality with the object’s `attemptFailed` field."""
  attemptFailed: Int

  """Checks for equality with the object’s `attemptIp` field."""
  attemptIp: String

  """Checks for equality with the object’s `attemptClock` field."""
  attemptClock: Int

  """Checks for equality with the object’s `rowsPerPage` field."""
  rowsPerPage: Int
}

"""An input for mutations affecting `User`"""
input UserInput {
  userid: BigInt!
  alias: String
  name: String
  surname: String
  passwd: String
  url: String
  autologin: Int
  autologout: Int
  lang: String
  refresh: Int
  type: Int
  theme: String
  attemptFailed: Int
  attemptIp: String
  attemptClock: Int
  rowsPerPage: Int
}

"""
Represents an update to a `User`. Fields that are set will be updated.
"""
input UserPatch {
  userid: BigInt
  alias: String
  name: String
  surname: String
  passwd: String
  url: String
  autologin: Int
  autologout: Int
  lang: String
  refresh: Int
  type: Int
  theme: String
  attemptFailed: Int
  attemptIp: String
  attemptClock: Int
  rowsPerPage: Int
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User
}

type UsersGroup implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  id: BigInt!
  usrgrpid: BigInt!
  userid: BigInt!

  """Reads a single `Usrgrp` that is related to this `UsersGroup`."""
  usrgrpByUsrgrpid: Usrgrp

  """Reads a single `User` that is related to this `UsersGroup`."""
  userByUserid: User
}

"""
A condition to be used against `UsersGroup` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input UsersGroupCondition {
  """Checks for equality with the object’s `id` field."""
  id: BigInt

  """Checks for equality with the object’s `usrgrpid` field."""
  usrgrpid: BigInt

  """Checks for equality with the object’s `userid` field."""
  userid: BigInt
}

"""An input for mutations affecting `UsersGroup`"""
input UsersGroupInput {
  id: BigInt!
  usrgrpid: BigInt!
  userid: BigInt!
}

"""
Represents an update to a `UsersGroup`. Fields that are set will be updated.
"""
input UsersGroupPatch {
  id: BigInt
  usrgrpid: BigInt
  userid: BigInt
}

"""A connection to a list of `UsersGroup` values."""
type UsersGroupsConnection {
  """A list of `UsersGroup` objects."""
  nodes: [UsersGroup]!

  """
  A list of edges which contains the `UsersGroup` and cursor to aid in pagination.
  """
  edges: [UsersGroupsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `UsersGroup` you could get from the connection."""
  totalCount: Int
}

"""A `UsersGroup` edge in the connection."""
type UsersGroupsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `UsersGroup` at the end of the edge."""
  node: UsersGroup
}

"""Methods to use when ordering `UsersGroup`."""
enum UsersGroupsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  USRGRPID_ASC
  USRGRPID_DESC
  USERID_ASC
  USERID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  USERID_ASC
  USERID_DESC
  ALIAS_ASC
  ALIAS_DESC
  NAME_ASC
  NAME_DESC
  SURNAME_ASC
  SURNAME_DESC
  PASSWD_ASC
  PASSWD_DESC
  URL_ASC
  URL_DESC
  AUTOLOGIN_ASC
  AUTOLOGIN_DESC
  AUTOLOGOUT_ASC
  AUTOLOGOUT_DESC
  LANG_ASC
  LANG_DESC
  REFRESH_ASC
  REFRESH_DESC
  TYPE_ASC
  TYPE_DESC
  THEME_ASC
  THEME_DESC
  ATTEMPT_FAILED_ASC
  ATTEMPT_FAILED_DESC
  ATTEMPT_IP_ASC
  ATTEMPT_IP_DESC
  ATTEMPT_CLOCK_ASC
  ATTEMPT_CLOCK_DESC
  ROWS_PER_PAGE_ASC
  ROWS_PER_PAGE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Usrgrp implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  usrgrpid: BigInt!
  name: String!
  guiAccess: Int!
  usersStatus: Int!
  debugMode: Int!

  """Reads and enables pagination through a set of `ScreenUsrgrp`."""
  screenUsrgrpsByUsrgrpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `ScreenUsrgrp`."""
    orderBy: [ScreenUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScreenUsrgrpCondition
  ): ScreenUsrgrpsConnection!

  """Reads and enables pagination through a set of `SlideshowUsrgrp`."""
  slideshowUsrgrpsByUsrgrpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SlideshowUsrgrp`."""
    orderBy: [SlideshowUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SlideshowUsrgrpCondition
  ): SlideshowUsrgrpsConnection!

  """Reads and enables pagination through a set of `UsersGroup`."""
  usersGroupsByUsrgrpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `UsersGroup`."""
    orderBy: [UsersGroupsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UsersGroupCondition
  ): UsersGroupsConnection!

  """Reads and enables pagination through a set of `Script`."""
  scriptsByUsrgrpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Script`."""
    orderBy: [ScriptsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ScriptCondition
  ): ScriptsConnection!

  """Reads and enables pagination through a set of `OpmessageGrp`."""
  opmessageGrpsByUsrgrpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `OpmessageGrp`."""
    orderBy: [OpmessageGrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: OpmessageGrpCondition
  ): OpmessageGrpsConnection!

  """Reads and enables pagination through a set of `Config`."""
  configsByAlertUsrgrpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Config`."""
    orderBy: [ConfigsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ConfigCondition
  ): ConfigsConnection!

  """Reads and enables pagination through a set of `Right`."""
  rightsByGroupid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Right`."""
    orderBy: [RightsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: RightCondition
  ): RightsConnection!

  """Reads and enables pagination through a set of `SysmapUsrgrp`."""
  sysmapUsrgrpsByUsrgrpid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `SysmapUsrgrp`."""
    orderBy: [SysmapUsrgrpsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: SysmapUsrgrpCondition
  ): SysmapUsrgrpsConnection!
}

"""
A condition to be used against `Usrgrp` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UsrgrpCondition {
  """Checks for equality with the object’s `usrgrpid` field."""
  usrgrpid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String

  """Checks for equality with the object’s `guiAccess` field."""
  guiAccess: Int

  """Checks for equality with the object’s `usersStatus` field."""
  usersStatus: Int

  """Checks for equality with the object’s `debugMode` field."""
  debugMode: Int
}

"""An input for mutations affecting `Usrgrp`"""
input UsrgrpInput {
  usrgrpid: BigInt!
  name: String
  guiAccess: Int
  usersStatus: Int
  debugMode: Int
}

"""
Represents an update to a `Usrgrp`. Fields that are set will be updated.
"""
input UsrgrpPatch {
  usrgrpid: BigInt
  name: String
  guiAccess: Int
  usersStatus: Int
  debugMode: Int
}

"""A connection to a list of `Usrgrp` values."""
type UsrgrpsConnection {
  """A list of `Usrgrp` objects."""
  nodes: [Usrgrp]!

  """
  A list of edges which contains the `Usrgrp` and cursor to aid in pagination.
  """
  edges: [UsrgrpsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Usrgrp` you could get from the connection."""
  totalCount: Int
}

"""A `Usrgrp` edge in the connection."""
type UsrgrpsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Usrgrp` at the end of the edge."""
  node: Usrgrp
}

"""Methods to use when ordering `Usrgrp`."""
enum UsrgrpsOrderBy {
  NATURAL
  USRGRPID_ASC
  USRGRPID_DESC
  NAME_ASC
  NAME_DESC
  GUI_ACCESS_ASC
  GUI_ACCESS_DESC
  USERS_STATUS_ASC
  USERS_STATUS_DESC
  DEBUG_MODE_ASC
  DEBUG_MODE_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

type Valuemap implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  nodeId: ID!
  valuemapid: BigInt!
  name: String!

  """Reads and enables pagination through a set of `Item`."""
  itemsByValuemapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Item`."""
    orderBy: [ItemsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: ItemCondition
  ): ItemsConnection!

  """Reads and enables pagination through a set of `Mapping`."""
  mappingsByValuemapid(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Mapping`."""
    orderBy: [MappingsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MappingCondition
  ): MappingsConnection!
}

"""
A condition to be used against `Valuemap` object types. All fields are tested
for equality and combined with a logical ‘and.’
"""
input ValuemapCondition {
  """Checks for equality with the object’s `valuemapid` field."""
  valuemapid: BigInt

  """Checks for equality with the object’s `name` field."""
  name: String
}

"""An input for mutations affecting `Valuemap`"""
input ValuemapInput {
  valuemapid: BigInt!
  name: String
}

"""
Represents an update to a `Valuemap`. Fields that are set will be updated.
"""
input ValuemapPatch {
  valuemapid: BigInt
  name: String
}

"""A connection to a list of `Valuemap` values."""
type ValuemapsConnection {
  """A list of `Valuemap` objects."""
  nodes: [Valuemap]!

  """
  A list of edges which contains the `Valuemap` and cursor to aid in pagination.
  """
  edges: [ValuemapsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Valuemap` you could get from the connection."""
  totalCount: Int
}

"""A `Valuemap` edge in the connection."""
type ValuemapsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Valuemap` at the end of the edge."""
  node: Valuemap
}

"""Methods to use when ordering `Valuemap`."""
enum ValuemapsOrderBy {
  NATURAL
  VALUEMAPID_ASC
  VALUEMAPID_DESC
  NAME_ASC
  NAME_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the `zbxConstrainPartition` mutation."""
input ZbxConstrainPartitionInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableName: String
  columnName: String
  schemaName: String
}

"""The output of our `zbxConstrainPartition` mutation."""
type ZbxConstrainPartitionPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `zbxDeprovisionPartitions` mutation."""
input ZbxDeprovisionPartitionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableName: String
  triggerName: String
  schemaName: String
}

"""The output of our `zbxDeprovisionPartitions` mutation."""
type ZbxDeprovisionPartitionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `zbxDropOldPartitions` mutation."""
input ZbxDropOldPartitionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableName: String
  cutoff: Datetime
  schemaName: String
}

"""The output of our `zbxDropOldPartitions` mutation."""
type ZbxDropOldPartitionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

type ZbxPartition {
  parentOid: BigFloat
  parentNspname: String
  parentRelname: String
  childOid: BigFloat
  childNspname: String
  childRelname: String
}

"""
A condition to be used against `ZbxPartition` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input ZbxPartitionCondition {
  """Checks for equality with the object’s `parentOid` field."""
  parentOid: BigFloat

  """Checks for equality with the object’s `parentNspname` field."""
  parentNspname: String

  """Checks for equality with the object’s `parentRelname` field."""
  parentRelname: String

  """Checks for equality with the object’s `childOid` field."""
  childOid: BigFloat

  """Checks for equality with the object’s `childNspname` field."""
  childNspname: String

  """Checks for equality with the object’s `childRelname` field."""
  childRelname: String
}

"""A connection to a list of `ZbxPartition` values."""
type ZbxPartitionsConnection {
  """A list of `ZbxPartition` objects."""
  nodes: [ZbxPartition]!

  """
  A list of edges which contains the `ZbxPartition` and cursor to aid in pagination.
  """
  edges: [ZbxPartitionsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `ZbxPartition` you could get from the connection."""
  totalCount: Int
}

"""A `ZbxPartition` edge in the connection."""
type ZbxPartitionsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `ZbxPartition` at the end of the edge."""
  node: ZbxPartition
}

"""Methods to use when ordering `ZbxPartition`."""
enum ZbxPartitionsOrderBy {
  NATURAL
  PARENT_OID_ASC
  PARENT_OID_DESC
  PARENT_NSPNAME_ASC
  PARENT_NSPNAME_DESC
  PARENT_RELNAME_ASC
  PARENT_RELNAME_DESC
  CHILD_OID_ASC
  CHILD_OID_DESC
  CHILD_NSPNAME_ASC
  CHILD_NSPNAME_DESC
  CHILD_RELNAME_ASC
  CHILD_RELNAME_DESC
}

"""All input for the `zbxProvisionPartitions` mutation."""
input ZbxProvisionPartitionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableName: String
  partitionBy: String
  count: BigInt
  schemaName: String
}

"""The output of our `zbxProvisionPartitions` mutation."""
type ZbxProvisionPartitionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `zbxRebuildIndexOldPartitions` mutation."""
input ZbxRebuildIndexOldPartitionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableName: String
  cutoff: Datetime
  schemaName: String
}

"""The output of our `zbxRebuildIndexOldPartitions` mutation."""
type ZbxRebuildIndexOldPartitionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `zbxRebuildIndexOldTrendsPartitions` mutation."""
input ZbxRebuildIndexOldTrendsPartitionsInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  tableName: String
  cutoff: Datetime
  schemaName: String
}

"""The output of our `zbxRebuildIndexOldTrendsPartitions` mutation."""
type ZbxRebuildIndexOldTrendsPartitionsPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}

"""All input for the `zbxTimeFormatBy` mutation."""
input ZbxTimeFormatByInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  partitionBy: String
}

"""The output of our `zbxTimeFormatBy` mutation."""
type ZbxTimeFormatByPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String
  string: String

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query
}
