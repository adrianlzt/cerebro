#!/bin/bash
# LISTA DE CAMBIOS
# versión 1.0
#	- versión inicial
# versión 1.1
#	- mejorada la compatibilidad entre distribuciones
# versión 1.2
#	- añadida la posibilidad de cambiar la ubicación de las carpetas de
#	  los handshakes y los diccionarios con los parámetros -h y -d, respectivamente
#	- añadida compatibilidad con handshakes capturados sin goyscriptWPA
# versión 2.7
#	- Cambiado el sistema de numeración de la versión de los scripts para evitar confusiones
#	  (ahora todos los scripts muestran la misma versión)
# versión 2.8
#	- Ahora se muestran de morado los handshakes de los que ya se ha obtenido la contraseña.
#	- Añadido parámetro para poder filtrar la búsqueda de handshakes
#	- Añadido diccionario al vuelo para redes de R (Galicia)
#	- Añadido diccionario al vuelo para redes de Orange (son más de 200 millones de
#	  posibles contraseñas, así que he añadido guardado de sesión automáticamente para
#	  poder continuar en cualquier momento). Dicho diccionario está basado en el algoritmo
#	  del script Orange.sh creado por 1camaron1 (colaboración de kcdtv) y publicado en lampiweb
#	- Añadida la posibilidad de poder usar pyrit
# versión 2.9
#	- Mejoras estéticas
#	- Corregido bug al filtrar handshakes (si no encontraba ninguno no informaba de ello)
# versión 3.0
#	- Ahora se puede seleccionar más de un handshake
#	- Ahora en el menú de selección de diccionarios se indica cuántas contraseñas tiene cada uno
#	- Ahora se guarda un registro de los diccionarios pasados (completamente) a cada handshake.
#	  Si se intenta volver a pasar el mismo diccionario al mismo handshake el script lo detecta
#	  y lo omite.
#	- Ahora se indica si el proceso de pasar el diccionario ha sido cancelado.
#	- Ahora se indica la hora a la que se comienza a pasar un diccionario y se muestra un
#	  cronómetro para cada uno de ellos.
#	- Añadido soporte para John the Ripper (guarda las sesiones en "wpa/sesiones"). Si deseamos
#	  cancelar el proceso de pasar el diccionario, es imprescindible que lo hagamos pulsando
#	  CONTROL+C y esperemos a que se cierre la ventana. De lo contrario la sesión no se guardará.
#	  Traducido al español e integrado a la suite en la carpeta "software".
#	- Añadido crunch para generar diccionarios por script.
#	  Traducido al español e integrado a la suite en la carpeta "software".
#	- Reescritos los diccionarios por script para generarlos con crunch (más rápido de bash)
#	- Añadidas 1.000.000 de contraseñas más para el diccionario Mundo-R.sh
#	- Añadida la posibilidad de generar un diccionario personalizado automáticamente para redes
#	  WPA con un patrón de contraseña conocido
#	- Ahora se comprueba al inicio si el dispositivo de almacenamiento es de sólo lectura
# versión 3.1
#	- Ahora se pueden usar diccionarios con extensión .txt (en la carpeta "dic" como siempre)
#	- Ahora se comprueba si se tienen permisos de root para poder ejecutar el script
# versión 3.3
#	- Corrección de un bug muy importante detectado por Coeman76 (muchas gracias por el aviso)
#	  John the Ripper se salta contraseñas entre sesión y sesión.
#	  Ahora cada vez que se guarda la sesión se resta 1000 al número de contraseñas probadas
#	- Ahora se borra la sesión al obtener la contraseña (John sólo borra la sesión si se ha
#	  pasado el diccionario completo)
# versión 3.4
#	- Ahora se prescinde de John the Ripper para guardar la sesión. En su lugar se utilizará
#	  "Saver", desarrollado por Coeman76 (muchas gracias). Gracias a esto, entre otras
#	  ventajas, ahora se reinicia la sesión inmediatamente (antes se tenían que generar
#	  las contraseñas ya procesadas en memoria antes de realmente continuar la sesión).
#	  Para que esto sea posible he tenido que retocar todos los scripts de diccionarios (.sh)
#	- Corregido bug al guardar la sesión (tanto con aircrack como con pyrit)
#	- Corregido bug al aplicar diccionario automático desde otros scripts (goyscriptWPA)
#	- Se ha optimizado la creación del menú de diccionarios.
#	- Corregida base de datos de redes vulnerables (WLAN_XXXX y JAZZTEL_XXXX).
#	- Corregido bug al crear diccionario automático en redes vulnerables
#	- Ahora se puede usar sin interfaz gráfica (con goyscriptTTY)
#	- Ahora al ejecutarse desde goyscriptWPA sólo se prueban diccionarios de redes con
#	  patrón conocido.
#	- Añadida compatibilidad con OpenWrt


##### CONSTANTES #####
DEBUG=""
#DEBUG="-hold" #descomentar esta línea para impedir que se cierren las ventanas secundarias
VERSION=$(cat VERSION)
WRT=`ps | grep goyscriptWRT | grep -v grep`
if [ "$WRT" = "" ] #si no se está usando goyscriptWRT
then
	AIRCRACK="software/aircrack-ng"
	PARAMETRO_PS="-A"
	resaltar="\033[1;37m\E[7m"
	normal="\E[0m"
else
	AIRCRACK="aircrack-ng"
	PARAMETRO_PS=""
	resaltar="\033[1;35m"
	normal="\033[1;37m"
fi
PYRIT="pyrit"
CARPETA_HANDSHAKES="handshakes"
CARPETA_DICCIONARIOS="dic"
PASAR_DICCIONARIO="software/./pasar_diccionario.sh"
BSSIDs_VULNERABLES="software/BSSIDs_vulnerables_WPA.txt"
CRONOMETRO="software/./cronometro.sh"
SCREEN="screen"
AIRCRACK_VENTANA="-geometry 76x25-0+0"
NORMAL="+sb -fg white -bg black"
CLAVES="claves"
SESIONES_WPA="wpa/sesiones"
TMP="tmp"
LINEA="════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════════"

#COLORES
negro="\033[0;30m"
rojo="\033[0;31m"
verde="\033[0;32m"
marron="\033[0;33m"
azul="\033[0;34m"
magenta="\033[0;35m"
cyan="\033[01;36m"
grisC="\033[0;37m"
gris="\033[1;30m"
rojoC="\033[1;31m"
verdeC="\033[1;32m"
amarillo="\033[1;33m"
azulC="\033[1;34m"
magentaC="\033[1;35m"
cyanC="\033[1;36m"
blanco="\033[1;37m"
subrayar="\E[4m"
parpadeoON="\E[5m"


#NOMBRE Y VERSIÓN DEL SCRIPT
version()
{
if [ "$DESDE_OTRO_SCRIPT" = "NO" ]
then
	clear
fi
SCRIPT=" GOYscriptDIC $VERSION by GOYfilms "
N_SCRIPT=${#SCRIPT}
N_VERSION=${#VERSION}
let CARACTERES=$N_SCRIPT*3
LINEA_VERSION=`echo "══════════════════════════════════════════════════════════════════════════" | cut -c-${CARACTERES}`
echo -e "$blanco\c"
echo -e "╔${LINEA_VERSION}╗"
echo -e "║${SCRIPT}║"
echo -e "╚${LINEA_VERSION}╝"
echo -e $grisC
}

#ESPERA A QUE SE PULSE UNA TECLA
pulsar_una_tecla()
{
echo
echo -e $blanco"$1"$grisC" \c"
read -n 1 TECLA
echo
echo
if [ "$1" = "Pulsa una tecla para salir..." ]
then
	exit 1
fi
}

#MUESTRA CUANTOS HANDSHAKES y/o DICCIONARIOS HAY
mostrar_cuantos_hay()
{
rm -rf "$TMP/handshakes.menu" > /dev/null 2>&1
let CUANTOS_HANDSHAKES=`find "$CARPETA_HANDSHAKES" | grep '.cap$' | wc -l`
let CUANTOS_DICCIONARIOS=`find "$CARPETA_DICCIONARIOS" | grep -e '.dic$' -e '.txt$' -e '.sh$' | wc -l`
if [ $CUANTOS_HANDSHAKES -eq 0 ] && [ $CUANTOS_DICCIONARIOS -eq 0 ]
then
	echo -e $rojoC"No se han encontrado handshakes ni diccionarios."
	echo -e $grisC
	pulsar_una_tecla "Pulsa una tecla para salir..."
	
else
	if [ $CUANTOS_HANDSHAKES -ne 0 ] && [ $CUANTOS_DICCIONARIOS -eq 0 ]
	then
		echo -e $rojoC"Se han encontrado $blanco$CUANTOS_HANDSHAKES$rojoC handshakes pero no hay diccionarios."
		echo -e $grisC
		pulsar_una_tecla "Pulsa una tecla para salir..."
	else
		if [ $CUANTOS_HANDSHAKES -eq 0 ] && [ $CUANTOS_DICCIONARIOS -ne 0 ]
		then
			echo -e $rojoC"Se han encontrado $blanco$CUANTOS_DICCIONARIOS$rojoC diccionarios pero no hay handshakes."
			echo -e $grisC
			pulsar_una_tecla "Pulsa una tecla para salir..."
		else
			echo -e $verdeC"Se han encontrado $blanco$CUANTOS_HANDSHAKES$verdeC handshakes y $blanco$CUANTOS_DICCIONARIOS$verdeC diccionarios."
			echo -e $grisC
		fi
	fi
fi
}

#SELECCIONA UN HANDSHAKE DE LA LISTA
seleccionar_handshakes()
{
rm -rf "$TMP/handshakes.menu" > /dev/null 2>&1
rm -rf "$TMP/handshakes.lst" > /dev/null 2>&1
rm -rf "$TMP/handshakes.tmp" > /dev/null 2>&1
rm -rf "$TMP/handshakes2.tmp" > /dev/null 2>&1
if [ "$FILTRAR" = "SI" ]
then
	echo -e $magentaC"Filtrando por $blanco\"$FILTRO\"$magentaC..."
	echo
	find "$CARPETA_HANDSHAKES" | awk -F '/' '{print $NF}' | grep '.cap$' | sed 's#^'"$CARPETA_HANDSHAKES"'/##g' | grep "$FILTRO" | sort -f -u > "$TMP/handshakes.tmp"
else
	find "$CARPETA_HANDSHAKES" | awk -F '/' '{print $NF}' | grep '.cap$' | sed 's#^'"$CARPETA_HANDSHAKES"'/##g' | sort -f > "$TMP/handshakes.tmp"
fi
let CONT=1
let TOTAL_HANDSHAKES=`cat "$TMP/handshakes.tmp" | wc -l`
CONTENIDO_CLAVES=`find $CLAVES` #guardo el resultado en una variable para no hacer constantemente "find" al directorio "claves"
CONTENIDO_HANDSHAKES=`cat "$TMP/handshakes.tmp" | sed 's#^'"$CARPETA_HANDSHAKES"'/##g'` #guardo el resultado en una variable para no hacer constantemente "find" al directorio "handshakes"
SESIONES=`find "$CARPETA_HANDSHAKES" | grep ".ses"`
while IFS='|' read HANDSHAKE
do
	HANDSHAKE_SIN_RUTA=`echo "$HANDSHAKE" | awk -F '/' '{print $NF}' | sed 's/.cap$//'` #guarda el nombre del handshake sin la ruta y sin la extensión
	EXISTE_CLAVE=`echo "$CONTENIDO_CLAVES" | grep "$HANDSHAKE_SIN_RUTA".txt`
	EXISTE_SESION=`echo "$SESIONES" | grep "$HANDSHAKE_SIN_RUTA" | grep '.ses'`
	if [ "$EXISTE_SESION" != "" ]
	then
		COLOR="$marron"
	else
		COLOR="$blanco"
	fi
	let PORCENTAJE=$CONT*100/$TOTAL_HANDSHAKES
	echo -en $cyanC"\r   Creando menú handshakes... [ $PORCENTAJE % ]  \c"
	if [ "$EXISTE_CLAVE" = "" ]
	then
		printf " |$HANDSHAKE|$COLOR\n" >> "$TMP/handshakes2.tmp"
		let CONT=$CONT+1
	fi
done < "$TMP/handshakes.tmp"
if [ ! -e "$TMP/handshakes2.tmp" ]
then
	echo -e $rojoC"\rNo se ha encontrado ningún handshake con ese criterio de búsqueda."
	echo -e $cyanC
	pulsar_una_tecla "Pulsa una tecla para salir..."
fi
let CUANTOS_HANDSHAKES=`cat "$TMP/handshakes2.tmp" | wc -l`
let CARACTERES_HANDSHAKES=`cat "$TMP/handshakes2.tmp" | awk -F '|' '{print $2}' | wc -L`  #guarda el nº de caracteres del handshake que tiene más (para la línea de separación)
let CARACTERES_HANDSHAKES_LINEA=$CARACTERES_HANDSHAKES*3
mostrar_menu_handshakes
if [ $CUANTOS_HANDSHAKES -ne 1 ]
then
	echo -e ""$cyan"\rSelecciona uno o más handshakes de la lista $grisC(0=FIN)$cyanC: "$amarillo"\c"
	read OPCION
else
	cat "$TMP/handshakes2.tmp" | awk -F '|' '{print $2}' > "$TMP/handshakes.lst"
fi
let SELECCIONADOS=0
while [ $CUANTOS_HANDSHAKES -ne 1 ]
do
	while [[ $OPCION -lt 1 ]] || [[ $OPCION -gt $CUANTOS_HANDSHAKES ]]
	do
		if [[ "$OPCION" = "0" ]] && [[ $SELECCIONADOS -ne 0 ]]
		then
			break
		else
			if [[ "$OPCION" = "t" ]] || [[ "$OPCION" = "T" ]]
			then #SELECCIONAR TODOS
				let SELECCIONADOS=$CUANTOS_HANDSHAKES
				sed -i 's/ |/#|/' "$TMP/handshakes2.tmp"
				mostrar_menu_handshakes
			else
				if [[ "$OPCION" = "n" ]] || [[ "$OPCION" = "N" ]]
				then #SELECCIONAR NINGUNO
					let SELECCIONADOS=0
					sed -i 's/#|/ |/' "$TMP/handshakes2.tmp"
					mostrar_menu_handshakes
				else
					echo -en "\033[1A"
				fi
			fi
		fi
		echo -en "\a\r"$cyan"Selecciona uno o más handshakes de la lista $grisC(0=FIN)$cyanC: \033[K"$amarillo"\c"
		read OPCION
	done
	if [[ "$OPCION" = "0" ]] && [[ $SELECCIONADOS -ne 0 ]]
	then
		break
	else
		MARCADO=`sed -n ${OPCION}p "$TMP/handshakes2.tmp" | awk -F '|' '{print $1}'`
		HANDSHAKE=`sed -n ${OPCION}p "$TMP/handshakes2.tmp" | awk -F '|' '{print $2}'`
		if [ "$MARCADO" = "#" ]
		then
			sed -i 's[#|'"$HANDSHAKE"'[ |'"$HANDSHAKE"'[' "$TMP/handshakes2.tmp" #DESELECCIONAR
			let SELECCIONADOS=$SELECCIONADOS-1
		else
			sed -i 's[ |'"$HANDSHAKE"'[#|'"$HANDSHAKE"'[' "$TMP/handshakes2.tmp" #SELECCIONAR
			let SELECCIONADOS=$SELECCIONADOS+1
		fi
		mostrar_menu_handshakes
		echo -e $grisC
		echo -en "\033[1A"$cyan"Selecciona uno o más handshakes de la lista $grisC(0=FIN)$cyanC: \033[K"$amarillo"\c"
		read OPCION
	fi
done
if [ $CUANTOS_HANDSHAKES -ne 1 ]
then
	rm -rf "$TMP/handshakes.lst" > /dev/null 2>&1
	while IFS='|' read MARCADO HANDSHAKE COLOR
	do
		if [ "$MARCADO" = '#' ]
		then
			echo "$HANDSHAKE" >> "$TMP/handshakes.lst"
		fi
	done < "$TMP/handshakes2.tmp"
fi
}

#ACTUALIZA Y MUESTRA EL MENÚ DE SELECCIÓN DE HANDSHAKES
mostrar_menu_handshakes()
{
rm -rf "$TMP/handshakes.menu" > /dev/null 2>&1
let CONT=1
while IFS='|' read MARCADO HANDSHAKE COLOR
do
	if [ "$MARCADO" = "#" ]
	then
		COLOR="$resaltar"
	fi
	printf "$normal $COLOR%3s) %-${CARACTERES_HANDSHAKES}.${CARACTERES_HANDSHAKES}s\n" "$CONT" "$HANDSHAKE" >> "$TMP/handshakes.menu"
	let CONT=$CONT+1
done < "$TMP/handshakes2.tmp"
version
echo -e $cyanC"\r   Nº HANDSHAKE \033[K"
printf "   ══ %-${CARACTERES_HANDSHAKES_LINEA}.${CARACTERES_HANDSHAKES_LINEA}s\n" "$LINEA"
cat "$TMP/handshakes.menu"
echo -e $grisC
}

#MENÚ DE DICCIONARIOS
mostrar_menu_diccionarios()
{
rm -rf "$TMP/diccionarios.menu" > /dev/null 2>&1
let CONT=1
let LINEAS=`cat "$TMP/diccionarios.tmp" | wc -l`
while IFS='|' read MARCADO DICCIONARIO N_CLAVES
do
	if [ "$MARCADO" = "#" ]
	then
		COLOR="$resaltar"
	else
		COLOR="$blanco"
	fi
	printf "$normal $COLOR%3s) %-${CARACTERES_DICCIONARIOS}.${CARACTERES_DICCIONARIOS}s  %17.17s\n" "$CONT" "$DICCIONARIO" "$N_CLAVES" >> "$TMP/diccionarios.menu"
	let CONT=$CONT+1
done < "$TMP/diccionarios2.tmp"
version
printf "  $cyanC Nº %-${CARACTERES_DICCIONARIOS}.${CARACTERES_DICCIONARIOS}s  %-20.20s\n" "DICCIONARIOS" "TOTAL CONTRASEÑAS"
printf "   ══ %-${CARACTERES_DICCIONARIOS_LINEA}.${CARACTERES_DICCIONARIOS_LINEA}s  ═════════════════\n" "$LINEA"
cat "$TMP/diccionarios.menu"
echo -e $grisC
}

#SELECCIONA UNO O MÁS DICCIONARIOS DE LA LISTA
seleccionar_diccionarios()
{
find "$CARPETA_DICCIONARIOS" | awk -F '/' '{print $NF}' | grep -e '.dic$' -e '.txt$' -e '.sh$' | sort -f > "$TMP/diccionarios.tmp"
CARACTERES_DICCIONARIOS=`cat "$TMP/diccionarios.tmp" | wc -L`
let CARACTERES_DICCIONARIOS_LINEA=$CARACTERES_DICCIONARIOS*3 #multiplico por 3 la variable porque cada caracter de la línea de separador representa 1/3 de caracter
let TOTAL_DICCIONARIOS=`cat "$TMP/diccionarios.tmp" | wc -l`
rm -rf "$TMP/diccionarios2.tmp" > /dev/null 2>&1
echo -e $grisC
let CONT=1
while IFS='|' read DICCIONARIO
do
	TIPO_DICCIONARIO=`echo "$DICCIONARIO" | grep '.sh$'`
	if [ "$TIPO_DICCIONARIO" = "" ] #si es un .dic o .txt
	then
		if [ ! -f ""$CARPETA_DICCIONARIOS"/$DICCIONARIO".num ] #si no existe el archivo donde se guardan cuantas contraseñas tiene, se crea
		then
			cat ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" | wc -l > ""$CARPETA_DICCIONARIOS"/$DICCIONARIO".num
		fi
		let N_CLAVES=`cat ""$CARPETA_DICCIONARIOS"/$DICCIONARIO".num`
	else #si es un script .sh
		let N_CLAVES=`sed -n 2p ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" | awk -F '=' '{print $2}'`
	fi
	N_CLAVES=`separador_de_miles $N_CLAVES`
	let PORCENTAJE=$CONT*100/$TOTAL_DICCIONARIOS
	echo -en $cyanC"\r   Creando menú diccionarios... [ $PORCENTAJE % ]  \c"
	echo " |$DICCIONARIO|$N_CLAVES" >> "$TMP/diccionarios2.tmp"
	let CONT=$CONT+1
done < "$TMP/diccionarios.tmp"
mostrar_menu_diccionarios
echo -e ""$cyan"\rSelecciona uno o más diccionarios de la lista $grisC(0=FIN)$cyanC: "$amarillo"\c"
read OPCION
let SELECCIONADOS=0
while true
do
	while [[ $OPCION -lt 1 ]] || [[ $OPCION -gt $LINEAS ]]
	do
		if [[ "$OPCION" = "0" ]] && [[ $SELECCIONADOS -ne 0 ]]
		then
			break
		else
			if [[ "$OPCION" = "t" ]] || [[ "$OPCION" = "T" ]]
			then #SELECCIONAR TODOS
				let SELECCIONADOS=$LINEAS
				sed -i 's/ |/#|/' "$TMP/diccionarios2.tmp"
				mostrar_menu_diccionarios
			else
				if [[ "$OPCION" = "n" ]] || [[ "$OPCION" = "N" ]]
				then #SELECCIONAR NINGUNO
					let SELECCIONADOS=0
					sed -i 's/#|/ |/' "$TMP/diccionarios2.tmp"
					mostrar_menu_diccionarios
				else
					echo -en "\033[1A"
				fi
			fi
		fi
		echo -en "\a\r"$cyan"Selecciona uno o más diccionarios de la lista $grisC(0=FIN)$cyanC: \033[K"$amarillo"\c"
		read OPCION
	done
	if [[ "$OPCION" = "0" ]] && [[ $SELECCIONADOS -ne 0 ]]
	then
		break
	else
		MARCADO=`sed -n ${OPCION}p "$TMP/diccionarios2.tmp" | awk -F '|' '{print $1}'`
		DICCIONARIO=`sed -n ${OPCION}p "$TMP/diccionarios2.tmp" | awk -F '|' '{print $2}'`
		if [ "$MARCADO" = "#" ]
		then
			let SELECCIONADOS=$SELECCIONADOS-1
			sed -i 's/#|'"$DICCIONARIO"'/ |'"$DICCIONARIO"'/' "$TMP/diccionarios2.tmp" #DESELECCIONAR
		else
			let SELECCIONADOS=$SELECCIONADOS+1
			sed -i 's/ |'"$DICCIONARIO"'/#|'"$DICCIONARIO"'/' "$TMP/diccionarios2.tmp" #SELECCIONAR
		fi
		mostrar_menu_diccionarios
		echo -e $grisC
		echo -en "\033[1A"$cyan"Selecciona uno o más diccionarios de la lista $grisC(0=FIN)$cyanC: \033[K"$amarillo"\c"
		read OPCION
	fi
done
echo -e ""$cyan"\033[1ASelecciona uno o más diccionarios de la lista $grisC(0=FIN)$cyanC: "$amarillo"$OPCION\033[K"
echo -e $grisC
grep '#|' "$TMP/diccionarios2.tmp" | awk -F '|' '{print $2}' > "$TMP/diccionarios.lst"
}

# FUNCIÓN QUE DADO UN NÚMERO, LO ESCRIBE CON SEPARADOR DE MILES
# EJEMPLO: NUMERO DADO=1000000, ESCRIBE=1.000.000
separador_de_miles()
{
printf "%'.0f\n" $1
}

#MUESTRA UN RESUMEN DE LOS DATOS CON LOS QUE SE TRABAJARÁ
mostrar_resumen()
{
echo -en "$amarillo"
let CUANTOS_HANDSHAKES=`cat $TMP/handshakes.lst | wc -l`
let CUANTOS_DICCIONARIOS=`cat $TMP/diccionarios.lst | wc -l`
if [ $CUANTOS_HANDSHAKES -eq 1 ]
then
	if [ "$DESDE_OTRO_SCRIPT" = "NO" ]
	then
		echo -en $amarillo"  Has seleccionado $blanco$CUANTOS_HANDSHAKES$amarillo handshake \c"
	fi
else
	echo -en $amarillo"  Has seleccionado $blanco$CUANTOS_HANDSHAKES$amarillo handshakes \c"
fi
if [ $CUANTOS_DICCIONARIOS -eq 1 ]
then
	if [ "$DESDE_OTRO_SCRIPT" = "NO" ]
	then
		echo -e $amarillo"y $blanco$CUANTOS_DICCIONARIOS$amarillo diccionario"
	else
		echo -e $cyanC"  Se probará $blanco$CUANTOS_DICCIONARIOS$cyanC diccionario"
	fi
else
	if [ "$DESDE_OTRO_SCRIPT" = "NO" ]
	then
		echo -e $amarillo"y $blanco$CUANTOS_DICCIONARIOS$amarillo diccionarios"
	else
		echo -e $cyanC"  Se probarán $blanco$CUANTOS_DICCIONARIOS$cyanC diccionarios"
	fi
fi
echo -e $grisC
}

#PRUEBA LOS DICCIONARIOS SELECCIONADOS CON EL HANDSHAKE
pasar_diccionarios()
{
rm -rf "$TMP/ARCHIVOS_CLAVES.txt" > /dev/null 2>&1
echo -e $grisC
let CONT_HANDSHAKE=1
let LINEAS_HANDSHAKES=`cat "$TMP/handshakes.lst" | wc -l`
while [ $CONT_HANDSHAKE -le $LINEAS_HANDSHAKES ]
do
	HANDSHAKE=`sed -n ${CONT_HANDSHAKE}p "$TMP/handshakes.lst"`
	HANDSHAKE_CON_RUTA=`find "$CARPETA_HANDSHAKES" -name "$HANDSHAKE" | sed -n 1p` #el sed lo pongo por si el handshake está repetido en otra subcarpeta
	MAC_AP=`$AIRCRACK "$HANDSHAKE_CON_RUTA" | grep "1 handshake" | awk '{print $2}'` #BSSID completo
	MAC_AP_GUIONES=`echo "$MAC_AP" | sed 's/:/-/g'` #convierte los dos puntos del BSSID por guión (XX-XX-XX-XX-XX-XX)
	MAC_AP_MITAD=`echo "$MAC_AP" | cut -c-8` #los 3 primeros pares del BSSID (XX:XX:XX)
	NOMBRE_AP=`$AIRCRACK "$HANDSHAKE_CON_RUTA" | grep "1 handshake" | awk '{print substr ($0,26,26)}' | sed 's/ *$//g'` #ESSID completo
	NOMBRE_HANDSHAKE=`echo "$HANDSHAKE" | awk -F '/' '{print $NF}' | sed 's/.cap$//'` #nombre handshake sin ruta ni extensión
	echo -e $amarillo"Handshake nº $CONT_HANDSHAKE: $blanco$HANDSHAKE"
	if [ "$USAR_PYRIT" = "SI" ]
	then
		$PYRIT -r "$HANDSHAKE_CON_RUTA" analyze > /dev/null 2>&1
		if [ $? -eq 0 ]
		then
			HANDSHAKE_INCOMPLETO="NO"
		else
			echo -e $rojoC"  Este handshake no es válido para pyrit.$cyanC Se usará aircrack..."
			HANDSHAKE_INCOMPLETO="SI"
		fi
	fi
	echo -e $grisC
	let CONT=1
	let LINEAS_DICCIONARIOS=`cat "$TMP/diccionarios.lst" | wc -l`
	while [ $CONT -le $LINEAS_DICCIONARIOS ]
	do
		DICCIONARIO=`sed -n ${CONT}p "$TMP/diccionarios.lst"`
		HORA=`date +%R`
		YA_PASADO=`cat "$CARPETA_DICCIONARIOS/handshakes_probados.lst" | grep "$DICCIONARIO" | grep "$NOMBRE_HANDSHAKE"`
		let TOTAL_CLAVES=0
		if [ "$DICCIONARIO" = "(Diccionario automatico).dic" ]
		then
			comprobar_red_vulnerable
		fi
		if [ "$YA_PASADO" = "" ] #comprueba si ya se pasó el diccionario al handshake
		then
			TIPO_DICCIONARIO=`echo "$DICCIONARIO" | grep '.sh$'`
			if [ "$TIPO_DICCIONARIO" = "" ] #diccionario .dic o .txt
			then
				if [ "$DICCIONARIO" = "(Diccionario automatico).dic" ] #diccionario automático
				then
					if [ -f "$TMP/diccionario.dic" ] #si la red es vulnerable
					then
						DICCIONARIO="diccionario.dic"
						let TOTAL_CLAVES=`cat "$TMP/diccionario.dic" | wc -l`
						CLAVES_CON_FORMATO=`separador_de_miles $TOTAL_CLAVES`
						echo #reserva la línea
						if [ $TOTAL_CLAVES -eq 1 ]
						then
							echo -e "  \"$blanco$DICCIONARIO$cyanC\" ($CLAVES_CON_FORMATO contraseña) $grisC"
						else
							echo -e "  \"$blanco$DICCIONARIO$cyanC\" ($CLAVES_CON_FORMATO contraseñas) $grisC"
						fi
						echo -en "\033[2A"
						echo -en $blanco"\r  [$HORA]$cyanC Buscando con el diccionario nº $CONT:   \c"
						if [ $TOTAL_CLAVES -ne 0 ]
						then
							$CRONOMETRO &
							disown
							if [ "$USAR_PYRIT" = "NO" ] || [ "$HANDSHAKE_INCOMPLETO" = "SI" ]
							then
								pasar_diccionario_dic_con_aircrack
							else
								pasar_diccionario_dic_con_pyrit
							fi
						else
							echo -n > "$TMP/FINALIZADO.tmp"
						fi
					else #si la red no es vulnerable
						echo -n > "$TMP/FINALIZADO.tmp"
						echo #reserva la línea
						echo -e "  \"$blanco$DICCIONARIO$cyanC\""
						echo -en "\033[2A"
						echo -en $blanco"\r  [$HORA]$cyanC Buscando con el diccionario nº $CONT:   \c"
					fi
				else #si es un diccionario de texto plano y no es diccionario automático
					let TOTAL_CLAVES=`cat ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" | wc -l` #nº de líneas del diccionario
					SESION_SAVER=`echo "$HANDSHAKE" | sed 's/.cap$//'` #nombre handshake sin ruta y sin extensión
					NOMBRE_DICCIONARIO=`echo "$DICCIONARIO" | sed 's/.dic$//' | sed 's/.txt$//'` #nombre del diccionario sin extensión
					SESION_SAVER=`echo "$SESIONES_WPA/$SESION_SAVER[$NOMBRE_DICCIONARIO].sav"`
					if [ -f "$SESION_SAVER" ]
					then
						let CLAVES_PROBADAS=`sed -n 7p "$SESION_SAVER"`
					else
						let CLAVES_PROBADAS=0
					fi
					let CLAVES_RESTANTES=$TOTAL_CLAVES-$CLAVES_PROBADAS
					CLAVES_CON_FORMATO=`separador_de_miles $CLAVES_RESTANTES`
					echo #reserva la línea
					if [ $CLAVES_RESTANTES -eq 1 ]
					then
						echo -e "  \"$blanco$DICCIONARIO$cyanC\" (falta $CLAVES_CON_FORMATO contraseña) $grisC"
					else
						echo -e "  \"$blanco$DICCIONARIO$cyanC\" (faltan $CLAVES_CON_FORMATO contraseñas) $grisC"
					fi
					echo -en "\033[2A"
					echo -en $blanco"\r  [$HORA]$cyanC Buscando con el diccionario nº $CONT:   \c"
					$CRONOMETRO &
					disown
					if [ "$USAR_PYRIT" = "NO" ] || [ "$HANDSHAKE_INCOMPLETO" = "SI" ]
					then
						pasar_diccionario_dic_con_aircrack
					else
						pasar_diccionario_dic_con_pyrit
					fi
				fi
			else #diccionario .sh
				let TOTAL_CLAVES=`cat ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" | sed -n 2p | awk -F '=' '{print $2}'`
				SESION_SAVER=`echo "$HANDSHAKE" | sed 's/.cap$//'` #nombre handshake sin ruta y sin extensión
				NOMBRE_DICCIONARIO=`echo "$DICCIONARIO" | sed 's/.sh$//'` #nombre del diccionario sin extensión
				SESION_SAVER=`echo "$SESIONES_WPA/$SESION_SAVER[$NOMBRE_DICCIONARIO].sav"`
				if [ -f "$SESION_SAVER" ]
				then
					let CLAVES_PROBADAS=`sed -n 7p "$SESION_SAVER"`
					PARAMETROS=`sed -n 4p "$SESION_SAVER"`
				else
					let CLAVES_PROBADAS=0
					PARAMETROS=""
				fi
				let CLAVES_RESTANTES=$TOTAL_CLAVES-$CLAVES_PROBADAS
				CLAVES_CON_FORMATO=`separador_de_miles $CLAVES_RESTANTES`
				echo #reserva la línea
				if [ $CLAVES_RESTANTES -eq 1 ]
				then
					echo -e "  \"$blanco$DICCIONARIO$cyanC\" (falta $CLAVES_CON_FORMATO contraseña) $grisC"
				else
					echo -e "  \"$blanco$DICCIONARIO$cyanC\" (faltan $CLAVES_CON_FORMATO contraseñas) $grisC"
				fi
				echo -en "\033[2A"
				echo -en $blanco"\r  [$HORA]$cyanC Buscando con el diccionario nº $CONT:   \c"
				$CRONOMETRO &
				disown
				if [ "$USAR_PYRIT" = "NO" ] || [ "$HANDSHAKE_INCOMPLETO" = "SI" ]
				then
					pasar_diccionario_sh_con_aircrack
				else
					pasar_diccionario_sh_con_pyrit
					if [ $? -ne 0 ]
					then
						pasar_diccionario_sh_con_aircrack
					fi
				fi
			fi
			killall -q -w cronometro.sh
			EXISTE=`find "$CLAVES" | grep "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt"`
			if [ "$EXISTE" != "" ]
			then
				echo -e $verdeC"¡¡¡ ENCONTRADA !!!"$grisC
				echo -e $grisC
				echo -e $grisC
				rm -rf "$SESION_SAVER" >/dev/null 2>&1 #borra el archivo de sesión
				echo "$EXISTE" >> "$TMP/ARCHIVOS_CLAVES.txt" #guarda en este .txt el nombre del archivo con la contraseña
				echo "${DICCIONARIO}|${NOMBRE_HANDSHAKE}.cap" >> "$CARPETA_DICCIONARIOS/handshakes_probados.lst" #marca este handshake y diccionario como ya probados juntos
				break #SI CON EL DICCIONARIO ACTUAL SE ENCUENTRA LA CONTRASEÑA SALE DEL BUCLE
			else
				if [ -f "$TMP/FINALIZADO.tmp" ] #si este archivo .tmp existe es porque se ha probado el diccionario completo
				then
					if [ $TOTAL_CLAVES -eq 0 ]
					then
						echo -e $magentaC"NO VULNERABLE"$grisC
						echo -e $grisC
					else
						echo -e $rojoC"NO ENCONTRADA"$grisC
						echo -e $grisC
					fi
				else
					echo -e $rojoC"CANCELADO"$grisC #ni no existe el archivo .tmp es porque se ha cancelado el proceso
					echo -e $grisC
				fi
			fi
			if [ -f "$TMP/FINALIZADO.tmp" ] #ARCHIVO BALIZA QUE CONTROLA SI SE CANCELÓ EL PROCESO. EN TAL CASO NO ASOCIARÁ EL DICCIONARIO AL HANDSHAKE
			then
				echo "${DICCIONARIO}|${NOMBRE_HANDSHAKE}.cap" >> "$CARPETA_DICCIONARIOS/handshakes_probados.lst"
			fi
			echo -e $grisC
		else
			echo -e $blanco"\r  [$HORA]$cyanC Buscando con el diccionario nº $CONT:  $magentaC YA PROBADO. SE OMITE"
			echo -e $cyanC"  \"$blanco$DICCIONARIO$cyanC\""
			echo -e $grisC
		fi
		killall -q aircrack-ng pyrit crunch > /dev/null 2>&1
		let CONT=$CONT+1
	done
	let CONT_HANDSHAKE=$CONT_HANDSHAKE+1
done
}

#MUESTRA LAS CONTRASEÑAS OBTENIDAS
mostrar_claves()
{
echo -e $grisC
if [ -f "$TMP/ARCHIVOS_CLAVES.txt" ]
then
	echo -e $grisC
	let CUANTOS=`cat "$TMP/ARCHIVOS_CLAVES.txt" | wc -l`
	if [ $CUANTOS -eq 1 ]
	then
		echo -e $verdeC"Se ha encontrado 1 contraseña:"
	else
		echo -e $verdeC"Se han encontrado $CUANTOS contraseñas:"
	fi
	echo -e $grisC
	while IFS='|' read ARCHIVO
	do
		ARCHIVO_SIN_RUTA=`echo "$ARCHIVO" | awk -F '/' '{print $NF}'`
		echo -e $cyanC"  $ARCHIVO_SIN_RUTA"
		echo -en $blanco " "
		cat "$ARCHIVO"
		echo -e $grisC
		echo -e $grisC
	done < "$TMP/ARCHIVOS_CLAVES.txt"
else
	echo -e $rojoC"  No se ha encontrado ninguna contraseña."
fi
echo -e $grisC
}

#HORA DE INICIO
hora_inicio()
{
ano1=`date +%Y`
mes1=`date +%m`
dia1=`date +%d`
hora1=`date +%H`
minutos1=`date +%M`
segundos1=`date +%S`
segundos_del_ano1=`date +%s`
}

#HORA DE FINALIZACIÓN
hora_fin()
{
ano2=`date +%Y`
mes2=`date +%m`
dia2=`date +%d`
hora2=`date +%H`
minutos2=`date +%M`
segundos2=`date +%S`
segundos_del_ano2=`date +%s`
}

#DIFERENCIA DE TIEMPO ENTRE "HORA DE INICIO" Y "HORA DE FINALIZACIÓN"
calcular_tiempo()
{
segundos=`expr $segundos_del_ano2 - $segundos_del_ano1`
minutos=0
horas=0
dias=0
dias=`expr $segundos / 86400`
segundos=`expr $segundos % 86400`
horas=`expr $segundos / 3600`
segundos=`expr $segundos % 3600`
minutos=`expr $segundos / 60`
segundos=`expr $segundos % 60`
}

mostrar_duracion()
{
echo -e $cyanC"Duración del proceso...: "$blanco"\c"
if [ $dias -ne 0 ]	# DESGLOSE EN DIAS, HORAS, MINUTOS Y SEGUNDOS DE LA DURACIÓN DEL PROCESO
then
	if [ $dias -eq 1 ]
	then
		echo -e "$dias día\c"
	else
		echo -e "$dias días\c"
	fi
	if [ $horas -ne 0 ] && [ $minutos -eq 0 ] && [ $segundos -eq 0 ]
	then
		echo -e " y \c"
	else
		if [ $horas -eq 0 ] && [ $minutos -ne 0 ] && [ $segundos -eq 0 ]
		then
			echo -e " y \c"
		else
			if [ $horas -eq 0 ] && [ $minutos -eq 0 ] && [ $segundos -ne 0 ]
			then
				echo -e " y \c"
			else
				if [ $horas -ne 0 ] || [ $minutos -ne 0 ] || [ $segundos -ne 0 ]
				then
					echo -e ", \c"
				fi
			fi
		fi
	fi
fi
if [ $horas -ne 0 ]
then
	if [ $horas -eq 1 ]
	then
		echo -e "$horas hora\c"
	else
		echo -e "$horas horas\c"
	fi
	if [ $minutos -ne 0 ] && [ $segundos -eq 0 ]
	then
		echo -e " y \c"
	fi
	if [ $minutos -eq 0 ] && [ $segundos -ne 0 ]
	then
		echo -e " y \c"
	fi
	if [ $minutos -ne 0 ] && [ $segundos -ne 0 ]
	then
		echo -e ", \c"
	fi
fi
if [ $minutos -ne 0 ]
then
	if [ $minutos -eq 1 ]
	then
		echo -e "$minutos minuto\c"
	else
		echo -e "$minutos minutos\c"
	fi
	if [ $segundos -ne 0 ]
	then
		echo -e " y \c"
	fi
fi
if [ $segundos -ne 0 ]
then
	if [ $segundos -eq 1 ]
	then
		echo -e "$segundos segundo\c"
	else
		echo -e "$segundos segundos\c"
	fi
else
	if [ $dias -eq 0 ] && [ $horas -eq 0 ] && [ $minutos -eq 0 ]
	then
		echo -e "$segundos segundos\c"
	fi
fi
echo -e "$grisC"
echo
}

comprobar_distribucion()
{
DISTRIBUCION=$(./software/./distro_linux.sh)
case "$DISTRIBUCION" in
"<Desconocida>")
	echo -e $rojoC"\rDistribución de Linux desconocida$grisC"
	echo -e $grisC;;
*)
	echo -e $verdeC"\rDistribución de linux detectada: $blanco$DISTRIBUCION"
	echo -e $grisC;;
esac
}

mostrar_ayuda()
{
echo -e $blanco
echo "GOYscriptDIC $VERSION by GOYfilms"
echo -e $grisC
echo "Modo de uso: $0 [filtro] [--d=<ruta>] [--h=<ruta>]"
echo
echo "OPCIONES:"
echo "    filtro   : Filtra la búsqueda de handshakes"
echo "    -h=<ruta>: Cambia la ubicación de los handshakes"
echo "    -d=<ruta>: Cambia la ubicación de los diccionarios"
echo
echo "Ejemplos:"
echo "    $0"
echo "    $0 WLAN"
echo "    $0 -h=/mnt/sda2/handshakes"
echo "    $0 -d=/mnt/sda1/words"
echo "    $0 -d=/mnt/sda1/dic -h=/mnt/sdc1/handsk"
echo -e "$grisC"
exit 1
}

comprobar_pyrit()
{
which pyrit > /dev/null 2>&1
USAR_PYRIT="NO"
if [ $? -eq 0 ]
then
	echo
	echo -en $cyanC"¿Quieres utilizar pyrit para el proceso? [S/N]: $amarillo\c"
	read -n 1 OPCION
	while [ "$OPCION" != "s" ] && [ "$OPCION" != "S" ] && [ "$OPCION" != "n" ] && [ "$OPCION" != "N" ]
	do
		echo -en $cyanC"\r¿Quieres utilizar pyrit para el proceso? [S/N]: $amarillo\033[K\c"
		read -n 1 OPCION
	done
	if [ "$OPCION" = "s" ] || [ "$OPCION" = "S" ]
	then
		echo -en $cyanC"\r¿Quieres utilizar pyrit para el proceso? [S/N]:$amarillo SÍ\c"
		echo
		echo
		USAR_PYRIT="SI"
	else
		echo -en $cyanC"\r¿Quieres utilizar pyrit para el proceso? [S/N]:$amarillo NO\c"
		echo
		echo
	fi
fi
}

inicializar()
{
echo -en $cyanC"  Iniciando...  \c"
rm -rf "$TMP/handshakes.lst" > /dev/null 2>&1
rm -rf "$TMP/handshakes.tmp" > /dev/null 2>&1
rm -rf "$TMP/handshakes2.tmp" > /dev/null 2>&1
rm -rf "$TMP/handshakes.menu" > /dev/null 2>&1
rm -rf "$TMP/diccionarios.lst" > /dev/null 2>&1
rm -rf "$TMP/diccionarios.tmp" > /dev/null 2>&1
rm -rf "$TMP/diccionarios2.tmp" > /dev/null 2>&1
rm -rf "$TMP/diccionarios.menu" > /dev/null 2>&1
comprobar_handshakes_probados
mkdir -p "$CARPETA_HANDSHAKES" > /dev/null 2>&1
mkdir -p "$CARPETA_DICCIONARIOS" > /dev/null 2>&1
mkdir -p "$SESIONES" > /dev/null 2>&1
mkdir -p "$TMP" > /dev/null 2>&1
}

comprobar_handshakes_probados()
{
if [ ! -e "$CARPETA_DICCIONARIOS/handshakes_probados.lst" ] #SI NO EXISTE EL ARCHIVO LO CREA
then
	echo -n > "$CARPETA_DICCIONARIOS/handshakes_probados.lst"
else                                       #SI YA EXISTE LO ORDENA Y ELIMINA POSIBLES DUPLICADOS
	mv "$CARPETA_DICCIONARIOS/handshakes_probados.lst" "$CARPETA_DICCIONARIOS/handshakes_probados.bak"
	sort -u "$CARPETA_DICCIONARIOS/handshakes_probados.bak" > "$CARPETA_DICCIONARIOS/handshakes_probados.lst"
	rm -rf "$CARPETA_DICCIONARIOS/handshakes_probados.bak"
fi
}

comprobar_red_vulnerable()
{
rm -rf "$TMP/diccionario.dic" > /dev/null 2>&1
EXISTE_BSSID=`grep "$MAC_AP_MITAD" "$BSSIDs_VULNERABLES"`
if [ "$EXISTE_BSSID" = "" ] #si no se encontró ninguno mira en los que no tienen un BSSID conocido
then
	EXISTE_BSSID=`grep "XX:XX:XX" "$BSSIDs_VULNERABLES"`
fi
CUANTOS_BSSID=`echo "$EXISTE_BSSID" | wc -l` #cuantos BSSID coinciden con el patrón
let X=1
while [ $X -le $CUANTOS_BSSID ]
do
	PROGRAMA=`echo "$EXISTE_BSSID" | sed -n ${X}p | awk -F '|' '{print $3}'`
	PATRON_ESSID=`echo "$EXISTE_BSSID" | sed -n ${X}p | awk -F '|' '{print $2}' | sed 's/X//g'`
	COINCIDE=`echo "$NOMBRE_AP" | grep "$PATRON_ESSID"`
	if [ "$COINCIDE" != "" ] #si coincide el ESSID con el patrón de la base de datos
	then
		case "$PROGRAMA" in
		wlan_xxxx)
			software/./wlan_xxxx "$NOMBRE_AP" "$MAC_AP" > "$TMP/diccionario.dic";;
		ono4xx)
			software/./ono4xx "$NOMBRE_AP" "$MAC_AP" wpa > "$TMP/diccionario.dic";;
		stkeys)
			OCTETOS=`echo -n "$NOMBRE_AP" | sed 's/SpeedTouch//'`
			echo -en $cyanC"  Creando diccionario... \c"
			software/./stkeys -i "$OCTETOS" -o "$TMP/diccionario.dic" > /dev/null 2>&1
			echo -en "\r\c";;
		wlan_xxxx)
			software/./wlan_xxxx "$NOMBRE_AP" "$MAC_AP" > "$TMP/diccionario.dic";;
		wpamagickey)
			if [[ ${NOMBRE_AP:0:5} = "WLAN_" ]] \
			|| [[ ${NOMBRE_AP:0:5} = "wlan_" ]] \
			|| [[ ${NOMBRE_AP:0:8} = "JAZZTEL_" ]] \
			|| [[ ${NOMBRE_AP:0:8} = "Jazztel_" ]] \
			|| [[ ${NOMBRE_AP:0:7} = "NoEssid" ]]
			then
				software/./wpamagickey "$NOMBRE_AP" "$MAC_AP" | sed '/^$/d' | sed -n 4,99999999p > "$TMP/diccionario.dic"
			fi;;
		*)
			ES_UN_SCRIPT=`echo "$PROGRAMA" | grep ".sh$"`
			if [ "$ES_UN_SCRIPT" != "" ]
			then
				DICCIONARIO="$PROGRAMA"
			fi;;
		esac
		break #si coincide se sale del bucle
	fi
	let X=$X+1
done
if [ "$DESDE_OTRO_SCRIPT" = "SI" ] && [ ! -f "$TMP/diccionario.dic" ] && [ "$DICCIONARIO" = "" ] #si no se encontró ninguno y se llamó al script desde otro entonces se usan los diccionarios genéricos
then
	echo -e $rojoC"La contraseña de la red $amarillo$NOMBRE_AP$rojoC no tiene un patrón conocido."
	echo -e $grisC
	exit 0
fi
}

pasar_diccionario_dic_con_aircrack()
{
if [ -f "$TMP/$DICCIONARIO" ]
then
	if [ "$INTERFAZ_GRAFICA" = "SI" ]
	then
		xterm $DEBUG $NORMAL $AIRCRACK_VENTANA -title "Probando contraseñas de \"$DICCIONARIO\"" -e "$PASAR_DICCIONARIO" ""$TMP"/$DICCIONARIO" NULL "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
	else
		$SCREEN -t "aircrack" "$PASAR_DICCIONARIO" ""$TMP"/$DICCIONARIO" NULL "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
		#~ "$PASAR_DICCIONARIO" ""$TMP"/$DICCIONARIO" NULL "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP" &
		esperar_cierre aircrack-ng
	fi
else
	if [ "$INTERFAZ_GRAFICA" = "SI" ]
	then
		xterm $DEBUG $NORMAL $AIRCRACK_VENTANA -title "Probando contraseñas de \"$DICCIONARIO\"" -e "$PASAR_DICCIONARIO" ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" NULL "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
	else
		$SCREEN -t "aircrack" "$PASAR_DICCIONARIO" ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" NULL "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
		#~ "$PASAR_DICCIONARIO" ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" NULL "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP" &
		esperar_cierre aircrack-ng
	fi
fi
}

#ESPERA A QUE SE CIERRE LA APLICACIÓN QUE SE PASA COMO PARÁMETRO
esperar_cierre()
{
FUNCIONANDO=`ps $PARAMETRO_PS | grep "$1" | grep -v grep`
while [ "$FUNCIONANDO" = "" ] #espera a que se inicie la ejecucion de la aplicacion
do
	FUNCIONANDO=`ps $PARAMETRO_PS | grep "$1" | grep -v grep`
	sleep 1
done
while [ "$FUNCIONANDO" != "" ] #espera a que se cierre la aplicacion
do
	FUNCIONANDO=`ps $PARAMETRO_PS | grep "$1" | grep -v grep`
	sleep 1
done
}

pasar_diccionario_dic_con_pyrit()
{
if [ -f "$TMP/$DICCIONARIO" ]
then
	if [ "$INTERFAZ_GRAFICA" = "SI" ]
	then
		xterm $DEBUG $NORMAL $AIRCRACK_VENTANA -title "Probando contraseñas de \"$DICCIONARIO\"" -e "$PASAR_DICCIONARIO" ""$TMP"/$DICCIONARIO" NULL "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
	else
		$SCREEN -t "pyrit" "$PASAR_DICCIONARIO" ""$TMP"/$DICCIONARIO" NULL "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
		#~ "$PASAR_DICCIONARIO" ""$TMP"/$DICCIONARIO" NULL "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP" &
		esperar_cierre pyrit
	fi
else
	if [ "$INTERFAZ_GRAFICA" = "SI" ]
	then
		xterm $DEBUG $NORMAL $AIRCRACK_VENTANA -title "Probando contraseñas de \"$DICCIONARIO\"" -e "$PASAR_DICCIONARIO" ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" NULL "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
	else
		$SCREEN -t "pyrit" "$PASAR_DICCIONARIO" ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" NULL "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
		#~ "$PASAR_DICCIONARIO" ""$CARPETA_DICCIONARIOS"/$DICCIONARIO" NULL "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP" &
		esperar_cierre pyrit
	fi
fi
}

pasar_diccionario_sh_con_aircrack()
{
if [ "$INTERFAZ_GRAFICA" = "SI" ]
then
	xterm $DEBUG $NORMAL $AIRCRACK_VENTANA -title "Probando contraseñas al vuelo de \"$DICCIONARIO\"" -e "$PASAR_DICCIONARIO" "$CARPETA_DICCIONARIOS/$DICCIONARIO" "$PARAMETROS" "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
else
	$SCREEN -t "aircrack" "$PASAR_DICCIONARIO" "$CARPETA_DICCIONARIOS/$DICCIONARIO" "$PARAMETROS" "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
	#~ "$PASAR_DICCIONARIO" "$CARPETA_DICCIONARIOS/$DICCIONARIO" "$PARAMETROS" "$AIRCRACK" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP" &
	esperar_cierre aircrack-ng
fi
}

pasar_diccionario_sh_con_pyrit()
{
if [ "$INTERFAZ_GRAFICA" = "SI" ]
then
	xterm $DEBUG $NORMAL $AIRCRACK_VENTANA -title "Probando contraseñas al vuelo de \"$DICCIONARIO\"" -e "$PASAR_DICCIONARIO" "$CARPETA_DICCIONARIOS/$DICCIONARIO" "$PARAMETROS" "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
else
	$SCREEN -t "pyrit" "$PASAR_DICCIONARIO" "$CARPETA_DICCIONARIOS/$DICCIONARIO" "$PARAMETROS" "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP"
	#~ "$PASAR_DICCIONARIO" "$CARPETA_DICCIONARIOS/$DICCIONARIO" "$PARAMETROS" "$PYRIT" "$HANDSHAKE_CON_RUTA" "$CLAVES/$NOMBRE_AP ($MAC_AP_GUIONES).txt" "$MAC_AP" &
	esperar_cierre pyrit
fi
}

comprobar_permisos_solo_lectura()
{
rm -rf "prueba_permisos" > /dev/null 2>&1
mkdir "prueba_permisos" > /dev/null 2>&1
if [ $? -ne 0 ]
then
	echo -e $grisC
	echo -e $rojoC"  ERROR: El dispositivo está montado como sólo lectura"
	echo -e $cyanC"         Prueba a volver a montarlo con:"
	echo -e $cyanC"         mount -o remount,rw <punto_de_montaje>"
	echo -e $grisC
	echo -e $cyanC"         Ejemplo:"
	echo -e $cyanC"             mount -o remount,rw /mnt/sdb1"
	echo -e $grisC
	pulsar_una_tecla "Pulsa una tecla para salir..."
else
	rm -rf "prueba_permisos" > /dev/null 2>&1
fi
}

comprobar_root()
{
USUARIO=`whoami`
if [ "$USUARIO" != "root" ]
then
	echo -e $grisC
	echo -e $rojoC"ERROR: Necesitas permisos de root para poder"
	echo -e $rojoC"       ejecutar este script"
	echo -e $grisC
	pulsar_una_tecla "Pulsa una tecla para salir..."
fi
}


##### PROGRAMA PRINCIPAL #####

version
comprobar_permisos_solo_lectura
if [ "$WRT" = "" ]
then
	comprobar_root
fi
INTERFAZ_GRAFICA=`ps $PARAMETRO_PS | grep -e goyscriptTTY -e goyscriptWRT | grep -v grep`
if [ "$INTERFAZ_GRAFICA" = "" ]
then
	INTERFAZ_GRAFICA="SI"
else
	INTERFAZ_GRAFICA="NO"
fi

if [ $# -ne 0 ]
then
	if [[ ${1:0:3} = "-h=" ]]
	then
		CARPETA_HANDSHAKES=`echo $1 | awk -F "=" '{print $2}'`
	else
		if [[ ${1:0:3} = "-d=" ]]
		then
			CARPETA_DICCIONARIOS=`echo $1 | awk -F "=" '{print $2}'`
		else
			FILTRAR="SI"
			FILTRO="$1"
	 	fi
	fi
	if [[ ${2:0:3} = "-h=" ]]
	then
		CARPETA_HANDSHAKES=`echo $2 | awk -F "=" '{print $2}'`
	else
		if [[ ${2:0:3} = "-d=" ]]
		then
			CARPETA_DICCIONARIOS=`echo $2 | awk -F "=" '{print $2}'`
		fi
	fi
	if [ "$1" == "--help" ] || [ "$1" == "--ayuda" ] || [ "$1" == "/?" ]
	then
		mostrar_ayuda
	fi
fi

if [ "$1" != "--directo" ]
then
	DESDE_OTRO_SCRIPT="NO"
	inicializar
	comprobar_distribucion
	mostrar_cuantos_hay
	seleccionar_handshakes
	seleccionar_diccionarios
	comprobar_pyrit
	mostrar_resumen
else
	DESDE_OTRO_SCRIPT="SI"
	MAC_AP="$2"
	NOMBRE_AP="$3"
	USAR_PYRIT="NO"
	MAC_AP_MITAD=`echo "$MAC_AP" | cut -c-8`
	comprobar_handshakes_probados
	comprobar_red_vulnerable
	mostrar_resumen
fi

hora_inicio
pasar_diccionarios
mostrar_claves
hora_fin
calcular_tiempo
mostrar_duracion

if [ "$1" != "--directo" ]
then
	pulsar_una_tecla "Pulsa una tecla para reiniciar el script..."
	unset
	sh $0 $*
fi

echo -e $grisC

#FIN
